/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/uikit/dist/js/uikit-icons.js":
/*!***************************************************!*\
  !*** ./node_modules/uikit/dist/js/uikit-icons.js ***!
  \***************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;__webpack_require__(/*! core-js/modules/esnext.global-this.js */ "./node_modules/core-js/modules/esnext.global-this.js");

__webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");

__webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");

__webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");

__webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");

__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*! UIkit 3.7.4 | https://www.getuikit.com | (c) 2014 - 2021 YOOtheme | MIT License */
(function (global, factory) {
  ( false ? 0 : _typeof(exports)) === 'object' && "object" !== 'undefined' ? module.exports = factory() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
		__WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : (0);
})(this, function () {
  'use strict';

  function plugin(UIkit) {
    if (plugin.installed) {
      return;
    }

    UIkit.icon.add({
      "500px": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M9.624,11.866c-0.141,0.132,0.479,0.658,0.662,0.418c0.051-0.046,0.607-0.61,0.662-0.664c0,0,0.738,0.719,0.814,0.719 c0.1,0,0.207-0.055,0.322-0.17c0.27-0.269,0.135-0.416,0.066-0.495l-0.631-0.616l0.658-0.668c0.146-0.156,0.021-0.314-0.1-0.449 c-0.182-0.18-0.359-0.226-0.471-0.125l-0.656,0.654l-0.654-0.654c-0.033-0.034-0.08-0.045-0.124-0.045 c-0.079,0-0.191,0.068-0.307,0.181c-0.202,0.202-0.247,0.351-0.133,0.462l0.665,0.665L9.624,11.866z\"/><path d=\"M11.066,2.884c-1.061,0-2.185,0.248-3.011,0.604c-0.087,0.034-0.141,0.106-0.15,0.205C7.893,3.784,7.919,3.909,7.982,4.066 c0.05,0.136,0.187,0.474,0.452,0.372c0.844-0.326,1.779-0.507,2.633-0.507c0.963,0,1.9,0.191,2.781,0.564 c0.695,0.292,1.357,0.719,2.078,1.34c0.051,0.044,0.105,0.068,0.164,0.068c0.143,0,0.273-0.137,0.389-0.271 c0.191-0.214,0.324-0.395,0.135-0.575c-0.686-0.654-1.436-1.138-2.363-1.533C13.24,3.097,12.168,2.884,11.066,2.884z\"/><path d=\"M16.43,15.747c-0.092-0.028-0.242,0.05-0.309,0.119l0,0c-0.652,0.652-1.42,1.169-2.268,1.521 c-0.877,0.371-1.814,0.551-2.779,0.551c-0.961,0-1.896-0.189-2.775-0.564c-0.848-0.36-1.612-0.879-2.268-1.53 c-0.682-0.688-1.196-1.455-1.529-2.268c-0.325-0.799-0.471-1.643-0.471-1.643c-0.045-0.24-0.258-0.249-0.567-0.203 c-0.128,0.021-0.519,0.079-0.483,0.36v0.01c0.105,0.644,0.289,1.284,0.545,1.895c0.417,0.969,1.002,1.849,1.756,2.604 c0.757,0.754,1.636,1.34,2.604,1.757C8.901,18.785,9.97,19,11.088,19c1.104,0,2.186-0.215,3.188-0.645 c1.838-0.896,2.604-1.757,2.604-1.757c0.182-0.204,0.227-0.317-0.1-0.643C16.779,15.956,16.525,15.774,16.43,15.747z\"/><path d=\"M5.633,13.287c0.293,0.71,0.723,1.341,1.262,1.882c0.54,0.54,1.172,0.971,1.882,1.264c0.731,0.303,1.509,0.461,2.298,0.461 c0.801,0,1.578-0.158,2.297-0.461c0.711-0.293,1.344-0.724,1.883-1.264c0.543-0.541,0.971-1.172,1.264-1.882 c0.314-0.721,0.463-1.5,0.463-2.298c0-0.79-0.148-1.569-0.463-2.289c-0.293-0.699-0.721-1.329-1.264-1.881 c-0.539-0.541-1.172-0.959-1.867-1.263c-0.721-0.303-1.5-0.461-2.299-0.461c-0.802,0-1.613,0.159-2.322,0.461 c-0.577,0.25-1.544,0.867-2.119,1.454v0.012V2.108h8.16C15.1,2.104,15.1,1.69,15.1,1.552C15.1,1.417,15.1,1,14.809,1H5.915 C5.676,1,5.527,1.192,5.527,1.384v6.84c0,0.214,0.273,0.372,0.529,0.428c0.5,0.105,0.614-0.056,0.737-0.224l0,0 c0.18-0.273,0.776-0.884,0.787-0.894c0.901-0.905,2.117-1.408,3.416-1.408c1.285,0,2.5,0.501,3.412,1.408 c0.914,0.914,1.408,2.122,1.408,3.405c0,1.288-0.508,2.496-1.408,3.405c-0.9,0.896-2.152,1.406-3.438,1.406 c-0.877,0-1.711-0.229-2.433-0.671v-4.158c0-0.553,0.237-1.151,0.643-1.614c0.462-0.519,1.094-0.799,1.782-0.799 c0.664,0,1.293,0.253,1.758,0.715c0.459,0.459,0.709,1.071,0.709,1.723c0,1.385-1.094,2.468-2.488,2.468 c-0.273,0-0.769-0.121-0.781-0.125c-0.281-0.087-0.405,0.306-0.438,0.436c-0.159,0.496,0.079,0.585,0.123,0.607 c0.452,0.137,0.743,0.157,1.129,0.157c1.973,0,3.572-1.6,3.572-3.57c0-1.964-1.6-3.552-3.572-3.552c-0.97,0-1.872,0.36-2.546,1.038 c-0.656,0.631-1.027,1.487-1.027,2.322v3.438v-0.011c-0.372-0.42-0.732-1.041-0.981-1.682c-0.102-0.248-0.315-0.202-0.607-0.113 c-0.135,0.035-0.519,0.157-0.44,0.439C5.372,12.799,5.577,13.164,5.633,13.287z\"/></svg>",
      "album": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect x=\"5\" y=\"2\" width=\"10\" height=\"1\"/><rect x=\"3\" y=\"4\" width=\"14\" height=\"1\"/><rect fill=\"none\" stroke=\"#000\" x=\"1.5\" y=\"6.5\" width=\"17\" height=\"11\"/></svg>",
      "arrow-down": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon points=\"10.5,16.08 5.63,10.66 6.37,10 10.5,14.58 14.63,10 15.37,10.66\"/><line fill=\"none\" stroke=\"#000\" x1=\"10.5\" y1=\"4\" x2=\"10.5\" y2=\"15\"/></svg>",
      "arrow-left": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" points=\"10 14 5 9.5 10 5\"/><line fill=\"none\" stroke=\"#000\" x1=\"16\" y1=\"9.5\" x2=\"5\" y2=\"9.52\"/></svg>",
      "arrow-right": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" points=\"10 5 15 9.5 10 14\"/><line fill=\"none\" stroke=\"#000\" x1=\"4\" y1=\"9.5\" x2=\"15\" y2=\"9.5\"/></svg>",
      "arrow-up": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon points=\"10.5,4 15.37,9.4 14.63,10.08 10.5,5.49 6.37,10.08 5.63,9.4\"/><line fill=\"none\" stroke=\"#000\" x1=\"10.5\" y1=\"16\" x2=\"10.5\" y2=\"5\"/></svg>",
      "bag": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"#000\" d=\"M7.5,7.5V4A2.48,2.48,0,0,1,10,1.5,2.54,2.54,0,0,1,12.5,4V7.5\"/><polygon fill=\"none\" stroke=\"#000\" points=\"16.5 7.5 3.5 7.5 2.5 18.5 17.5 18.5 16.5 7.5\"/></svg>",
      "ban": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" cx=\"10\" cy=\"10\" r=\"9\"/><line fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" x1=\"4\" y1=\"3.5\" x2=\"16\" y2=\"16.5\"/></svg>",
      "behance": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M9.5,10.6c-0.4-0.5-0.9-0.9-1.6-1.1c1.7-1,2.2-3.2,0.7-4.7C7.8,4,6.3,4,5.2,4C3.5,4,1.7,4,0,4v12c1.7,0,3.4,0,5.2,0 c1,0,2.1,0,3.1-0.5C10.2,14.6,10.5,12.3,9.5,10.6L9.5,10.6z M5.6,6.1c1.8,0,1.8,2.7-0.1,2.7c-1,0-2,0-2.9,0V6.1H5.6z M2.6,13.8v-3.1 c1.1,0,2.1,0,3.2,0c2.1,0,2.1,3.2,0.1,3.2L2.6,13.8z\"/><path d=\"M19.9,10.9C19.7,9.2,18.7,7.6,17,7c-4.2-1.3-7.3,3.4-5.3,7.1c0.9,1.7,2.8,2.3,4.7,2.1c1.7-0.2,2.9-1.3,3.4-2.9h-2.2 c-0.4,1.3-2.4,1.5-3.5,0.6c-0.4-0.4-0.6-1.1-0.6-1.7H20C20,11.7,19.9,10.9,19.9,10.9z M13.5,10.6c0-1.6,2.3-2.7,3.5-1.4 c0.4,0.4,0.5,0.9,0.6,1.4H13.5L13.5,10.6z\"/><rect x=\"13\" y=\"4\" width=\"5\" height=\"1.4\"/></svg>",
      "bell": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M17,15.5 L3,15.5 C2.99,14.61 3.79,13.34 4.1,12.51 C4.58,11.3 4.72,10.35 5.19,7.01 C5.54,4.53 5.89,3.2 7.28,2.16 C8.13,1.56 9.37,1.5 9.81,1.5 L9.96,1.5 C9.96,1.5 11.62,1.41 12.67,2.17 C14.08,3.2 14.42,4.54 14.77,7.02 C15.26,10.35 15.4,11.31 15.87,12.52 C16.2,13.34 17.01,14.61 17,15.5 L17,15.5 Z\"/><path fill=\"none\" stroke=\"#000\" d=\"M12.39,16 C12.39,17.37 11.35,18.43 9.91,18.43 C8.48,18.43 7.42,17.37 7.42,16\"/></svg>",
      "bold": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M5,15.3 C5.66,15.3 5.9,15 5.9,14.53 L5.9,5.5 C5.9,4.92 5.56,4.7 5,4.7 L5,4 L8.95,4 C12.6,4 13.7,5.37 13.7,6.9 C13.7,7.87 13.14,9.17 10.86,9.59 L10.86,9.7 C13.25,9.86 14.29,11.28 14.3,12.54 C14.3,14.47 12.94,16 9,16 L5,16 L5,15.3 Z M9,9.3 C11.19,9.3 11.8,8.5 11.85,7 C11.85,5.65 11.3,4.8 9,4.8 L7.67,4.8 L7.67,9.3 L9,9.3 Z M9.185,15.22 C11.97,15 12.39,14 12.4,12.58 C12.4,11.15 11.39,10 9,10 L7.67,10 L7.67,15 L9.18,15 Z\"/></svg>",
      "bolt": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M4.74,20 L7.73,12 L3,12 L15.43,1 L12.32,9 L17.02,9 L4.74,20 L4.74,20 L4.74,20 Z M9.18,11 L7.1,16.39 L14.47,10 L10.86,10 L12.99,4.67 L5.61,11 L9.18,11 L9.18,11 L9.18,11 Z\"/></svg>",
      "bookmark": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon fill=\"none\" stroke=\"#000\" points=\"5.5 1.5 15.5 1.5 15.5 17.5 10.5 12.5 5.5 17.5\"/></svg>",
      "calendar": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M 2,3 2,17 18,17 18,3 2,3 Z M 17,16 3,16 3,8 17,8 17,16 Z M 17,7 3,7 3,4 17,4 17,7 Z\"/><rect width=\"1\" height=\"3\" x=\"6\" y=\"2\"/><rect width=\"1\" height=\"3\" x=\"13\" y=\"2\"/></svg>",
      "camera": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" cx=\"10\" cy=\"10.8\" r=\"3.8\"/><path fill=\"none\" stroke=\"#000\" d=\"M1,4.5 C0.7,4.5 0.5,4.7 0.5,5 L0.5,17 C0.5,17.3 0.7,17.5 1,17.5 L19,17.5 C19.3,17.5 19.5,17.3 19.5,17 L19.5,5 C19.5,4.7 19.3,4.5 19,4.5 L13.5,4.5 L13.5,2.9 C13.5,2.6 13.3,2.5 13,2.5 L7,2.5 C6.7,2.5 6.5,2.6 6.5,2.9 L6.5,4.5 L1,4.5 L1,4.5 Z\"/></svg>",
      "cart": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"7.3\" cy=\"17.3\" r=\"1.4\"/><circle cx=\"13.3\" cy=\"17.3\" r=\"1.4\"/><polyline fill=\"none\" stroke=\"#000\" points=\"0 2 3.2 4 5.3 12.5 16 12.5 18 6.5 8 6.5\"/></svg>",
      "check": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" points=\"4,10 8,15 17,4\"/></svg>",
      "chevron-double-left": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" stroke-width=\"1.03\" points=\"10 14 6 10 10 6\"/><polyline fill=\"none\" stroke=\"#000\" stroke-width=\"1.03\" points=\"14 14 10 10 14 6\"/></svg>",
      "chevron-double-right": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" stroke-width=\"1.03\" points=\"10 6 14 10 10 14\"/><polyline fill=\"none\" stroke=\"#000\" stroke-width=\"1.03\" points=\"6 6 10 10 6 14\"/></svg>",
      "chevron-down": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" stroke-width=\"1.03\" points=\"16 7 10 13 4 7\"/></svg>",
      "chevron-left": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" stroke-width=\"1.03\" points=\"13 16 7 10 13 4\"/></svg>",
      "chevron-right": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" stroke-width=\"1.03\" points=\"7 4 13 10 7 16\"/></svg>",
      "chevron-up": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" stroke-width=\"1.03\" points=\"4 13 10 7 16 13\"/></svg>",
      "clock": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" cx=\"10\" cy=\"10\" r=\"9\"/><rect x=\"9\" y=\"4\" width=\"1\" height=\"7\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M13.018,14.197 L9.445,10.625\"/></svg>",
      "close": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.06\" d=\"M16,16 L4,4\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.06\" d=\"M16,4 L4,16\"/></svg>",
      "cloud-download": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M6.5,14.61 L3.75,14.61 C1.96,14.61 0.5,13.17 0.5,11.39 C0.5,9.76 1.72,8.41 3.3,8.2 C3.38,5.31 5.75,3 8.68,3 C11.19,3 13.31,4.71 13.89,7.02 C14.39,6.8 14.93,6.68 15.5,6.68 C17.71,6.68 19.5,8.45 19.5,10.64 C19.5,12.83 17.71,14.6 15.5,14.6 L12.5,14.6\"/><polyline fill=\"none\" stroke=\"#000\" points=\"11.75 16 9.5 18.25 7.25 16\"/><path fill=\"none\" stroke=\"#000\" d=\"M9.5,18 L9.5,9.5\"/></svg>",
      "cloud-upload": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M6.5,14.61 L3.75,14.61 C1.96,14.61 0.5,13.17 0.5,11.39 C0.5,9.76 1.72,8.41 3.31,8.2 C3.38,5.31 5.75,3 8.68,3 C11.19,3 13.31,4.71 13.89,7.02 C14.39,6.8 14.93,6.68 15.5,6.68 C17.71,6.68 19.5,8.45 19.5,10.64 C19.5,12.83 17.71,14.6 15.5,14.6 L12.5,14.6\"/><polyline fill=\"none\" stroke=\"#000\" points=\"7.25 11.75 9.5 9.5 11.75 11.75\"/><path fill=\"none\" stroke=\"#000\" d=\"M9.5,18 L9.5,9.5\"/></svg>",
      "code": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" stroke-width=\"1.01\" points=\"13,4 19,10 13,16\"/><polyline fill=\"none\" stroke=\"#000\" stroke-width=\"1.01\" points=\"7,4 1,10 7,16\"/></svg>",
      "cog": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><circle fill=\"none\" stroke=\"#000\" cx=\"9.997\" cy=\"10\" r=\"3.31\"/><path fill=\"none\" stroke=\"#000\" d=\"M18.488,12.285 L16.205,16.237 C15.322,15.496 14.185,15.281 13.303,15.791 C12.428,16.289 12.047,17.373 12.246,18.5 L7.735,18.5 C7.938,17.374 7.553,16.299 6.684,15.791 C5.801,15.27 4.655,15.492 3.773,16.237 L1.5,12.285 C2.573,11.871 3.317,10.999 3.317,9.991 C3.305,8.98 2.573,8.121 1.5,7.716 L3.765,3.784 C4.645,4.516 5.794,4.738 6.687,4.232 C7.555,3.722 7.939,2.637 7.735,1.5 L12.263,1.5 C12.072,2.637 12.441,3.71 13.314,4.22 C14.206,4.73 15.343,4.516 16.225,3.794 L18.487,7.714 C17.404,8.117 16.661,8.988 16.67,10.009 C16.672,11.018 17.415,11.88 18.488,12.285 L18.488,12.285 Z\"/></svg>",
      "comment": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M6,18.71 L6,14 L1,14 L1,1 L19,1 L19,14 L10.71,14 L6,18.71 L6,18.71 Z M2,13 L7,13 L7,16.29 L10.29,13 L18,13 L18,2 L2,2 L2,13 L2,13 Z\"/></svg>",
      "commenting": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon fill=\"none\" stroke=\"#000\" points=\"1.5,1.5 18.5,1.5 18.5,13.5 10.5,13.5 6.5,17.5 6.5,13.5 1.5,13.5\"/><circle cx=\"10\" cy=\"8\" r=\"1\"/><circle cx=\"6\" cy=\"8\" r=\"1\"/><circle cx=\"14\" cy=\"8\" r=\"1\"/></svg>",
      "comments": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" points=\"2 0.5 19.5 0.5 19.5 13\"/><path d=\"M5,19.71 L5,15 L0,15 L0,2 L18,2 L18,15 L9.71,15 L5,19.71 L5,19.71 L5,19.71 Z M1,14 L6,14 L6,17.29 L9.29,14 L17,14 L17,3 L1,3 L1,14 L1,14 L1,14 Z\"/></svg>",
      "copy": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect fill=\"none\" stroke=\"#000\" x=\"3.5\" y=\"2.5\" width=\"12\" height=\"16\"/><polyline fill=\"none\" stroke=\"#000\" points=\"5 0.5 17.5 0.5 17.5 17\"/></svg>",
      "credit-card": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect fill=\"none\" stroke=\"#000\" x=\"1.5\" y=\"4.5\" width=\"17\" height=\"12\"/><rect x=\"1\" y=\"7\" width=\"18\" height=\"3\"/></svg>",
      "database": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><ellipse fill=\"none\" stroke=\"#000\" cx=\"10\" cy=\"4.64\" rx=\"7.5\" ry=\"3.14\"/><path fill=\"none\" stroke=\"#000\" d=\"M17.5,8.11 C17.5,9.85 14.14,11.25 10,11.25 C5.86,11.25 2.5,9.84 2.5,8.11\"/><path fill=\"none\" stroke=\"#000\" d=\"M17.5,11.25 C17.5,12.99 14.14,14.39 10,14.39 C5.86,14.39 2.5,12.98 2.5,11.25\"/><path fill=\"none\" stroke=\"#000\" d=\"M17.49,4.64 L17.5,14.36 C17.5,16.1 14.14,17.5 10,17.5 C5.86,17.5 2.5,16.09 2.5,14.36 L2.5,4.64\"/></svg>",
      "desktop": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect x=\"8\" y=\"15\" width=\"1\" height=\"2\"/><rect x=\"11\" y=\"15\" width=\"1\" height=\"2\"/><rect x=\"5\" y=\"16\" width=\"10\" height=\"1\"/><rect fill=\"none\" stroke=\"#000\" x=\"1.5\" y=\"3.5\" width=\"17\" height=\"11\"/></svg>",
      "discord": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\"><path d=\"M16.074,4.361a14.243,14.243,0,0,0-3.61-1.134,10.61,10.61,0,0,0-.463.96,13.219,13.219,0,0,0-4,0,10.138,10.138,0,0,0-.468-.96A14.206,14.206,0,0,0,3.919,4.364,15.146,15.146,0,0,0,1.324,14.5a14.435,14.435,0,0,0,4.428,2.269A10.982,10.982,0,0,0,6.7,15.21a9.294,9.294,0,0,1-1.494-.727c.125-.093.248-.19.366-.289a10.212,10.212,0,0,0,8.854,0c.119.1.242.2.366.289a9.274,9.274,0,0,1-1.5.728,10.8,10.8,0,0,0,.948,1.562,14.419,14.419,0,0,0,4.431-2.27A15.128,15.128,0,0,0,16.074,4.361Zm-8.981,8.1a1.7,1.7,0,0,1-1.573-1.79A1.689,1.689,0,0,1,7.093,8.881a1.679,1.679,0,0,1,1.573,1.791A1.687,1.687,0,0,1,7.093,12.462Zm5.814,0a1.7,1.7,0,0,1-1.573-1.79,1.689,1.689,0,0,1,1.573-1.791,1.679,1.679,0,0,1,1.573,1.791A1.688,1.688,0,0,1,12.907,12.462Z\"/></svg>",
      "download": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" points=\"14,10 9.5,14.5 5,10\"/><rect x=\"3\" y=\"17\" width=\"13\" height=\"1\"/><line fill=\"none\" stroke=\"#000\" x1=\"9.5\" y1=\"13.91\" x2=\"9.5\" y2=\"3\"/></svg>",
      "dribbble": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.4\" d=\"M1.3,8.9c0,0,5,0.1,8.6-1c1.4-0.4,2.6-0.9,4-1.9 c1.4-1.1,2.5-2.5,2.5-2.5\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.4\" d=\"M3.9,16.6c0,0,1.7-2.8,3.5-4.2 c1.8-1.3,4-2,5.7-2.2C16,10,19,10.6,19,10.6\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.4\" d=\"M6.9,1.6c0,0,3.3,4.6,4.2,6.8 c0.4,0.9,1.3,3.1,1.9,5.2c0.6,2,0.9,4.4,0.9,4.4\"/><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.4\" cx=\"10\" cy=\"10\" r=\"9\"/></svg>",
      "etsy": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\"><path d=\"M8,4.26C8,4.07,8,4,8.31,4h4.46c.79,0,1.22.67,1.53,1.91l.25,1h.76c.14-2.82.26-4,.26-4S13.65,3,12.52,3H6.81L3.75,2.92v.84l1,.2c.73.11.9.27,1,1,0,0,.06,2,.06,5.17s-.06,5.14-.06,5.14c0,.59-.23.81-1,.94l-1,.2v.84l3.06-.1h5.11c1.15,0,3.82.1,3.82.1,0-.7.45-3.88.51-4.22h-.73l-.76,1.69a2.25,2.25,0,0,1-2.45,1.47H9.4c-1,0-1.44-.4-1.44-1.24V10.44s2.16,0,2.86.06c.55,0,.85.19,1.06,1l.23,1H13L12.9,9.94,13,7.41h-.85l-.28,1.13c-.16.74-.28.84-1,1-1,.1-2.89.09-2.89.09Z\"/></svg>",
      "expand": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon points=\"13 2 18 2 18 7 17 7 17 3 13 3\"/><polygon points=\"2 13 3 13 3 17 7 17 7 18 2 18\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M11,9 L17,3\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M3,17 L9,11\"/></svg>",
      "facebook": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M11,10h2.6l0.4-3H11V5.3c0-0.9,0.2-1.5,1.5-1.5H14V1.1c-0.3,0-1-0.1-2.1-0.1C9.6,1,8,2.4,8,5v2H5.5v3H8v8h3V10z\"/></svg>",
      "file-edit": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"#000\" d=\"M18.65,1.68 C18.41,1.45 18.109,1.33 17.81,1.33 C17.499,1.33 17.209,1.45 16.98,1.68 L8.92,9.76 L8,12.33 L10.55,11.41 L18.651,3.34 C19.12,2.87 19.12,2.15 18.65,1.68 L18.65,1.68 L18.65,1.68 Z\"/><polyline fill=\"none\" stroke=\"#000\" points=\"16.5 8.482 16.5 18.5 3.5 18.5 3.5 1.5 14.211 1.5\"/></svg>",
      "file-pdf": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect fill=\"none\" stroke=\"#000\" width=\"13\" height=\"17\" x=\"3.5\" y=\"1.5\"/><path d=\"M14.65 11.67c-.48.3-1.37-.19-1.79-.37a4.65 4.65 0 0 1 1.49.06c.35.1.36.28.3.31zm-6.3.06l.43-.79a14.7 14.7 0 0 0 .75-1.64 5.48 5.48 0 0 0 1.25 1.55l.2.15a16.36 16.36 0 0 0-2.63.73zM9.5 5.32c.2 0 .32.5.32.97a1.99 1.99 0 0 1-.23 1.04 5.05 5.05 0 0 1-.17-1.3s0-.71.08-.71zm-3.9 9a4.35 4.35 0 0 1 1.21-1.46l.24-.22a4.35 4.35 0 0 1-1.46 1.68zm9.23-3.3a2.05 2.05 0 0 0-1.32-.3 11.07 11.07 0 0 0-1.58.11 4.09 4.09 0 0 1-.74-.5 5.39 5.39 0 0 1-1.32-2.06 10.37 10.37 0 0 0 .28-2.62 1.83 1.83 0 0 0-.07-.25.57.57 0 0 0-.52-.4H9.4a.59.59 0 0 0-.6.38 6.95 6.95 0 0 0 .37 3.14c-.26.63-1 2.12-1 2.12-.3.58-.57 1.08-.82 1.5l-.8.44A3.11 3.11 0 0 0 5 14.16a.39.39 0 0 0 .15.42l.24.13c1.15.56 2.28-1.74 2.66-2.42a23.1 23.1 0 0 1 3.59-.85 4.56 4.56 0 0 0 2.91.8.5.5 0 0 0 .3-.21 1.1 1.1 0 0 0 .12-.75.84.84 0 0 0-.14-.25z\"/></svg>",
      "file-text": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect fill=\"none\" stroke=\"#000\" width=\"13\" height=\"17\" x=\"3.5\" y=\"1.5\"/><line fill=\"none\" stroke=\"#000\" x1=\"6\" x2=\"12\" y1=\"12.5\" y2=\"12.5\"/><line fill=\"none\" stroke=\"#000\" x1=\"6\" x2=\"14\" y1=\"8.5\" y2=\"8.5\"/><line fill=\"none\" stroke=\"#000\" x1=\"6\" x2=\"14\" y1=\"6.5\" y2=\"6.5\"/><line fill=\"none\" stroke=\"#000\" x1=\"6\" x2=\"14\" y1=\"10.5\" y2=\"10.5\"/></svg>",
      "file": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect fill=\"none\" stroke=\"#000\" x=\"3.5\" y=\"1.5\" width=\"13\" height=\"17\"/></svg>",
      "flickr": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"5.5\" cy=\"9.5\" r=\"3.5\"/><circle cx=\"14.5\" cy=\"9.5\" r=\"3.5\"/></svg>",
      "folder": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon fill=\"none\" stroke=\"#000\" points=\"9.5 5.5 8.5 3.5 1.5 3.5 1.5 16.5 18.5 16.5 18.5 5.5\"/></svg>",
      "forward": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M2.47,13.11 C4.02,10.02 6.27,7.85 9.04,6.61 C9.48,6.41 10.27,6.13 11,5.91 L11,2 L18.89,9 L11,16 L11,12.13 C9.25,12.47 7.58,13.19 6.02,14.25 C3.03,16.28 1.63,18.54 1.63,18.54 C1.63,18.54 1.38,15.28 2.47,13.11 L2.47,13.11 Z M5.3,13.53 C6.92,12.4 9.04,11.4 12,10.92 L12,13.63 L17.36,9 L12,4.25 L12,6.8 C11.71,6.86 10.86,7.02 9.67,7.49 C6.79,8.65 4.58,10.96 3.49,13.08 C3.18,13.7 2.68,14.87 2.49,16 C3.28,15.05 4.4,14.15 5.3,13.53 L5.3,13.53 Z\"/></svg>",
      "foursquare": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M15.23,2 C15.96,2 16.4,2.41 16.5,2.86 C16.57,3.15 16.56,3.44 16.51,3.73 C16.46,4.04 14.86,11.72 14.75,12.03 C14.56,12.56 14.16,12.82 13.61,12.83 C13.03,12.84 11.09,12.51 10.69,13 C10.38,13.38 7.79,16.39 6.81,17.53 C6.61,17.76 6.4,17.96 6.08,17.99 C5.68,18.04 5.29,17.87 5.17,17.45 C5.12,17.28 5.1,17.09 5.1,16.91 C5.1,12.4 4.86,7.81 5.11,3.31 C5.17,2.5 5.81,2.12 6.53,2 L15.23,2 L15.23,2 Z M9.76,11.42 C9.94,11.19 10.17,11.1 10.45,11.1 L12.86,11.1 C13.12,11.1 13.31,10.94 13.36,10.69 C13.37,10.64 13.62,9.41 13.74,8.83 C13.81,8.52 13.53,8.28 13.27,8.28 C12.35,8.29 11.42,8.28 10.5,8.28 C9.84,8.28 9.83,7.69 9.82,7.21 C9.8,6.85 10.13,6.55 10.5,6.55 C11.59,6.56 12.67,6.55 13.76,6.55 C14.03,6.55 14.23,6.4 14.28,6.14 C14.34,5.87 14.67,4.29 14.67,4.29 C14.67,4.29 14.82,3.74 14.19,3.74 L7.34,3.74 C7,3.75 6.84,4.02 6.84,4.33 C6.84,7.58 6.85,14.95 6.85,14.99 C6.87,15 8.89,12.51 9.76,11.42 L9.76,11.42 Z\"/></svg>",
      "future": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"19 2 18 2 18 6 14 6 14 7 19 7 19 2\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M18,6.548 C16.709,3.29 13.354,1 9.6,1 C4.6,1 0.6,5 0.6,10 C0.6,15 4.6,19 9.6,19 C14.6,19 18.6,15 18.6,10\"/><rect x=\"9\" y=\"4\" width=\"1\" height=\"7\"/><path d=\"M13.018,14.197 L9.445,10.625\" fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\"/></svg>",
      "git-branch": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.2\" cx=\"7\" cy=\"3\" r=\"2\"/><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.2\" cx=\"14\" cy=\"6\" r=\"2\"/><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.2\" cx=\"7\" cy=\"17\" r=\"2\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"2\" d=\"M14,8 C14,10.41 12.43,10.87 10.56,11.25 C9.09,11.54 7,12.06 7,15 L7,5\"/></svg>",
      "git-fork": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.2\" cx=\"5.79\" cy=\"2.79\" r=\"1.79\"/><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.2\" cx=\"14.19\" cy=\"2.79\" r=\"1.79\"/><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.2\" cx=\"10.03\" cy=\"16.79\" r=\"1.79\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"2\" d=\"M5.79,4.57 L5.79,6.56 C5.79,9.19 10.03,10.22 10.03,13.31 C10.03,14.86 10.04,14.55 10.04,14.55 C10.04,14.37 10.04,14.86 10.04,13.31 C10.04,10.22 14.2,9.19 14.2,6.56 L14.2,4.57\"/></svg>",
      "github-alt": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10,0.5 C4.75,0.5 0.5,4.76 0.5,10.01 C0.5,15.26 4.75,19.51 10,19.51 C15.24,19.51 19.5,15.26 19.5,10.01 C19.5,4.76 15.25,0.5 10,0.5 L10,0.5 Z M12.81,17.69 C12.81,17.69 12.81,17.7 12.79,17.69 C12.47,17.75 12.35,17.59 12.35,17.36 L12.35,16.17 C12.35,15.45 12.09,14.92 11.58,14.56 C12.2,14.51 12.77,14.39 13.26,14.21 C13.87,13.98 14.36,13.69 14.74,13.29 C15.42,12.59 15.76,11.55 15.76,10.17 C15.76,9.25 15.45,8.46 14.83,7.8 C15.1,7.08 15.07,6.29 14.75,5.44 L14.51,5.42 C14.34,5.4 14.06,5.46 13.67,5.61 C13.25,5.78 12.79,6.03 12.31,6.35 C11.55,6.16 10.81,6.05 10.09,6.05 C9.36,6.05 8.61,6.15 7.88,6.35 C7.28,5.96 6.75,5.68 6.26,5.54 C6.07,5.47 5.9,5.44 5.78,5.44 L5.42,5.44 C5.06,6.29 5.04,7.08 5.32,7.8 C4.7,8.46 4.4,9.25 4.4,10.17 C4.4,11.94 4.96,13.16 6.08,13.84 C6.53,14.13 7.05,14.32 7.69,14.43 C8.03,14.5 8.32,14.54 8.55,14.55 C8.07,14.89 7.82,15.42 7.82,16.16 L7.82,17.51 C7.8,17.69 7.7,17.8 7.51,17.8 C4.21,16.74 1.82,13.65 1.82,10.01 C1.82,5.5 5.49,1.83 10,1.83 C14.5,1.83 18.17,5.5 18.17,10.01 C18.18,13.53 15.94,16.54 12.81,17.69 L12.81,17.69 Z\"/></svg>",
      "github": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10,1 C5.03,1 1,5.03 1,10 C1,13.98 3.58,17.35 7.16,18.54 C7.61,18.62 7.77,18.34 7.77,18.11 C7.77,17.9 7.76,17.33 7.76,16.58 C5.26,17.12 4.73,15.37 4.73,15.37 C4.32,14.33 3.73,14.05 3.73,14.05 C2.91,13.5 3.79,13.5 3.79,13.5 C4.69,13.56 5.17,14.43 5.17,14.43 C5.97,15.8 7.28,15.41 7.79,15.18 C7.87,14.6 8.1,14.2 8.36,13.98 C6.36,13.75 4.26,12.98 4.26,9.53 C4.26,8.55 4.61,7.74 5.19,7.11 C5.1,6.88 4.79,5.97 5.28,4.73 C5.28,4.73 6.04,4.49 7.75,5.65 C8.47,5.45 9.24,5.35 10,5.35 C10.76,5.35 11.53,5.45 12.25,5.65 C13.97,4.48 14.72,4.73 14.72,4.73 C15.21,5.97 14.9,6.88 14.81,7.11 C15.39,7.74 15.73,8.54 15.73,9.53 C15.73,12.99 13.63,13.75 11.62,13.97 C11.94,14.25 12.23,14.8 12.23,15.64 C12.23,16.84 12.22,17.81 12.22,18.11 C12.22,18.35 12.38,18.63 12.84,18.54 C16.42,17.35 19,13.98 19,10 C19,5.03 14.97,1 10,1 L10,1 Z\"/></svg>",
      "gitter": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect x=\"3.5\" y=\"1\" width=\"1.531\" height=\"11.471\"/><rect x=\"7.324\" y=\"4.059\" width=\"1.529\" height=\"15.294\"/><rect x=\"11.148\" y=\"4.059\" width=\"1.527\" height=\"15.294\"/><rect x=\"14.971\" y=\"4.059\" width=\"1.529\" height=\"8.412\"/></svg>",
      "google": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M17.86,9.09 C18.46,12.12 17.14,16.05 13.81,17.56 C9.45,19.53 4.13,17.68 2.47,12.87 C0.68,7.68 4.22,2.42 9.5,2.03 C11.57,1.88 13.42,2.37 15.05,3.65 C15.22,3.78 15.37,3.93 15.61,4.14 C14.9,4.81 14.23,5.45 13.5,6.14 C12.27,5.08 10.84,4.72 9.28,4.98 C8.12,5.17 7.16,5.76 6.37,6.63 C4.88,8.27 4.62,10.86 5.76,12.82 C6.95,14.87 9.17,15.8 11.57,15.25 C13.27,14.87 14.76,13.33 14.89,11.75 L10.51,11.75 L10.51,9.09 L17.86,9.09 L17.86,9.09 Z\"/></svg>",
      "grid": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect x=\"2\" y=\"2\" width=\"3\" height=\"3\"/><rect x=\"8\" y=\"2\" width=\"3\" height=\"3\"/><rect x=\"14\" y=\"2\" width=\"3\" height=\"3\"/><rect x=\"2\" y=\"8\" width=\"3\" height=\"3\"/><rect x=\"8\" y=\"8\" width=\"3\" height=\"3\"/><rect x=\"14\" y=\"8\" width=\"3\" height=\"3\"/><rect x=\"2\" y=\"14\" width=\"3\" height=\"3\"/><rect x=\"8\" y=\"14\" width=\"3\" height=\"3\"/><rect x=\"14\" y=\"14\" width=\"3\" height=\"3\"/></svg>",
      "happy": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"13\" cy=\"7\" r=\"1\"/><circle cx=\"7\" cy=\"7\" r=\"1\"/><circle fill=\"none\" stroke=\"#000\" cx=\"10\" cy=\"10\" r=\"8.5\"/><path fill=\"none\" stroke=\"#000\" d=\"M14.6,11.4 C13.9,13.3 12.1,14.5 10,14.5 C7.9,14.5 6.1,13.3 5.4,11.4\"/></svg>",
      "hashtag": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M15.431,8 L15.661,7 L12.911,7 L13.831,3 L12.901,3 L11.98,7 L9.29,7 L10.21,3 L9.281,3 L8.361,7 L5.23,7 L5,8 L8.13,8 L7.21,12 L4.23,12 L4,13 L6.98,13 L6.061,17 L6.991,17 L7.911,13 L10.601,13 L9.681,17 L10.611,17 L11.531,13 L14.431,13 L14.661,12 L11.76,12 L12.681,8 L15.431,8 Z M10.831,12 L8.141,12 L9.061,8 L11.75,8 L10.831,12 Z\"/></svg>",
      "heart": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.03\" d=\"M10,4 C10,4 8.1,2 5.74,2 C3.38,2 1,3.55 1,6.73 C1,8.84 2.67,10.44 2.67,10.44 L10,18 L17.33,10.44 C17.33,10.44 19,8.84 19,6.73 C19,3.55 16.62,2 14.26,2 C11.9,2 10,4 10,4 L10,4 Z\"/></svg>",
      "history": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"#000\" points=\"1 2 2 2 2 6 6 6 6 7 1 7 1 2\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M2.1,6.548 C3.391,3.29 6.746,1 10.5,1 C15.5,1 19.5,5 19.5,10 C19.5,15 15.5,19 10.5,19 C5.5,19 1.5,15 1.5,10\"/><rect x=\"9\" y=\"4\" width=\"1\" height=\"7\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M13.018,14.197 L9.445,10.625\"/></svg>",
      "home": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon points=\"18.65 11.35 10 2.71 1.35 11.35 0.65 10.65 10 1.29 19.35 10.65\"/><polygon points=\"15 4 18 4 18 7 17 7 17 5 15 5\"/><polygon points=\"3 11 4 11 4 18 7 18 7 12 12 12 12 18 16 18 16 11 17 11 17 19 11 19 11 13 8 13 8 19 3 19\"/></svg>",
      "image": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"16.1\" cy=\"6.1\" r=\"1.1\"/><rect fill=\"none\" stroke=\"#000\" x=\".5\" y=\"2.5\" width=\"19\" height=\"15\"/><polyline fill=\"none\" stroke=\"#000\" stroke-width=\"1.01\" points=\"4,13 8,9 13,14\"/><polyline fill=\"none\" stroke=\"#000\" stroke-width=\"1.01\" points=\"11,12 12.5,10.5 16,14\"/></svg>",
      "info": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M12.13,11.59 C11.97,12.84 10.35,14.12 9.1,14.16 C6.17,14.2 9.89,9.46 8.74,8.37 C9.3,8.16 10.62,7.83 10.62,8.81 C10.62,9.63 10.12,10.55 9.88,11.32 C8.66,15.16 12.13,11.15 12.14,11.18 C12.16,11.21 12.16,11.35 12.13,11.59 C12.08,11.95 12.16,11.35 12.13,11.59 L12.13,11.59 Z M11.56,5.67 C11.56,6.67 9.36,7.15 9.36,6.03 C9.36,5 11.56,4.54 11.56,5.67 L11.56,5.67 Z\"/><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" cx=\"10\" cy=\"10\" r=\"9\"/></svg>",
      "instagram": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M13.55,1H6.46C3.45,1,1,3.44,1,6.44v7.12c0,3,2.45,5.44,5.46,5.44h7.08c3.02,0,5.46-2.44,5.46-5.44V6.44 C19.01,3.44,16.56,1,13.55,1z M17.5,14c0,1.93-1.57,3.5-3.5,3.5H6c-1.93,0-3.5-1.57-3.5-3.5V6c0-1.93,1.57-3.5,3.5-3.5h8 c1.93,0,3.5,1.57,3.5,3.5V14z\"/><circle cx=\"14.87\" cy=\"5.26\" r=\"1.09\"/><path d=\"M10.03,5.45c-2.55,0-4.63,2.06-4.63,4.6c0,2.55,2.07,4.61,4.63,4.61c2.56,0,4.63-2.061,4.63-4.61 C14.65,7.51,12.58,5.45,10.03,5.45L10.03,5.45L10.03,5.45z M10.08,13c-1.66,0-3-1.34-3-2.99c0-1.65,1.34-2.99,3-2.99s3,1.34,3,2.99 C13.08,11.66,11.74,13,10.08,13L10.08,13L10.08,13z\"/></svg>",
      "italic": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M12.63,5.48 L10.15,14.52 C10,15.08 10.37,15.25 11.92,15.3 L11.72,16 L6,16 L6.2,15.31 C7.78,15.26 8.19,15.09 8.34,14.53 L10.82,5.49 C10.97,4.92 10.63,4.76 9.09,4.71 L9.28,4 L15,4 L14.81,4.69 C13.23,4.75 12.78,4.91 12.63,5.48 L12.63,5.48 Z\"/></svg>",
      "joomla": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M7.8,13.4l1.7-1.7L5.9,8c-0.6-0.5-0.6-1.5,0-2c0.6-0.6,1.4-0.6,2,0l1.7-1.7c-1-1-2.3-1.3-3.6-1C5.8,2.2,4.8,1.4,3.7,1.4 c-1.3,0-2.3,1-2.3,2.3c0,1.1,0.8,2,1.8,2.3c-0.4,1.3-0.1,2.8,1,3.8L7.8,13.4L7.8,13.4z\"/><path d=\"M10.2,4.3c1-1,2.5-1.4,3.8-1c0.2-1.1,1.1-2,2.3-2c1.3,0,2.3,1,2.3,2.3c0,1.2-0.9,2.2-2,2.3c0.4,1.3,0,2.8-1,3.8L13.9,8 c0.6-0.5,0.6-1.5,0-2c-0.5-0.6-1.5-0.6-2,0L8.2,9.7L6.5,8\"/><path d=\"M14.1,16.8c-1.3,0.4-2.8,0.1-3.8-1l1.7-1.7c0.6,0.6,1.5,0.6,2,0c0.5-0.6,0.6-1.5,0-2l-3.7-3.7L12,6.7l3.7,3.7 c1,1,1.3,2.4,1,3.6c1.1,0.2,2,1.1,2,2.3c0,1.3-1,2.3-2.3,2.3C15.2,18.6,14.3,17.8,14.1,16.8\"/><path d=\"M13.2,12.2l-3.7,3.7c-1,1-2.4,1.3-3.6,1c-0.2,1-1.2,1.8-2.2,1.8c-1.3,0-2.3-1-2.3-2.3c0-1.1,0.8-2,1.8-2.3 c-0.3-1.3,0-2.7,1-3.7l1.7,1.7c-0.6,0.6-0.6,1.5,0,2c0.6,0.6,1.4,0.6,2,0l3.7-3.7\"/></svg>",
      "laptop": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect y=\"16\" width=\"20\" height=\"1\"/><rect fill=\"none\" stroke=\"#000\" x=\"2.5\" y=\"4.5\" width=\"15\" height=\"10\"/></svg>",
      "lifesaver": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10,0.5 C4.76,0.5 0.5,4.76 0.5,10 C0.5,15.24 4.76,19.5 10,19.5 C15.24,19.5 19.5,15.24 19.5,10 C19.5,4.76 15.24,0.5 10,0.5 L10,0.5 Z M10,1.5 C11.49,1.5 12.89,1.88 14.11,2.56 L11.85,4.82 C11.27,4.61 10.65,4.5 10,4.5 C9.21,4.5 8.47,4.67 7.79,4.96 L5.58,2.75 C6.87,1.95 8.38,1.5 10,1.5 L10,1.5 Z M4.96,7.8 C4.67,8.48 4.5,9.21 4.5,10 C4.5,10.65 4.61,11.27 4.83,11.85 L2.56,14.11 C1.88,12.89 1.5,11.49 1.5,10 C1.5,8.38 1.95,6.87 2.75,5.58 L4.96,7.79 L4.96,7.8 L4.96,7.8 Z M10,18.5 C8.25,18.5 6.62,17.97 5.27,17.06 L7.46,14.87 C8.22,15.27 9.08,15.5 10,15.5 C10.79,15.5 11.53,15.33 12.21,15.04 L14.42,17.25 C13.13,18.05 11.62,18.5 10,18.5 L10,18.5 Z M10,14.5 C7.52,14.5 5.5,12.48 5.5,10 C5.5,7.52 7.52,5.5 10,5.5 C12.48,5.5 14.5,7.52 14.5,10 C14.5,12.48 12.48,14.5 10,14.5 L10,14.5 Z M15.04,12.21 C15.33,11.53 15.5,10.79 15.5,10 C15.5,9.08 15.27,8.22 14.87,7.46 L17.06,5.27 C17.97,6.62 18.5,8.25 18.5,10 C18.5,11.62 18.05,13.13 17.25,14.42 L15.04,12.21 L15.04,12.21 Z\"/></svg>",
      "link": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M10.625,12.375 L7.525,15.475 C6.825,16.175 5.925,16.175 5.225,15.475 L4.525,14.775 C3.825,14.074 3.825,13.175 4.525,12.475 L7.625,9.375\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M9.325,7.375 L12.425,4.275 C13.125,3.575 14.025,3.575 14.724,4.275 L15.425,4.975 C16.125,5.675 16.125,6.575 15.425,7.275 L12.325,10.375\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M7.925,11.875 L11.925,7.975\"/></svg>",
      "linkedin": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M5.77,17.89 L5.77,7.17 L2.21,7.17 L2.21,17.89 L5.77,17.89 L5.77,17.89 Z M3.99,5.71 C5.23,5.71 6.01,4.89 6.01,3.86 C5.99,2.8 5.24,2 4.02,2 C2.8,2 2,2.8 2,3.85 C2,4.88 2.77,5.7 3.97,5.7 L3.99,5.7 L3.99,5.71 L3.99,5.71 Z\"/><path d=\"M7.75,17.89 L11.31,17.89 L11.31,11.9 C11.31,11.58 11.33,11.26 11.43,11.03 C11.69,10.39 12.27,9.73 13.26,9.73 C14.55,9.73 15.06,10.71 15.06,12.15 L15.06,17.89 L18.62,17.89 L18.62,11.74 C18.62,8.45 16.86,6.92 14.52,6.92 C12.6,6.92 11.75,7.99 11.28,8.73 L11.3,8.73 L11.3,7.17 L7.75,7.17 C7.79,8.17 7.75,17.89 7.75,17.89 L7.75,17.89 L7.75,17.89 Z\"/></svg>",
      "list": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect x=\"6\" y=\"4\" width=\"12\" height=\"1\"/><rect x=\"6\" y=\"9\" width=\"12\" height=\"1\"/><rect x=\"6\" y=\"14\" width=\"12\" height=\"1\"/><rect x=\"2\" y=\"4\" width=\"2\" height=\"1\"/><rect x=\"2\" y=\"9\" width=\"2\" height=\"1\"/><rect x=\"2\" y=\"14\" width=\"2\" height=\"1\"/></svg>",
      "location": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.01\" d=\"M10,0.5 C6.41,0.5 3.5,3.39 3.5,6.98 C3.5,11.83 10,19 10,19 C10,19 16.5,11.83 16.5,6.98 C16.5,3.39 13.59,0.5 10,0.5 L10,0.5 Z\"/><circle fill=\"none\" stroke=\"#000\" cx=\"10\" cy=\"6.8\" r=\"2.3\"/></svg>",
      "lock": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect fill=\"none\" stroke=\"#000\" height=\"10\" width=\"13\" y=\"8.5\" x=\"3.5\"/><path fill=\"none\" stroke=\"#000\" d=\"M6.5,8 L6.5,4.88 C6.5,3.01 8.07,1.5 10,1.5 C11.93,1.5 13.5,3.01 13.5,4.88 L13.5,8\"/></svg>",
      "mail": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" points=\"1.4,6.5 10,11 18.6,6.5\"/><path d=\"M 1,4 1,16 19,16 19,4 1,4 Z M 18,15 2,15 2,5 18,5 18,15 Z\"/></svg>",
      "menu": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect x=\"2\" y=\"4\" width=\"16\" height=\"1\"/><rect x=\"2\" y=\"9\" width=\"16\" height=\"1\"/><rect x=\"2\" y=\"14\" width=\"16\" height=\"1\"/></svg>",
      "microphone": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><line fill=\"none\" stroke=\"#000\" x1=\"10\" x2=\"10\" y1=\"16.44\" y2=\"18.5\"/><line fill=\"none\" stroke=\"#000\" x1=\"7\" x2=\"13\" y1=\"18.5\" y2=\"18.5\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M13.5 4.89v5.87a3.5 3.5 0 0 1-7 0V4.89a3.5 3.5 0 0 1 7 0z\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M15.5 10.36V11a5.5 5.5 0 0 1-11 0v-.6\"/></svg>",
      "minus-circle": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" cx=\"9.5\" cy=\"9.5\" r=\"9\"/><line fill=\"none\" stroke=\"#000\" x1=\"5\" y1=\"9.5\" x2=\"14\" y2=\"9.5\"/></svg>",
      "minus": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"1\" width=\"18\" y=\"9\" x=\"1\"/></svg>",
      "more-vertical": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"10\" cy=\"3\" r=\"2\"/><circle cx=\"10\" cy=\"10\" r=\"2\"/><circle cx=\"10\" cy=\"17\" r=\"2\"/></svg>",
      "more": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"3\" cy=\"10\" r=\"2\"/><circle cx=\"10\" cy=\"10\" r=\"2\"/><circle cx=\"17\" cy=\"10\" r=\"2\"/></svg>",
      "move": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon points=\"4,5 1,5 1,9 2,9 2,6 4,6\"/><polygon points=\"1,16 2,16 2,18 4,18 4,19 1,19\"/><polygon points=\"14,16 14,19 11,19 11,18 13,18 13,16\"/><rect fill=\"none\" stroke=\"#000\" x=\"5.5\" y=\"1.5\" width=\"13\" height=\"13\"/><rect x=\"1\" y=\"11\" width=\"1\" height=\"3\"/><rect x=\"6\" y=\"18\" width=\"3\" height=\"1\"/></svg>",
      "nut": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon fill=\"none\" stroke=\"#000\" points=\"2.5,5.7 10,1.3 17.5,5.7 17.5,14.3 10,18.7 2.5,14.3\"/><circle fill=\"none\" stroke=\"#000\" cx=\"10\" cy=\"10\" r=\"3.5\"/></svg>",
      "pagekit": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon points=\"3,1 17,1 17,16 10,16 10,13 14,13 14,4 6,4 6,16 10,16 10,19 3,19\"/></svg>",
      "paint-bucket": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10.21,1 L0,11.21 L8.1,19.31 L18.31,9.1 L10.21,1 L10.21,1 Z M16.89,9.1 L15,11 L1.7,11 L10.21,2.42 L16.89,9.1 Z\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M6.42,2.33 L11.7,7.61\"/><path d=\"M18.49,12 C18.49,12 20,14.06 20,15.36 C20,16.28 19.24,17 18.49,17 L18.49,17 C17.74,17 17,16.28 17,15.36 C17,14.06 18.49,12 18.49,12 L18.49,12 Z\"/></svg>",
      "pencil": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"#000\" d=\"M17.25,6.01 L7.12,16.1 L3.82,17.2 L5.02,13.9 L15.12,3.88 C15.71,3.29 16.66,3.29 17.25,3.88 C17.83,4.47 17.83,5.42 17.25,6.01 L17.25,6.01 Z\"/><path fill=\"none\" stroke=\"#000\" d=\"M15.98,7.268 L13.851,5.148\"/></svg>",
      "phone-landscape": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"#000\" d=\"M17,5.5 C17.8,5.5 18.5,6.2 18.5,7 L18.5,14 C18.5,14.8 17.8,15.5 17,15.5 L3,15.5 C2.2,15.5 1.5,14.8 1.5,14 L1.5,7 C1.5,6.2 2.2,5.5 3,5.5 L17,5.5 L17,5.5 L17,5.5 Z\"/><circle cx=\"3.8\" cy=\"10.5\" r=\".8\"/></svg>",
      "phone": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"#000\" d=\"M15.5,17 C15.5,17.8 14.8,18.5 14,18.5 L7,18.5 C6.2,18.5 5.5,17.8 5.5,17 L5.5,3 C5.5,2.2 6.2,1.5 7,1.5 L14,1.5 C14.8,1.5 15.5,2.2 15.5,3 L15.5,17 L15.5,17 L15.5,17 Z\"/><circle cx=\"10.5\" cy=\"16.5\" r=\".8\"/></svg>",
      "pinterest": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10.21,1 C5.5,1 3,4.16 3,7.61 C3,9.21 3.85,11.2 5.22,11.84 C5.43,11.94 5.54,11.89 5.58,11.69 C5.62,11.54 5.8,10.8 5.88,10.45 C5.91,10.34 5.89,10.24 5.8,10.14 C5.36,9.59 5,8.58 5,7.65 C5,5.24 6.82,2.91 9.93,2.91 C12.61,2.91 14.49,4.74 14.49,7.35 C14.49,10.3 13,12.35 11.06,12.35 C9.99,12.35 9.19,11.47 9.44,10.38 C9.75,9.08 10.35,7.68 10.35,6.75 C10.35,5.91 9.9,5.21 8.97,5.21 C7.87,5.21 6.99,6.34 6.99,7.86 C6.99,8.83 7.32,9.48 7.32,9.48 C7.32,9.48 6.24,14.06 6.04,14.91 C5.7,16.35 6.08,18.7 6.12,18.9 C6.14,19.01 6.26,19.05 6.33,18.95 C6.44,18.81 7.74,16.85 8.11,15.44 C8.24,14.93 8.79,12.84 8.79,12.84 C9.15,13.52 10.19,14.09 11.29,14.09 C14.58,14.09 16.96,11.06 16.96,7.3 C16.94,3.7 14,1 10.21,1\"/></svg>",
      "play-circle": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" points=\"8.5 7 13.5 10 8.5 13\"/><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" cx=\"10\" cy=\"10\" r=\"9\"/></svg>",
      "play": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon fill=\"none\" stroke=\"#000\" points=\"6.5,5 14.5,10 6.5,15\"/></svg>",
      "plus-circle": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" cx=\"9.5\" cy=\"9.5\" r=\"9\"/><line fill=\"none\" stroke=\"#000\" x1=\"9.5\" y1=\"5\" x2=\"9.5\" y2=\"14\"/><line fill=\"none\" stroke=\"#000\" x1=\"5\" y1=\"9.5\" x2=\"14\" y2=\"9.5\"/></svg>",
      "plus": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect x=\"9\" y=\"1\" width=\"1\" height=\"17\"/><rect x=\"1\" y=\"9\" width=\"17\" height=\"1\"/></svg>",
      "print": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" points=\"4.5 13.5 1.5 13.5 1.5 6.5 18.5 6.5 18.5 13.5 15.5 13.5\"/><polyline fill=\"none\" stroke=\"#000\" points=\"15.5 6.5 15.5 2.5 4.5 2.5 4.5 6.5\"/><rect fill=\"none\" stroke=\"#000\" width=\"11\" height=\"6\" x=\"4.5\" y=\"11.5\"/><rect width=\"8\" height=\"1\" x=\"6\" y=\"13\"/><rect width=\"8\" height=\"1\" x=\"6\" y=\"15\"/></svg>",
      "pull": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon points=\"6.85,8 9.5,10.6 12.15,8 12.85,8.7 9.5,12 6.15,8.7\"/><line fill=\"none\" stroke=\"#000\" x1=\"9.5\" y1=\"11\" x2=\"9.5\" y2=\"2\"/><polyline fill=\"none\" stroke=\"#000\" points=\"6,5.5 3.5,5.5 3.5,18.5 15.5,18.5 15.5,5.5 13,5.5\"/></svg>",
      "push": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon points=\"12.15,4 9.5,1.4 6.85,4 6.15,3.3 9.5,0 12.85,3.3\"/><line fill=\"none\" stroke=\"#000\" x1=\"9.5\" y1=\"10\" x2=\"9.5\" y2=\"1\"/><polyline fill=\"none\" stroke=\"#000\" points=\"6 5.5 3.5 5.5 3.5 18.5 15.5 18.5 15.5 5.5 13 5.5\"/></svg>",
      "question": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" cx=\"10\" cy=\"10\" r=\"9\"/><circle cx=\"10.44\" cy=\"14.42\" r=\"1.05\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.2\" d=\"M8.17,7.79 C8.17,4.75 12.72,4.73 12.72,7.72 C12.72,8.67 11.81,9.15 11.23,9.75 C10.75,10.24 10.51,10.73 10.45,11.4 C10.44,11.53 10.43,11.64 10.43,11.75\"/></svg>",
      "quote-right": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M17.27,7.79 C17.27,9.45 16.97,10.43 15.99,12.02 C14.98,13.64 13,15.23 11.56,15.97 L11.1,15.08 C12.34,14.2 13.14,13.51 14.02,11.82 C14.27,11.34 14.41,10.92 14.49,10.54 C14.3,10.58 14.09,10.6 13.88,10.6 C12.06,10.6 10.59,9.12 10.59,7.3 C10.59,5.48 12.06,4 13.88,4 C15.39,4 16.67,5.02 17.05,6.42 C17.19,6.82 17.27,7.27 17.27,7.79 L17.27,7.79 Z\"/><path d=\"M8.68,7.79 C8.68,9.45 8.38,10.43 7.4,12.02 C6.39,13.64 4.41,15.23 2.97,15.97 L2.51,15.08 C3.75,14.2 4.55,13.51 5.43,11.82 C5.68,11.34 5.82,10.92 5.9,10.54 C5.71,10.58 5.5,10.6 5.29,10.6 C3.47,10.6 2,9.12 2,7.3 C2,5.48 3.47,4 5.29,4 C6.8,4 8.08,5.02 8.46,6.42 C8.6,6.82 8.68,7.27 8.68,7.79 L8.68,7.79 Z\"/></svg>",
      "receiver": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.01\" d=\"M6.189,13.611C8.134,15.525 11.097,18.239 13.867,18.257C16.47,18.275 18.2,16.241 18.2,16.241L14.509,12.551L11.539,13.639L6.189,8.29L7.313,5.355L3.76,1.8C3.76,1.8 1.732,3.537 1.7,6.092C1.667,8.809 4.347,11.738 6.189,13.611\"/></svg>",
      "reddit": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M19 9.05a2.56 2.56 0 0 0-2.56-2.56 2.59 2.59 0 0 0-1.88.82 10.63 10.63 0 0 0-4.14-1v-.08c.58-1.62 1.58-3.89 2.7-4.1.38-.08.77.12 1.19.57a1.15 1.15 0 0 0-.06.37 1.48 1.48 0 1 0 1.51-1.45 1.43 1.43 0 0 0-.76.19A2.29 2.29 0 0 0 12.91 1c-2.11.43-3.39 4.38-3.63 5.19 0 0 0 .11-.06.11a10.65 10.65 0 0 0-3.75 1A2.56 2.56 0 0 0 1 9.05a2.42 2.42 0 0 0 .72 1.76A5.18 5.18 0 0 0 1.24 13c0 3.66 3.92 6.64 8.73 6.64s8.74-3 8.74-6.64a5.23 5.23 0 0 0-.46-2.13A2.58 2.58 0 0 0 19 9.05zm-16.88 0a1.44 1.44 0 0 1 2.27-1.19 7.68 7.68 0 0 0-2.07 1.91 1.33 1.33 0 0 1-.2-.72zM10 18.4c-4.17 0-7.55-2.4-7.55-5.4S5.83 7.53 10 7.53 17.5 10 17.5 13s-3.38 5.4-7.5 5.4zm7.69-8.61a7.62 7.62 0 0 0-2.09-1.91 1.41 1.41 0 0 1 .84-.28 1.47 1.47 0 0 1 1.44 1.45 1.34 1.34 0 0 1-.21.72z\"/><path d=\"M6.69 12.58a1.39 1.39 0 1 1 1.39-1.39 1.38 1.38 0 0 1-1.38 1.39z\"/><path d=\"M14.26 11.2a1.39 1.39 0 1 1-1.39-1.39 1.39 1.39 0 0 1 1.39 1.39z\"/><path d=\"M13.09 14.88a.54.54 0 0 1-.09.77 5.3 5.3 0 0 1-3.26 1.19 5.61 5.61 0 0 1-3.4-1.22.55.55 0 1 1 .73-.83 4.09 4.09 0 0 0 5.25 0 .56.56 0 0 1 .77.09z\"/></svg>",
      "refresh": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M17.08,11.15 C17.09,11.31 17.1,11.47 17.1,11.64 C17.1,15.53 13.94,18.69 10.05,18.69 C6.16,18.68 3,15.53 3,11.63 C3,7.74 6.16,4.58 10.05,4.58 C10.9,4.58 11.71,4.73 12.46,5\"/><polyline fill=\"none\" stroke=\"#000\" points=\"9.9 2 12.79 4.89 9.79 7.9\"/></svg>",
      "reply": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M17.7,13.11 C16.12,10.02 13.84,7.85 11.02,6.61 C10.57,6.41 9.75,6.13 9,5.91 L9,2 L1,9 L9,16 L9,12.13 C10.78,12.47 12.5,13.19 14.09,14.25 C17.13,16.28 18.56,18.54 18.56,18.54 C18.56,18.54 18.81,15.28 17.7,13.11 L17.7,13.11 Z M14.82,13.53 C13.17,12.4 11.01,11.4 8,10.92 L8,13.63 L2.55,9 L8,4.25 L8,6.8 C8.3,6.86 9.16,7.02 10.37,7.49 C13.3,8.65 15.54,10.96 16.65,13.08 C16.97,13.7 17.48,14.86 17.68,16 C16.87,15.05 15.73,14.15 14.82,13.53 L14.82,13.53 Z\"/></svg>",
      "rss": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"3.12\" cy=\"16.8\" r=\"1.85\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M1.5,8.2 C1.78,8.18 2.06,8.16 2.35,8.16 C7.57,8.16 11.81,12.37 11.81,17.57 C11.81,17.89 11.79,18.19 11.76,18.5\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M1.5,2.52 C1.78,2.51 2.06,2.5 2.35,2.5 C10.72,2.5 17.5,9.24 17.5,17.57 C17.5,17.89 17.49,18.19 17.47,18.5\"/></svg>",
      "search": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" cx=\"9\" cy=\"9\" r=\"7\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M14,14 L18,18 L14,14 Z\"/></svg>",
      "server": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect x=\"3\" y=\"3\" width=\"1\" height=\"2\"/><rect x=\"5\" y=\"3\" width=\"1\" height=\"2\"/><rect x=\"7\" y=\"3\" width=\"1\" height=\"2\"/><rect x=\"16\" y=\"3\" width=\"1\" height=\"1\"/><rect x=\"16\" y=\"10\" width=\"1\" height=\"1\"/><circle fill=\"none\" stroke=\"#000\" cx=\"9.9\" cy=\"17.4\" r=\"1.4\"/><rect x=\"3\" y=\"10\" width=\"1\" height=\"2\"/><rect x=\"5\" y=\"10\" width=\"1\" height=\"2\"/><rect x=\"9.5\" y=\"14\" width=\"1\" height=\"2\"/><rect x=\"3\" y=\"17\" width=\"6\" height=\"1\"/><rect x=\"11\" y=\"17\" width=\"6\" height=\"1\"/><rect fill=\"none\" stroke=\"#000\" x=\"1.5\" y=\"1.5\" width=\"17\" height=\"5\"/><rect fill=\"none\" stroke=\"#000\" x=\"1.5\" y=\"8.5\" width=\"17\" height=\"5\"/></svg>",
      "settings": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><ellipse fill=\"none\" stroke=\"#000\" cx=\"6.11\" cy=\"3.55\" rx=\"2.11\" ry=\"2.15\"/><ellipse fill=\"none\" stroke=\"#000\" cx=\"6.11\" cy=\"15.55\" rx=\"2.11\" ry=\"2.15\"/><circle fill=\"none\" stroke=\"#000\" cx=\"13.15\" cy=\"9.55\" r=\"2.15\"/><rect x=\"1\" y=\"3\" width=\"3\" height=\"1\"/><rect x=\"10\" y=\"3\" width=\"8\" height=\"1\"/><rect x=\"1\" y=\"9\" width=\"8\" height=\"1\"/><rect x=\"15\" y=\"9\" width=\"3\" height=\"1\"/><rect x=\"1\" y=\"15\" width=\"3\" height=\"1\"/><rect x=\"10\" y=\"15\" width=\"8\" height=\"1\"/></svg>",
      "shrink": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon points=\"11 4 12 4 12 8 16 8 16 9 11 9\"/><polygon points=\"4 11 9 11 9 16 8 16 8 12 4 12\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M12,8 L18,2\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M2,18 L8,12\"/></svg>",
      "sign-in": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon points=\"7 2 17 2 17 17 7 17 7 16 16 16 16 3 7 3\"/><polygon points=\"9.1 13.4 8.5 12.8 11.28 10 4 10 4 9 11.28 9 8.5 6.2 9.1 5.62 13 9.5\"/></svg>",
      "sign-out": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon points=\"13.1 13.4 12.5 12.8 15.28 10 8 10 8 9 15.28 9 12.5 6.2 13.1 5.62 17 9.5\"/><polygon points=\"13 2 3 2 3 17 13 17 13 16 4 16 4 3 13 3\"/></svg>",
      "social": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><line fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" x1=\"13.4\" y1=\"14\" x2=\"6.3\" y2=\"10.7\"/><line fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" x1=\"13.5\" y1=\"5.5\" x2=\"6.5\" y2=\"8.8\"/><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" cx=\"15.5\" cy=\"4.6\" r=\"2.3\"/><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" cx=\"15.5\" cy=\"14.8\" r=\"2.3\"/><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" cx=\"4.5\" cy=\"9.8\" r=\"2.3\"/></svg>",
      "soundcloud": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M17.2,9.4c-0.4,0-0.8,0.1-1.101,0.2c-0.199-2.5-2.399-4.5-5-4.5c-0.6,0-1.2,0.1-1.7,0.3C9.2,5.5,9.1,5.6,9.1,5.6V15h8 c1.601,0,2.801-1.2,2.801-2.8C20,10.7,18.7,9.4,17.2,9.4L17.2,9.4z\"/><rect x=\"6\" y=\"6.5\" width=\"1.5\" height=\"8.5\"/><rect x=\"3\" y=\"8\" width=\"1.5\" height=\"7\"/><rect y=\"10\" width=\"1.5\" height=\"5\"/></svg>",
      "star": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon fill=\"none\" stroke=\"#000\" stroke-width=\"1.01\" points=\"10 2 12.63 7.27 18.5 8.12 14.25 12.22 15.25 18 10 15.27 4.75 18 5.75 12.22 1.5 8.12 7.37 7.27\"/></svg>",
      "strikethrough": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M6,13.02 L6.65,13.02 C7.64,15.16 8.86,16.12 10.41,16.12 C12.22,16.12 12.92,14.93 12.92,13.89 C12.92,12.55 11.99,12.03 9.74,11.23 C8.05,10.64 6.23,10.11 6.23,7.83 C6.23,5.5 8.09,4.09 10.4,4.09 C11.44,4.09 12.13,4.31 12.72,4.54 L13.33,4 L13.81,4 L13.81,7.59 L13.16,7.59 C12.55,5.88 11.52,4.89 10.07,4.89 C8.84,4.89 7.89,5.69 7.89,7.03 C7.89,8.29 8.89,8.78 10.88,9.45 C12.57,10.03 14.38,10.6 14.38,12.91 C14.38,14.75 13.27,16.93 10.18,16.93 C9.18,16.93 8.17,16.69 7.46,16.39 L6.52,17 L6,17 L6,13.02 L6,13.02 Z\"/><rect x=\"3\" y=\"10\" width=\"15\" height=\"1\"/></svg>",
      "table": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect x=\"1\" y=\"3\" width=\"18\" height=\"1\"/><rect x=\"1\" y=\"7\" width=\"18\" height=\"1\"/><rect x=\"1\" y=\"11\" width=\"18\" height=\"1\"/><rect x=\"1\" y=\"15\" width=\"18\" height=\"1\"/></svg>",
      "tablet-landscape": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"#000\" d=\"M1.5,5 C1.5,4.2 2.2,3.5 3,3.5 L17,3.5 C17.8,3.5 18.5,4.2 18.5,5 L18.5,16 C18.5,16.8 17.8,17.5 17,17.5 L3,17.5 C2.2,17.5 1.5,16.8 1.5,16 L1.5,5 L1.5,5 L1.5,5 Z\"/><circle cx=\"3.7\" cy=\"10.5\" r=\".8\"/></svg>",
      "tablet": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"#000\" d=\"M5,18.5 C4.2,18.5 3.5,17.8 3.5,17 L3.5,3 C3.5,2.2 4.2,1.5 5,1.5 L16,1.5 C16.8,1.5 17.5,2.2 17.5,3 L17.5,17 C17.5,17.8 16.8,18.5 16,18.5 L5,18.5 L5,18.5 L5,18.5 Z\"/><circle cx=\"10.5\" cy=\"16.3\" r=\".8\"/></svg>",
      "tag": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M17.5,3.71 L17.5,7.72 C17.5,7.96 17.4,8.2 17.21,8.39 L8.39,17.2 C7.99,17.6 7.33,17.6 6.93,17.2 L2.8,13.07 C2.4,12.67 2.4,12.01 2.8,11.61 L11.61,2.8 C11.81,2.6 12.08,2.5 12.34,2.5 L16.19,2.5 C16.52,2.5 16.86,2.63 17.11,2.88 C17.35,3.11 17.48,3.4 17.5,3.71 L17.5,3.71 Z\"/><circle cx=\"14\" cy=\"6\" r=\"1\"/></svg>",
      "thumbnails": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect fill=\"none\" stroke=\"#000\" x=\"3.5\" y=\"3.5\" width=\"5\" height=\"5\"/><rect fill=\"none\" stroke=\"#000\" x=\"11.5\" y=\"3.5\" width=\"5\" height=\"5\"/><rect fill=\"none\" stroke=\"#000\" x=\"11.5\" y=\"11.5\" width=\"5\" height=\"5\"/><rect fill=\"none\" stroke=\"#000\" x=\"3.5\" y=\"11.5\" width=\"5\" height=\"5\"/></svg>",
      "tiktok": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M17.24,6V8.82a6.79,6.79,0,0,1-4-1.28v5.81A5.26,5.26,0,1,1,8,8.1a4.36,4.36,0,0,1,.72.05v2.9A2.57,2.57,0,0,0,7.64,11a2.4,2.4,0,1,0,2.77,2.38V2h2.86a4,4,0,0,0,1.84,3.38A4,4,0,0,0,17.24,6Z\"/></svg>",
      "trash": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" points=\"6.5 3 6.5 1.5 13.5 1.5 13.5 3\"/><polyline fill=\"none\" stroke=\"#000\" points=\"4.5 4 4.5 18.5 15.5 18.5 15.5 4\"/><rect x=\"8\" y=\"7\" width=\"1\" height=\"9\"/><rect x=\"11\" y=\"7\" width=\"1\" height=\"9\"/><rect x=\"2\" y=\"3\" width=\"16\" height=\"1\"/></svg>",
      "triangle-down": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon points=\"5 7 15 7 10 12\"/></svg>",
      "triangle-left": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon points=\"12 5 7 10 12 15\"/></svg>",
      "triangle-right": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon points=\"8 5 13 10 8 15\"/></svg>",
      "triangle-up": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon points=\"5 13 10 8 15 13\"/></svg>",
      "tripadvisor": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M19.021,7.866C19.256,6.862,20,5.854,20,5.854h-3.346C14.781,4.641,12.504,4,9.98,4C7.363,4,4.999,4.651,3.135,5.876H0\tc0,0,0.738,0.987,0.976,1.988c-0.611,0.837-0.973,1.852-0.973,2.964c0,2.763,2.249,5.009,5.011,5.009\tc1.576,0,2.976-0.737,3.901-1.879l1.063,1.599l1.075-1.615c0.475,0.611,1.1,1.111,1.838,1.451c1.213,0.547,2.574,0.612,3.825,0.15\tc2.589-0.963,3.913-3.852,2.964-6.439c-0.175-0.463-0.4-0.876-0.675-1.238H19.021z M16.38,14.594\tc-1.002,0.371-2.088,0.328-3.06-0.119c-0.688-0.317-1.252-0.817-1.657-1.438c-0.164-0.25-0.313-0.52-0.417-0.811\tc-0.124-0.328-0.186-0.668-0.217-1.014c-0.063-0.689,0.037-1.396,0.339-2.043c0.448-0.971,1.251-1.71,2.25-2.079\tc2.075-0.765,4.375,0.3,5.14,2.366c0.762,2.066-0.301,4.37-2.363,5.134L16.38,14.594L16.38,14.594z M8.322,13.066\tc-0.72,1.059-1.935,1.76-3.309,1.76c-2.207,0-4.001-1.797-4.001-3.996c0-2.203,1.795-4.002,4.001-4.002\tc2.204,0,3.999,1.8,3.999,4.002c0,0.137-0.024,0.261-0.04,0.396c-0.067,0.678-0.284,1.313-0.648,1.853v-0.013H8.322z M2.472,10.775\tc0,1.367,1.112,2.479,2.476,2.479c1.363,0,2.472-1.11,2.472-2.479c0-1.359-1.11-2.468-2.472-2.468\tC3.584,8.306,2.473,9.416,2.472,10.775L2.472,10.775z M12.514,10.775c0,1.367,1.104,2.479,2.471,2.479\tc1.363,0,2.474-1.108,2.474-2.479c0-1.359-1.11-2.468-2.474-2.468c-1.364,0-2.477,1.109-2.477,2.468H12.514z M3.324,10.775\tc0-0.893,0.726-1.618,1.614-1.618c0.889,0,1.625,0.727,1.625,1.618c0,0.898-0.725,1.627-1.625,1.627\tc-0.901,0-1.625-0.729-1.625-1.627H3.324z M13.354,10.775c0-0.893,0.726-1.618,1.627-1.618c0.886,0,1.61,0.727,1.61,1.618\tc0,0.898-0.726,1.627-1.626,1.627s-1.625-0.729-1.625-1.627H13.354z M9.977,4.875c1.798,0,3.425,0.324,4.849,0.968\tc-0.535,0.015-1.061,0.108-1.586,0.3c-1.264,0.463-2.264,1.388-2.815,2.604c-0.262,0.551-0.398,1.133-0.448,1.72\tC9.79,7.905,7.677,5.873,5.076,5.82C6.501,5.208,8.153,4.875,9.94,4.875H9.977z\"/></svg>",
      "tumblr": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M6.885,8.598c0,0,0,3.393,0,4.996c0,0.282,0,0.66,0.094,0.942c0.377,1.509,1.131,2.545,2.545,3.11 c1.319,0.472,2.356,0.472,3.676,0c0.565-0.188,1.132-0.659,1.132-0.659l-0.849-2.263c0,0-1.036,0.378-1.603,0.283 c-0.565-0.094-1.226-0.66-1.226-1.508c0-1.603,0-4.902,0-4.902h2.828V5.771h-2.828V2H8.205c0,0-0.094,0.66-0.188,0.942 C7.828,3.791,7.262,4.733,6.603,5.394C5.848,6.147,5,6.43,5,6.43v2.168H6.885z\"/></svg>",
      "tv": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect x=\"7\" y=\"16\" width=\"6\" height=\"1\"/><rect fill=\"none\" stroke=\"#000\" x=\".5\" y=\"3.5\" width=\"19\" height=\"11\"/></svg>",
      "twitch": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M5.23,1,2,4.23V15.85H5.88v3.23L9.1,15.85h2.59L17.5,10V1Zm11,8.4L13.62,12H11L8.78,14.24V12H5.88V2.29H16.21Z\"/><rect x=\"12.98\" y=\"4.55\" width=\"1.29\" height=\"3.88\"/><rect x=\"9.43\" y=\"4.55\" width=\"1.29\" height=\"3.88\"/></svg>",
      "twitter": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M19,4.74 C18.339,5.029 17.626,5.229 16.881,5.32 C17.644,4.86 18.227,4.139 18.503,3.28 C17.79,3.7 17.001,4.009 16.159,4.17 C15.485,3.45 14.526,3 13.464,3 C11.423,3 9.771,4.66 9.771,6.7 C9.771,6.99 9.804,7.269 9.868,7.539 C6.795,7.38 4.076,5.919 2.254,3.679 C1.936,4.219 1.754,4.86 1.754,5.539 C1.754,6.82 2.405,7.95 3.397,8.61 C2.79,8.589 2.22,8.429 1.723,8.149 L1.723,8.189 C1.723,9.978 2.997,11.478 4.686,11.82 C4.376,11.899 4.049,11.939 3.713,11.939 C3.475,11.939 3.245,11.919 3.018,11.88 C3.49,13.349 4.852,14.419 6.469,14.449 C5.205,15.429 3.612,16.019 1.882,16.019 C1.583,16.019 1.29,16.009 1,15.969 C2.635,17.019 4.576,17.629 6.662,17.629 C13.454,17.629 17.17,12 17.17,7.129 C17.17,6.969 17.166,6.809 17.157,6.649 C17.879,6.129 18.504,5.478 19,4.74\"/></svg>",
      "uikit": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon points=\"14.4,3.1 11.3,5.1 15,7.3 15,12.9 10,15.7 5,12.9 5,8.5 2,6.8 2,14.8 9.9,19.5 18,14.8 18,5.3\"/><polygon points=\"9.8,4.2 6.7,2.4 9.8,0.4 12.9,2.3\"/></svg>",
      "unlock": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect fill=\"none\" stroke=\"#000\" x=\"3.5\" y=\"8.5\" width=\"13\" height=\"10\"/><path fill=\"none\" stroke=\"#000\" d=\"M6.5,8.5 L6.5,4.9 C6.5,3 8.1,1.5 10,1.5 C11.9,1.5 13.5,3 13.5,4.9\"/></svg>",
      "upload": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" points=\"5 8 9.5 3.5 14 8\"/><rect x=\"3\" y=\"17\" width=\"13\" height=\"1\"/><line fill=\"none\" stroke=\"#000\" x1=\"9.5\" y1=\"15\" x2=\"9.5\" y2=\"4\"/></svg>",
      "user": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" cx=\"9.9\" cy=\"6.4\" r=\"4.4\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M1.5,19 C2.3,14.5 5.8,11.2 10,11.2 C14.2,11.2 17.7,14.6 18.5,19.2\"/></svg>",
      "users": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" cx=\"7.7\" cy=\"8.6\" r=\"3.5\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M1,18.1 C1.7,14.6 4.4,12.1 7.6,12.1 C10.9,12.1 13.7,14.8 14.3,18.3\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M11.4,4 C12.8,2.4 15.4,2.8 16.3,4.7 C17.2,6.6 15.7,8.9 13.6,8.9 C16.5,8.9 18.8,11.3 19.2,14.1\"/></svg>",
      "video-camera": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon fill=\"none\" stroke=\"#000\" points=\"17.5 6.9 17.5 13.1 13.5 10.4 13.5 14.5 2.5 14.5 2.5 5.5 13.5 5.5 13.5 9.6 17.5 6.9\"/></svg>",
      "vimeo": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M2.065,7.59C1.84,7.367,1.654,7.082,1.468,6.838c-0.332-0.42-0.137-0.411,0.274-0.772c1.026-0.91,2.004-1.896,3.127-2.688 c1.017-0.713,2.365-1.173,3.286-0.039c0.849,1.045,0.869,2.629,1.084,3.891c0.215,1.309,0.421,2.648,0.88,3.901 c0.127,0.352,0.37,1.018,0.81,1.074c0.567,0.078,1.145-0.917,1.408-1.289c0.684-0.987,1.611-2.317,1.494-3.587 c-0.115-1.349-1.572-1.095-2.482-0.773c0.146-1.514,1.555-3.216,2.912-3.792c1.439-0.597,3.579-0.587,4.302,1.036 c0.772,1.759,0.078,3.802-0.763,5.396c-0.918,1.731-2.1,3.333-3.363,4.829c-1.114,1.329-2.432,2.787-4.093,3.422 c-1.897,0.723-3.021-0.686-3.667-2.318c-0.705-1.777-1.056-3.771-1.565-5.621C4.898,8.726,4.644,7.836,4.136,7.191 C3.473,6.358,2.72,7.141,2.065,7.59C1.977,7.502,2.115,7.551,2.065,7.59L2.065,7.59z\"/></svg>",
      "warning": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"10\" cy=\"14\" r=\"1\"/><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" cx=\"10\" cy=\"10\" r=\"9\"/><path d=\"M10.97,7.72 C10.85,9.54 10.56,11.29 10.56,11.29 C10.51,11.87 10.27,12 9.99,12 C9.69,12 9.49,11.87 9.43,11.29 C9.43,11.29 9.16,9.54 9.03,7.72 C8.96,6.54 9.03,6 9.03,6 C9.03,5.45 9.46,5.02 9.99,5 C10.53,5.01 10.97,5.44 10.97,6 C10.97,6 11.04,6.54 10.97,7.72 L10.97,7.72 Z\"/></svg>",
      "whatsapp": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M16.7,3.3c-1.8-1.8-4.1-2.8-6.7-2.8c-5.2,0-9.4,4.2-9.4,9.4c0,1.7,0.4,3.3,1.3,4.7l-1.3,4.9l5-1.3c1.4,0.8,2.9,1.2,4.5,1.2 l0,0l0,0c5.2,0,9.4-4.2,9.4-9.4C19.5,7.4,18.5,5,16.7,3.3 M10.1,17.7L10.1,17.7c-1.4,0-2.8-0.4-4-1.1l-0.3-0.2l-3,0.8l0.8-2.9 l-0.2-0.3c-0.8-1.2-1.2-2.7-1.2-4.2c0-4.3,3.5-7.8,7.8-7.8c2.1,0,4.1,0.8,5.5,2.3c1.5,1.5,2.3,3.4,2.3,5.5 C17.9,14.2,14.4,17.7,10.1,17.7 M14.4,11.9c-0.2-0.1-1.4-0.7-1.6-0.8c-0.2-0.1-0.4-0.1-0.5,0.1c-0.2,0.2-0.6,0.8-0.8,0.9 c-0.1,0.2-0.3,0.2-0.5,0.1c-0.2-0.1-1-0.4-1.9-1.2c-0.7-0.6-1.2-1.4-1.3-1.6c-0.1-0.2,0-0.4,0.1-0.5C8,8.8,8.1,8.7,8.2,8.5 c0.1-0.1,0.2-0.2,0.2-0.4c0.1-0.2,0-0.3,0-0.4C8.4,7.6,7.9,6.5,7.7,6C7.5,5.5,7.3,5.6,7.2,5.6c-0.1,0-0.3,0-0.4,0 c-0.2,0-0.4,0.1-0.6,0.3c-0.2,0.2-0.8,0.8-0.8,2c0,1.2,0.8,2.3,1,2.4c0.1,0.2,1.7,2.5,4,3.5c0.6,0.2,1,0.4,1.3,0.5 c0.6,0.2,1.1,0.2,1.5,0.1c0.5-0.1,1.4-0.6,1.6-1.1c0.2-0.5,0.2-1,0.1-1.1C14.8,12.1,14.6,12,14.4,11.9\"/></svg>",
      "wordpress": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10,0.5c-5.2,0-9.5,4.3-9.5,9.5s4.3,9.5,9.5,9.5c5.2,0,9.5-4.3,9.5-9.5S15.2,0.5,10,0.5L10,0.5L10,0.5z M15.6,3.9h-0.1 c-0.8,0-1.4,0.7-1.4,1.5c0,0.7,0.4,1.3,0.8,1.9c0.3,0.6,0.7,1.3,0.7,2.3c0,0.7-0.3,1.5-0.6,2.7L14.1,15l-3-8.9 c0.5,0,0.9-0.1,0.9-0.1C12.5,6,12.5,5.3,12,5.4c0,0-1.3,0.1-2.2,0.1C9,5.5,7.7,5.4,7.7,5.4C7.2,5.3,7.2,6,7.6,6c0,0,0.4,0.1,0.9,0.1 l1.3,3.5L8,15L5,6.1C5.5,6.1,5.9,6,5.9,6C6.4,6,6.3,5.3,5.9,5.4c0,0-1.3,0.1-2.2,0.1c-0.2,0-0.3,0-0.5,0c1.5-2.2,4-3.7,6.9-3.7 C12.2,1.7,14.1,2.6,15.6,3.9L15.6,3.9L15.6,3.9z M2.5,6.6l3.9,10.8c-2.7-1.3-4.6-4.2-4.6-7.4C1.8,8.8,2,7.6,2.5,6.6L2.5,6.6L2.5,6.6 z M10.2,10.7l2.5,6.9c0,0,0,0.1,0.1,0.1C11.9,18,11,18.2,10,18.2c-0.8,0-1.6-0.1-2.3-0.3L10.2,10.7L10.2,10.7L10.2,10.7z M14.2,17.1 l2.5-7.3c0.5-1.2,0.6-2.1,0.6-2.9c0-0.3,0-0.6-0.1-0.8c0.6,1.2,1,2.5,1,4C18.3,13,16.6,15.7,14.2,17.1L14.2,17.1L14.2,17.1z\"/></svg>",
      "world": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"#000\" d=\"M1,10.5 L19,10.5\"/><path fill=\"none\" stroke=\"#000\" d=\"M2.35,15.5 L17.65,15.5\"/><path fill=\"none\" stroke=\"#000\" d=\"M2.35,5.5 L17.523,5.5\"/><path fill=\"none\" stroke=\"#000\" d=\"M10,19.46 L9.98,19.46 C7.31,17.33 5.61,14.141 5.61,10.58 C5.61,7.02 7.33,3.83 10,1.7 C10.01,1.7 9.99,1.7 10,1.7 L10,1.7 C12.67,3.83 14.4,7.02 14.4,10.58 C14.4,14.141 12.67,17.33 10,19.46 L10,19.46 L10,19.46 L10,19.46 Z\"/><circle fill=\"none\" stroke=\"#000\" cx=\"10\" cy=\"10.5\" r=\"9\"/></svg>",
      "xing": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M4.4,4.56 C4.24,4.56 4.11,4.61 4.05,4.72 C3.98,4.83 3.99,4.97 4.07,5.12 L5.82,8.16 L5.82,8.17 L3.06,13.04 C2.99,13.18 2.99,13.33 3.06,13.44 C3.12,13.55 3.24,13.62 3.4,13.62 L6,13.62 C6.39,13.62 6.57,13.36 6.71,13.12 C6.71,13.12 9.41,8.35 9.51,8.16 C9.49,8.14 7.72,5.04 7.72,5.04 C7.58,4.81 7.39,4.56 6.99,4.56 L4.4,4.56 L4.4,4.56 Z\"/><path d=\"M15.3,1 C14.91,1 14.74,1.25 14.6,1.5 C14.6,1.5 9.01,11.42 8.82,11.74 C8.83,11.76 12.51,18.51 12.51,18.51 C12.64,18.74 12.84,19 13.23,19 L15.82,19 C15.98,19 16.1,18.94 16.16,18.83 C16.23,18.72 16.23,18.57 16.16,18.43 L12.5,11.74 L12.5,11.72 L18.25,1.56 C18.32,1.42 18.32,1.27 18.25,1.16 C18.21,1.06 18.08,1 17.93,1 L15.3,1 L15.3,1 Z\"/></svg>",
      "yelp": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M17.175,14.971c-0.112,0.77-1.686,2.767-2.406,3.054c-0.246,0.1-0.487,0.076-0.675-0.069\tc-0.122-0.096-2.446-3.859-2.446-3.859c-0.194-0.293-0.157-0.682,0.083-0.978c0.234-0.284,0.581-0.393,0.881-0.276\tc0.016,0.01,4.21,1.394,4.332,1.482c0.178,0.148,0.263,0.379,0.225,0.646L17.175,14.971L17.175,14.971z M11.464,10.789\tc-0.203-0.307-0.199-0.666,0.009-0.916c0,0,2.625-3.574,2.745-3.657c0.203-0.135,0.452-0.141,0.69-0.025\tc0.691,0.335,2.085,2.405,2.167,3.199v0.027c0.024,0.271-0.082,0.491-0.273,0.623c-0.132,0.083-4.43,1.155-4.43,1.155\tc-0.322,0.096-0.68-0.06-0.882-0.381L11.464,10.789z M9.475,9.563C9.32,9.609,8.848,9.757,8.269,8.817c0,0-3.916-6.16-4.007-6.351\tc-0.057-0.212,0.011-0.455,0.202-0.65C5.047,1.211,8.21,0.327,9.037,0.529c0.27,0.069,0.457,0.238,0.522,0.479\tc0.047,0.266,0.433,5.982,0.488,7.264C10.098,9.368,9.629,9.517,9.475,9.563z M9.927,19.066c-0.083,0.225-0.273,0.373-0.54,0.421\tc-0.762,0.13-3.15-0.751-3.647-1.342c-0.096-0.131-0.155-0.262-0.167-0.394c-0.011-0.095,0-0.189,0.036-0.272\tc0.061-0.155,2.917-3.538,2.917-3.538c0.214-0.272,0.595-0.355,0.952-0.213c0.345,0.13,0.56,0.428,0.536,0.749\tC10.014,14.479,9.977,18.923,9.927,19.066z M3.495,13.912c-0.235-0.009-0.444-0.148-0.568-0.382c-0.089-0.17-0.151-0.453-0.19-0.794\tC2.63,11.701,2.761,10.144,3.07,9.648c0.145-0.226,0.357-0.345,0.592-0.336c0.154,0,4.255,1.667,4.255,1.667\tc0.321,0.118,0.521,0.453,0.5,0.833c-0.023,0.37-0.236,0.655-0.551,0.738L3.495,13.912z\"/></svg>",
      "youtube": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M15,4.1c1,0.1,2.3,0,3,0.8c0.8,0.8,0.9,2.1,0.9,3.1C19,9.2,19,10.9,19,12c-0.1,1.1,0,2.4-0.5,3.4c-0.5,1.1-1.4,1.5-2.5,1.6 c-1.2,0.1-8.6,0.1-11,0c-1.1-0.1-2.4-0.1-3.2-1c-0.7-0.8-0.7-2-0.8-3C1,11.8,1,10.1,1,8.9c0-1.1,0-2.4,0.5-3.4C2,4.5,3,4.3,4.1,4.2 C5.3,4.1,12.6,4,15,4.1z M8,7.5v6l5.5-3L8,7.5z\"/></svg>"
    });
  }

  if (typeof window !== 'undefined' && window.UIkit) {
    window.UIkit.use(plugin);
  }

  return plugin;
});

/***/ }),

/***/ "./node_modules/core-js/internals/a-callable.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/a-callable.js ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var tryToString = __webpack_require__(/*! ../internals/try-to-string */ "./node_modules/core-js/internals/try-to-string.js");

// `Assert: IsCallable(argument) is true`
module.exports = function (argument) {
  if (isCallable(argument)) return argument;
  throw TypeError(tryToString(argument) + ' is not a function');
};


/***/ }),

/***/ "./node_modules/core-js/internals/a-constructor.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/a-constructor.js ***!
  \*********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isConstructor = __webpack_require__(/*! ../internals/is-constructor */ "./node_modules/core-js/internals/is-constructor.js");
var tryToString = __webpack_require__(/*! ../internals/try-to-string */ "./node_modules/core-js/internals/try-to-string.js");

// `Assert: IsConstructor(argument) is true`
module.exports = function (argument) {
  if (isConstructor(argument)) return argument;
  throw TypeError(tryToString(argument) + ' is not a constructor');
};


/***/ }),

/***/ "./node_modules/core-js/internals/a-possible-prototype.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/a-possible-prototype.js ***!
  \****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");

module.exports = function (argument) {
  if (typeof argument === 'object' || isCallable(argument)) return argument;
  throw TypeError("Can't set " + String(argument) + ' as a prototype');
};


/***/ }),

/***/ "./node_modules/core-js/internals/add-to-unscopables.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/internals/add-to-unscopables.js ***!
  \**************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var create = __webpack_require__(/*! ../internals/object-create */ "./node_modules/core-js/internals/object-create.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");

var UNSCOPABLES = wellKnownSymbol('unscopables');
var ArrayPrototype = Array.prototype;

// Array.prototype[@@unscopables]
// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
if (ArrayPrototype[UNSCOPABLES] == undefined) {
  definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {
    configurable: true,
    value: create(null)
  });
}

// add a key to Array.prototype[@@unscopables]
module.exports = function (key) {
  ArrayPrototype[UNSCOPABLES][key] = true;
};


/***/ }),

/***/ "./node_modules/core-js/internals/advance-string-index.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/advance-string-index.js ***!
  \****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var charAt = __webpack_require__(/*! ../internals/string-multibyte */ "./node_modules/core-js/internals/string-multibyte.js").charAt;

// `AdvanceStringIndex` abstract operation
// https://tc39.es/ecma262/#sec-advancestringindex
module.exports = function (S, index, unicode) {
  return index + (unicode ? charAt(S, index).length : 1);
};


/***/ }),

/***/ "./node_modules/core-js/internals/an-instance.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/an-instance.js ***!
  \*******************************************************/
/***/ (function(module) {

module.exports = function (it, Constructor, name) {
  if (it instanceof Constructor) return it;
  throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');
};


/***/ }),

/***/ "./node_modules/core-js/internals/an-object.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/an-object.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");

// `Assert: Type(argument) is Object`
module.exports = function (argument) {
  if (isObject(argument)) return argument;
  throw TypeError(String(argument) + ' is not an object');
};


/***/ }),

/***/ "./node_modules/core-js/internals/array-fill.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/array-fill.js ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
var toAbsoluteIndex = __webpack_require__(/*! ../internals/to-absolute-index */ "./node_modules/core-js/internals/to-absolute-index.js");
var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");

// `Array.prototype.fill` method implementation
// https://tc39.es/ecma262/#sec-array.prototype.fill
module.exports = function fill(value /* , start = 0, end = @length */) {
  var O = toObject(this);
  var length = toLength(O.length);
  var argumentsLength = arguments.length;
  var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);
  var end = argumentsLength > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
  while (endPos > index) O[index++] = value;
  return O;
};


/***/ }),

/***/ "./node_modules/core-js/internals/array-for-each.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/array-for-each.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $forEach = __webpack_require__(/*! ../internals/array-iteration */ "./node_modules/core-js/internals/array-iteration.js").forEach;
var arrayMethodIsStrict = __webpack_require__(/*! ../internals/array-method-is-strict */ "./node_modules/core-js/internals/array-method-is-strict.js");

var STRICT_METHOD = arrayMethodIsStrict('forEach');

// `Array.prototype.forEach` method implementation
// https://tc39.es/ecma262/#sec-array.prototype.foreach
module.exports = !STRICT_METHOD ? function forEach(callbackfn /* , thisArg */) {
  return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
// eslint-disable-next-line es/no-array-prototype-foreach -- safe
} : [].forEach;


/***/ }),

/***/ "./node_modules/core-js/internals/array-from.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/array-from.js ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var bind = __webpack_require__(/*! ../internals/function-bind-context */ "./node_modules/core-js/internals/function-bind-context.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
var callWithSafeIterationClosing = __webpack_require__(/*! ../internals/call-with-safe-iteration-closing */ "./node_modules/core-js/internals/call-with-safe-iteration-closing.js");
var isArrayIteratorMethod = __webpack_require__(/*! ../internals/is-array-iterator-method */ "./node_modules/core-js/internals/is-array-iterator-method.js");
var isConstructor = __webpack_require__(/*! ../internals/is-constructor */ "./node_modules/core-js/internals/is-constructor.js");
var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
var createProperty = __webpack_require__(/*! ../internals/create-property */ "./node_modules/core-js/internals/create-property.js");
var getIterator = __webpack_require__(/*! ../internals/get-iterator */ "./node_modules/core-js/internals/get-iterator.js");
var getIteratorMethod = __webpack_require__(/*! ../internals/get-iterator-method */ "./node_modules/core-js/internals/get-iterator-method.js");

// `Array.from` method implementation
// https://tc39.es/ecma262/#sec-array.from
module.exports = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
  var O = toObject(arrayLike);
  var IS_CONSTRUCTOR = isConstructor(this);
  var argumentsLength = arguments.length;
  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
  var mapping = mapfn !== undefined;
  if (mapping) mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2);
  var iteratorMethod = getIteratorMethod(O);
  var index = 0;
  var length, result, step, iterator, next, value;
  // if the target is not iterable or it's an array with the default iterator - use a simple case
  if (iteratorMethod && !(this == Array && isArrayIteratorMethod(iteratorMethod))) {
    iterator = getIterator(O, iteratorMethod);
    next = iterator.next;
    result = IS_CONSTRUCTOR ? new this() : [];
    for (;!(step = next.call(iterator)).done; index++) {
      value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
      createProperty(result, index, value);
    }
  } else {
    length = toLength(O.length);
    result = IS_CONSTRUCTOR ? new this(length) : Array(length);
    for (;length > index; index++) {
      value = mapping ? mapfn(O[index], index) : O[index];
      createProperty(result, index, value);
    }
  }
  result.length = index;
  return result;
};


/***/ }),

/***/ "./node_modules/core-js/internals/array-includes.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/array-includes.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
var toAbsoluteIndex = __webpack_require__(/*! ../internals/to-absolute-index */ "./node_modules/core-js/internals/to-absolute-index.js");

// `Array.prototype.{ indexOf, includes }` methods implementation
var createMethod = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIndexedObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare -- NaN check
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare -- NaN check
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) {
      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

module.exports = {
  // `Array.prototype.includes` method
  // https://tc39.es/ecma262/#sec-array.prototype.includes
  includes: createMethod(true),
  // `Array.prototype.indexOf` method
  // https://tc39.es/ecma262/#sec-array.prototype.indexof
  indexOf: createMethod(false)
};


/***/ }),

/***/ "./node_modules/core-js/internals/array-iteration.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/array-iteration.js ***!
  \***********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var bind = __webpack_require__(/*! ../internals/function-bind-context */ "./node_modules/core-js/internals/function-bind-context.js");
var IndexedObject = __webpack_require__(/*! ../internals/indexed-object */ "./node_modules/core-js/internals/indexed-object.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
var arraySpeciesCreate = __webpack_require__(/*! ../internals/array-species-create */ "./node_modules/core-js/internals/array-species-create.js");

var push = [].push;

// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterReject }` methods implementation
var createMethod = function (TYPE) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var IS_FILTER_REJECT = TYPE == 7;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  return function ($this, callbackfn, that, specificCreate) {
    var O = toObject($this);
    var self = IndexedObject(O);
    var boundFunction = bind(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var create = specificCreate || arraySpeciesCreate;
    var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_REJECT ? create($this, 0) : undefined;
    var value, result;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      value = self[index];
      result = boundFunction(value, index, O);
      if (TYPE) {
        if (IS_MAP) target[index] = result; // map
        else if (result) switch (TYPE) {
          case 3: return true;              // some
          case 5: return value;             // find
          case 6: return index;             // findIndex
          case 2: push.call(target, value); // filter
        } else switch (TYPE) {
          case 4: return false;             // every
          case 7: push.call(target, value); // filterReject
        }
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
  };
};

module.exports = {
  // `Array.prototype.forEach` method
  // https://tc39.es/ecma262/#sec-array.prototype.foreach
  forEach: createMethod(0),
  // `Array.prototype.map` method
  // https://tc39.es/ecma262/#sec-array.prototype.map
  map: createMethod(1),
  // `Array.prototype.filter` method
  // https://tc39.es/ecma262/#sec-array.prototype.filter
  filter: createMethod(2),
  // `Array.prototype.some` method
  // https://tc39.es/ecma262/#sec-array.prototype.some
  some: createMethod(3),
  // `Array.prototype.every` method
  // https://tc39.es/ecma262/#sec-array.prototype.every
  every: createMethod(4),
  // `Array.prototype.find` method
  // https://tc39.es/ecma262/#sec-array.prototype.find
  find: createMethod(5),
  // `Array.prototype.findIndex` method
  // https://tc39.es/ecma262/#sec-array.prototype.findIndex
  findIndex: createMethod(6),
  // `Array.prototype.filterReject` method
  // https://github.com/tc39/proposal-array-filtering
  filterReject: createMethod(7)
};


/***/ }),

/***/ "./node_modules/core-js/internals/array-method-has-species-support.js":
/*!****************************************************************************!*\
  !*** ./node_modules/core-js/internals/array-method-has-species-support.js ***!
  \****************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var V8_VERSION = __webpack_require__(/*! ../internals/engine-v8-version */ "./node_modules/core-js/internals/engine-v8-version.js");

var SPECIES = wellKnownSymbol('species');

module.exports = function (METHOD_NAME) {
  // We can't use this feature detection in V8 since it causes
  // deoptimization and serious performance degradation
  // https://github.com/zloirock/core-js/issues/677
  return V8_VERSION >= 51 || !fails(function () {
    var array = [];
    var constructor = array.constructor = {};
    constructor[SPECIES] = function () {
      return { foo: 1 };
    };
    return array[METHOD_NAME](Boolean).foo !== 1;
  });
};


/***/ }),

/***/ "./node_modules/core-js/internals/array-method-is-strict.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/internals/array-method-is-strict.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

module.exports = function (METHOD_NAME, argument) {
  var method = [][METHOD_NAME];
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call,no-throw-literal -- required for testing
    method.call(null, argument || function () { throw 1; }, 1);
  });
};


/***/ }),

/***/ "./node_modules/core-js/internals/array-sort.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/array-sort.js ***!
  \******************************************************/
/***/ (function(module) {

// TODO: use something more complex like timsort?
var floor = Math.floor;

var mergeSort = function (array, comparefn) {
  var length = array.length;
  var middle = floor(length / 2);
  return length < 8 ? insertionSort(array, comparefn) : merge(
    mergeSort(array.slice(0, middle), comparefn),
    mergeSort(array.slice(middle), comparefn),
    comparefn
  );
};

var insertionSort = function (array, comparefn) {
  var length = array.length;
  var i = 1;
  var element, j;

  while (i < length) {
    j = i;
    element = array[i];
    while (j && comparefn(array[j - 1], element) > 0) {
      array[j] = array[--j];
    }
    if (j !== i++) array[j] = element;
  } return array;
};

var merge = function (left, right, comparefn) {
  var llength = left.length;
  var rlength = right.length;
  var lindex = 0;
  var rindex = 0;
  var result = [];

  while (lindex < llength || rindex < rlength) {
    if (lindex < llength && rindex < rlength) {
      result.push(comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++]);
    } else {
      result.push(lindex < llength ? left[lindex++] : right[rindex++]);
    }
  } return result;
};

module.exports = mergeSort;


/***/ }),

/***/ "./node_modules/core-js/internals/array-species-constructor.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/internals/array-species-constructor.js ***!
  \*********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isArray = __webpack_require__(/*! ../internals/is-array */ "./node_modules/core-js/internals/is-array.js");
var isConstructor = __webpack_require__(/*! ../internals/is-constructor */ "./node_modules/core-js/internals/is-constructor.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

var SPECIES = wellKnownSymbol('species');

// a part of `ArraySpeciesCreate` abstract operation
// https://tc39.es/ecma262/#sec-arrayspeciescreate
module.exports = function (originalArray) {
  var C;
  if (isArray(originalArray)) {
    C = originalArray.constructor;
    // cross-realm fallback
    if (isConstructor(C) && (C === Array || isArray(C.prototype))) C = undefined;
    else if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};


/***/ }),

/***/ "./node_modules/core-js/internals/array-species-create.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/array-species-create.js ***!
  \****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var arraySpeciesConstructor = __webpack_require__(/*! ../internals/array-species-constructor */ "./node_modules/core-js/internals/array-species-constructor.js");

// `ArraySpeciesCreate` abstract operation
// https://tc39.es/ecma262/#sec-arrayspeciescreate
module.exports = function (originalArray, length) {
  return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
};


/***/ }),

/***/ "./node_modules/core-js/internals/call-with-safe-iteration-closing.js":
/*!****************************************************************************!*\
  !*** ./node_modules/core-js/internals/call-with-safe-iteration-closing.js ***!
  \****************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var iteratorClose = __webpack_require__(/*! ../internals/iterator-close */ "./node_modules/core-js/internals/iterator-close.js");

// call something on iterator step with safe closing on error
module.exports = function (iterator, fn, value, ENTRIES) {
  try {
    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
  } catch (error) {
    iteratorClose(iterator, 'throw', error);
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/check-correctness-of-iteration.js":
/*!**************************************************************************!*\
  !*** ./node_modules/core-js/internals/check-correctness-of-iteration.js ***!
  \**************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

var ITERATOR = wellKnownSymbol('iterator');
var SAFE_CLOSING = false;

try {
  var called = 0;
  var iteratorWithReturn = {
    next: function () {
      return { done: !!called++ };
    },
    'return': function () {
      SAFE_CLOSING = true;
    }
  };
  iteratorWithReturn[ITERATOR] = function () {
    return this;
  };
  // eslint-disable-next-line es/no-array-from, no-throw-literal -- required for testing
  Array.from(iteratorWithReturn, function () { throw 2; });
} catch (error) { /* empty */ }

module.exports = function (exec, SKIP_CLOSING) {
  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
  var ITERATION_SUPPORT = false;
  try {
    var object = {};
    object[ITERATOR] = function () {
      return {
        next: function () {
          return { done: ITERATION_SUPPORT = true };
        }
      };
    };
    exec(object);
  } catch (error) { /* empty */ }
  return ITERATION_SUPPORT;
};


/***/ }),

/***/ "./node_modules/core-js/internals/classof-raw.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/classof-raw.js ***!
  \*******************************************************/
/***/ (function(module) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};


/***/ }),

/***/ "./node_modules/core-js/internals/classof.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/internals/classof.js ***!
  \***************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var TO_STRING_TAG_SUPPORT = __webpack_require__(/*! ../internals/to-string-tag-support */ "./node_modules/core-js/internals/to-string-tag-support.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var classofRaw = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
// ES3 wrong here
var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (error) { /* empty */ }
};

// getting tag from ES6+ `Object.prototype.toString`
module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {
  var O, tag, result;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag
    // builtinTag case
    : CORRECT_ARGUMENTS ? classofRaw(O)
    // ES3 arguments fallback
    : (result = classofRaw(O)) == 'Object' && isCallable(O.callee) ? 'Arguments' : result;
};


/***/ }),

/***/ "./node_modules/core-js/internals/collection-strong.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/collection-strong.js ***!
  \*************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var defineProperty = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f;
var create = __webpack_require__(/*! ../internals/object-create */ "./node_modules/core-js/internals/object-create.js");
var redefineAll = __webpack_require__(/*! ../internals/redefine-all */ "./node_modules/core-js/internals/redefine-all.js");
var bind = __webpack_require__(/*! ../internals/function-bind-context */ "./node_modules/core-js/internals/function-bind-context.js");
var anInstance = __webpack_require__(/*! ../internals/an-instance */ "./node_modules/core-js/internals/an-instance.js");
var iterate = __webpack_require__(/*! ../internals/iterate */ "./node_modules/core-js/internals/iterate.js");
var defineIterator = __webpack_require__(/*! ../internals/define-iterator */ "./node_modules/core-js/internals/define-iterator.js");
var setSpecies = __webpack_require__(/*! ../internals/set-species */ "./node_modules/core-js/internals/set-species.js");
var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var fastKey = __webpack_require__(/*! ../internals/internal-metadata */ "./node_modules/core-js/internals/internal-metadata.js").fastKey;
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js");

var setInternalState = InternalStateModule.set;
var internalStateGetterFor = InternalStateModule.getterFor;

module.exports = {
  getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, CONSTRUCTOR_NAME);
      setInternalState(that, {
        type: CONSTRUCTOR_NAME,
        index: create(null),
        first: undefined,
        last: undefined,
        size: 0
      });
      if (!DESCRIPTORS) that.size = 0;
      if (iterable != undefined) iterate(iterable, that[ADDER], { that: that, AS_ENTRIES: IS_MAP });
    });

    var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

    var define = function (that, key, value) {
      var state = getInternalState(that);
      var entry = getEntry(that, key);
      var previous, index;
      // change existing entry
      if (entry) {
        entry.value = value;
      // create new entry
      } else {
        state.last = entry = {
          index: index = fastKey(key, true),
          key: key,
          value: value,
          previous: previous = state.last,
          next: undefined,
          removed: false
        };
        if (!state.first) state.first = entry;
        if (previous) previous.next = entry;
        if (DESCRIPTORS) state.size++;
        else that.size++;
        // add to index
        if (index !== 'F') state.index[index] = entry;
      } return that;
    };

    var getEntry = function (that, key) {
      var state = getInternalState(that);
      // fast case
      var index = fastKey(key);
      var entry;
      if (index !== 'F') return state.index[index];
      // frozen object case
      for (entry = state.first; entry; entry = entry.next) {
        if (entry.key == key) return entry;
      }
    };

    redefineAll(C.prototype, {
      // `{ Map, Set }.prototype.clear()` methods
      // https://tc39.es/ecma262/#sec-map.prototype.clear
      // https://tc39.es/ecma262/#sec-set.prototype.clear
      clear: function clear() {
        var that = this;
        var state = getInternalState(that);
        var data = state.index;
        var entry = state.first;
        while (entry) {
          entry.removed = true;
          if (entry.previous) entry.previous = entry.previous.next = undefined;
          delete data[entry.index];
          entry = entry.next;
        }
        state.first = state.last = undefined;
        if (DESCRIPTORS) state.size = 0;
        else that.size = 0;
      },
      // `{ Map, Set }.prototype.delete(key)` methods
      // https://tc39.es/ecma262/#sec-map.prototype.delete
      // https://tc39.es/ecma262/#sec-set.prototype.delete
      'delete': function (key) {
        var that = this;
        var state = getInternalState(that);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.next;
          var prev = entry.previous;
          delete state.index[entry.index];
          entry.removed = true;
          if (prev) prev.next = next;
          if (next) next.previous = prev;
          if (state.first == entry) state.first = next;
          if (state.last == entry) state.last = prev;
          if (DESCRIPTORS) state.size--;
          else that.size--;
        } return !!entry;
      },
      // `{ Map, Set }.prototype.forEach(callbackfn, thisArg = undefined)` methods
      // https://tc39.es/ecma262/#sec-map.prototype.foreach
      // https://tc39.es/ecma262/#sec-set.prototype.foreach
      forEach: function forEach(callbackfn /* , that = undefined */) {
        var state = getInternalState(this);
        var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.next : state.first) {
          boundFunction(entry.value, entry.key, this);
          // revert to the last existing entry
          while (entry && entry.removed) entry = entry.previous;
        }
      },
      // `{ Map, Set}.prototype.has(key)` methods
      // https://tc39.es/ecma262/#sec-map.prototype.has
      // https://tc39.es/ecma262/#sec-set.prototype.has
      has: function has(key) {
        return !!getEntry(this, key);
      }
    });

    redefineAll(C.prototype, IS_MAP ? {
      // `Map.prototype.get(key)` method
      // https://tc39.es/ecma262/#sec-map.prototype.get
      get: function get(key) {
        var entry = getEntry(this, key);
        return entry && entry.value;
      },
      // `Map.prototype.set(key, value)` method
      // https://tc39.es/ecma262/#sec-map.prototype.set
      set: function set(key, value) {
        return define(this, key === 0 ? 0 : key, value);
      }
    } : {
      // `Set.prototype.add(value)` method
      // https://tc39.es/ecma262/#sec-set.prototype.add
      add: function add(value) {
        return define(this, value = value === 0 ? 0 : value, value);
      }
    });
    if (DESCRIPTORS) defineProperty(C.prototype, 'size', {
      get: function () {
        return getInternalState(this).size;
      }
    });
    return C;
  },
  setStrong: function (C, CONSTRUCTOR_NAME, IS_MAP) {
    var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';
    var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
    var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME);
    // `{ Map, Set }.prototype.{ keys, values, entries, @@iterator }()` methods
    // https://tc39.es/ecma262/#sec-map.prototype.entries
    // https://tc39.es/ecma262/#sec-map.prototype.keys
    // https://tc39.es/ecma262/#sec-map.prototype.values
    // https://tc39.es/ecma262/#sec-map.prototype-@@iterator
    // https://tc39.es/ecma262/#sec-set.prototype.entries
    // https://tc39.es/ecma262/#sec-set.prototype.keys
    // https://tc39.es/ecma262/#sec-set.prototype.values
    // https://tc39.es/ecma262/#sec-set.prototype-@@iterator
    defineIterator(C, CONSTRUCTOR_NAME, function (iterated, kind) {
      setInternalState(this, {
        type: ITERATOR_NAME,
        target: iterated,
        state: getInternalCollectionState(iterated),
        kind: kind,
        last: undefined
      });
    }, function () {
      var state = getInternalIteratorState(this);
      var kind = state.kind;
      var entry = state.last;
      // revert to the last existing entry
      while (entry && entry.removed) entry = entry.previous;
      // get next entry
      if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
        // or finish the iteration
        state.target = undefined;
        return { value: undefined, done: true };
      }
      // return step by kind
      if (kind == 'keys') return { value: entry.key, done: false };
      if (kind == 'values') return { value: entry.value, done: false };
      return { value: [entry.key, entry.value], done: false };
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // `{ Map, Set }.prototype[@@species]` accessors
    // https://tc39.es/ecma262/#sec-get-map-@@species
    // https://tc39.es/ecma262/#sec-get-set-@@species
    setSpecies(CONSTRUCTOR_NAME);
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/collection.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/collection.js ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var isForced = __webpack_require__(/*! ../internals/is-forced */ "./node_modules/core-js/internals/is-forced.js");
var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");
var InternalMetadataModule = __webpack_require__(/*! ../internals/internal-metadata */ "./node_modules/core-js/internals/internal-metadata.js");
var iterate = __webpack_require__(/*! ../internals/iterate */ "./node_modules/core-js/internals/iterate.js");
var anInstance = __webpack_require__(/*! ../internals/an-instance */ "./node_modules/core-js/internals/an-instance.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var checkCorrectnessOfIteration = __webpack_require__(/*! ../internals/check-correctness-of-iteration */ "./node_modules/core-js/internals/check-correctness-of-iteration.js");
var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "./node_modules/core-js/internals/set-to-string-tag.js");
var inheritIfRequired = __webpack_require__(/*! ../internals/inherit-if-required */ "./node_modules/core-js/internals/inherit-if-required.js");

module.exports = function (CONSTRUCTOR_NAME, wrapper, common) {
  var IS_MAP = CONSTRUCTOR_NAME.indexOf('Map') !== -1;
  var IS_WEAK = CONSTRUCTOR_NAME.indexOf('Weak') !== -1;
  var ADDER = IS_MAP ? 'set' : 'add';
  var NativeConstructor = global[CONSTRUCTOR_NAME];
  var NativePrototype = NativeConstructor && NativeConstructor.prototype;
  var Constructor = NativeConstructor;
  var exported = {};

  var fixMethod = function (KEY) {
    var nativeMethod = NativePrototype[KEY];
    redefine(NativePrototype, KEY,
      KEY == 'add' ? function add(value) {
        nativeMethod.call(this, value === 0 ? 0 : value);
        return this;
      } : KEY == 'delete' ? function (key) {
        return IS_WEAK && !isObject(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);
      } : KEY == 'get' ? function get(key) {
        return IS_WEAK && !isObject(key) ? undefined : nativeMethod.call(this, key === 0 ? 0 : key);
      } : KEY == 'has' ? function has(key) {
        return IS_WEAK && !isObject(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);
      } : function set(key, value) {
        nativeMethod.call(this, key === 0 ? 0 : key, value);
        return this;
      }
    );
  };

  var REPLACE = isForced(
    CONSTRUCTOR_NAME,
    !isCallable(NativeConstructor) || !(IS_WEAK || NativePrototype.forEach && !fails(function () {
      new NativeConstructor().entries().next();
    }))
  );

  if (REPLACE) {
    // create collection constructor
    Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
    InternalMetadataModule.enable();
  } else if (isForced(CONSTRUCTOR_NAME, true)) {
    var instance = new Constructor();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
    // V8 ~ Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    // eslint-disable-next-line no-new -- required for testing
    var ACCEPT_ITERABLES = checkCorrectnessOfIteration(function (iterable) { new NativeConstructor(iterable); });
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new NativeConstructor();
      var index = 5;
      while (index--) $instance[ADDER](index, index);
      return !$instance.has(-0);
    });

    if (!ACCEPT_ITERABLES) {
      Constructor = wrapper(function (dummy, iterable) {
        anInstance(dummy, Constructor, CONSTRUCTOR_NAME);
        var that = inheritIfRequired(new NativeConstructor(), dummy, Constructor);
        if (iterable != undefined) iterate(iterable, that[ADDER], { that: that, AS_ENTRIES: IS_MAP });
        return that;
      });
      Constructor.prototype = NativePrototype;
      NativePrototype.constructor = Constructor;
    }

    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }

    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);

    // weak collections should not contains .clear method
    if (IS_WEAK && NativePrototype.clear) delete NativePrototype.clear;
  }

  exported[CONSTRUCTOR_NAME] = Constructor;
  $({ global: true, forced: Constructor != NativeConstructor }, exported);

  setToStringTag(Constructor, CONSTRUCTOR_NAME);

  if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);

  return Constructor;
};


/***/ }),

/***/ "./node_modules/core-js/internals/copy-constructor-properties.js":
/*!***********************************************************************!*\
  !*** ./node_modules/core-js/internals/copy-constructor-properties.js ***!
  \***********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var ownKeys = __webpack_require__(/*! ../internals/own-keys */ "./node_modules/core-js/internals/own-keys.js");
var getOwnPropertyDescriptorModule = __webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "./node_modules/core-js/internals/object-get-own-property-descriptor.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");

module.exports = function (target, source) {
  var keys = ownKeys(source);
  var defineProperty = definePropertyModule.f;
  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/correct-is-regexp-logic.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/internals/correct-is-regexp-logic.js ***!
  \*******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

var MATCH = wellKnownSymbol('match');

module.exports = function (METHOD_NAME) {
  var regexp = /./;
  try {
    '/./'[METHOD_NAME](regexp);
  } catch (error1) {
    try {
      regexp[MATCH] = false;
      return '/./'[METHOD_NAME](regexp);
    } catch (error2) { /* empty */ }
  } return false;
};


/***/ }),

/***/ "./node_modules/core-js/internals/correct-prototype-getter.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/correct-prototype-getter.js ***!
  \********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

module.exports = !fails(function () {
  function F() { /* empty */ }
  F.prototype.constructor = null;
  // eslint-disable-next-line es/no-object-getprototypeof -- required for testing
  return Object.getPrototypeOf(new F()) !== F.prototype;
});


/***/ }),

/***/ "./node_modules/core-js/internals/create-iterator-constructor.js":
/*!***********************************************************************!*\
  !*** ./node_modules/core-js/internals/create-iterator-constructor.js ***!
  \***********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var IteratorPrototype = __webpack_require__(/*! ../internals/iterators-core */ "./node_modules/core-js/internals/iterators-core.js").IteratorPrototype;
var create = __webpack_require__(/*! ../internals/object-create */ "./node_modules/core-js/internals/object-create.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");
var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "./node_modules/core-js/internals/set-to-string-tag.js");
var Iterators = __webpack_require__(/*! ../internals/iterators */ "./node_modules/core-js/internals/iterators.js");

var returnThis = function () { return this; };

module.exports = function (IteratorConstructor, NAME, next) {
  var TO_STRING_TAG = NAME + ' Iterator';
  IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(1, next) });
  setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
  Iterators[TO_STRING_TAG] = returnThis;
  return IteratorConstructor;
};


/***/ }),

/***/ "./node_modules/core-js/internals/create-non-enumerable-property.js":
/*!**************************************************************************!*\
  !*** ./node_modules/core-js/internals/create-non-enumerable-property.js ***!
  \**************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");

module.exports = DESCRIPTORS ? function (object, key, value) {
  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),

/***/ "./node_modules/core-js/internals/create-property-descriptor.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/internals/create-property-descriptor.js ***!
  \**********************************************************************/
/***/ (function(module) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),

/***/ "./node_modules/core-js/internals/create-property.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/create-property.js ***!
  \***********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var toPropertyKey = __webpack_require__(/*! ../internals/to-property-key */ "./node_modules/core-js/internals/to-property-key.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");

module.exports = function (object, key, value) {
  var propertyKey = toPropertyKey(key);
  if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
  else object[propertyKey] = value;
};


/***/ }),

/***/ "./node_modules/core-js/internals/define-iterator.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/define-iterator.js ***!
  \***********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");
var FunctionName = __webpack_require__(/*! ../internals/function-name */ "./node_modules/core-js/internals/function-name.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var createIteratorConstructor = __webpack_require__(/*! ../internals/create-iterator-constructor */ "./node_modules/core-js/internals/create-iterator-constructor.js");
var getPrototypeOf = __webpack_require__(/*! ../internals/object-get-prototype-of */ "./node_modules/core-js/internals/object-get-prototype-of.js");
var setPrototypeOf = __webpack_require__(/*! ../internals/object-set-prototype-of */ "./node_modules/core-js/internals/object-set-prototype-of.js");
var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "./node_modules/core-js/internals/set-to-string-tag.js");
var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "./node_modules/core-js/internals/create-non-enumerable-property.js");
var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var Iterators = __webpack_require__(/*! ../internals/iterators */ "./node_modules/core-js/internals/iterators.js");
var IteratorsCore = __webpack_require__(/*! ../internals/iterators-core */ "./node_modules/core-js/internals/iterators-core.js");

var PROPER_FUNCTION_NAME = FunctionName.PROPER;
var CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;
var IteratorPrototype = IteratorsCore.IteratorPrototype;
var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
var ITERATOR = wellKnownSymbol('iterator');
var KEYS = 'keys';
var VALUES = 'values';
var ENTRIES = 'entries';

var returnThis = function () { return this; };

module.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
  createIteratorConstructor(IteratorConstructor, NAME, next);

  var getIterationMethod = function (KIND) {
    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];
    switch (KIND) {
      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
    } return function () { return new IteratorConstructor(this); };
  };

  var TO_STRING_TAG = NAME + ' Iterator';
  var INCORRECT_VALUES_NAME = false;
  var IterablePrototype = Iterable.prototype;
  var nativeIterator = IterablePrototype[ITERATOR]
    || IterablePrototype['@@iterator']
    || DEFAULT && IterablePrototype[DEFAULT];
  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
  var CurrentIteratorPrototype, methods, KEY;

  // fix native
  if (anyNativeIterator) {
    CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
    if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
      if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
        if (setPrototypeOf) {
          setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
        } else if (!isCallable(CurrentIteratorPrototype[ITERATOR])) {
          redefine(CurrentIteratorPrototype, ITERATOR, returnThis);
        }
      }
      // Set @@toStringTag to native iterators
      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
      if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
    }
  }

  // fix Array.prototype.{ values, @@iterator }.name in V8 / FF
  if (PROPER_FUNCTION_NAME && DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
    if (!IS_PURE && CONFIGURABLE_FUNCTION_NAME) {
      createNonEnumerableProperty(IterablePrototype, 'name', VALUES);
    } else {
      INCORRECT_VALUES_NAME = true;
      defaultIterator = function values() { return nativeIterator.call(this); };
    }
  }

  // export additional methods
  if (DEFAULT) {
    methods = {
      values: getIterationMethod(VALUES),
      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
      entries: getIterationMethod(ENTRIES)
    };
    if (FORCED) for (KEY in methods) {
      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
        redefine(IterablePrototype, KEY, methods[KEY]);
      }
    } else $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
  }

  // define iterator
  if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
    redefine(IterablePrototype, ITERATOR, defaultIterator, { name: DEFAULT });
  }
  Iterators[NAME] = defaultIterator;

  return methods;
};


/***/ }),

/***/ "./node_modules/core-js/internals/define-well-known-symbol.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/define-well-known-symbol.js ***!
  \********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var path = __webpack_require__(/*! ../internals/path */ "./node_modules/core-js/internals/path.js");
var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var wrappedWellKnownSymbolModule = __webpack_require__(/*! ../internals/well-known-symbol-wrapped */ "./node_modules/core-js/internals/well-known-symbol-wrapped.js");
var defineProperty = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f;

module.exports = function (NAME) {
  var Symbol = path.Symbol || (path.Symbol = {});
  if (!has(Symbol, NAME)) defineProperty(Symbol, NAME, {
    value: wrappedWellKnownSymbolModule.f(NAME)
  });
};


/***/ }),

/***/ "./node_modules/core-js/internals/descriptors.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/descriptors.js ***!
  \*******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

// Detect IE8's incomplete defineProperty implementation
module.exports = !fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
});


/***/ }),

/***/ "./node_modules/core-js/internals/document-create-element.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/internals/document-create-element.js ***!
  \*******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");

var document = global.document;
// typeof document.createElement is 'object' in old IE
var EXISTS = isObject(document) && isObject(document.createElement);

module.exports = function (it) {
  return EXISTS ? document.createElement(it) : {};
};


/***/ }),

/***/ "./node_modules/core-js/internals/dom-iterables.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/dom-iterables.js ***!
  \*********************************************************/
/***/ (function(module) {

// iterable DOM collections
// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
module.exports = {
  CSSRuleList: 0,
  CSSStyleDeclaration: 0,
  CSSValueList: 0,
  ClientRectList: 0,
  DOMRectList: 0,
  DOMStringList: 0,
  DOMTokenList: 1,
  DataTransferItemList: 0,
  FileList: 0,
  HTMLAllCollection: 0,
  HTMLCollection: 0,
  HTMLFormElement: 0,
  HTMLSelectElement: 0,
  MediaList: 0,
  MimeTypeArray: 0,
  NamedNodeMap: 0,
  NodeList: 1,
  PaintRequestList: 0,
  Plugin: 0,
  PluginArray: 0,
  SVGLengthList: 0,
  SVGNumberList: 0,
  SVGPathSegList: 0,
  SVGPointList: 0,
  SVGStringList: 0,
  SVGTransformList: 0,
  SourceBufferList: 0,
  StyleSheetList: 0,
  TextTrackCueList: 0,
  TextTrackList: 0,
  TouchList: 0
};


/***/ }),

/***/ "./node_modules/core-js/internals/dom-token-list-prototype.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/dom-token-list-prototype.js ***!
  \********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

// in old WebKit versions, `element.classList` is not an instance of global `DOMTokenList`
var documentCreateElement = __webpack_require__(/*! ../internals/document-create-element */ "./node_modules/core-js/internals/document-create-element.js");

var classList = documentCreateElement('span').classList;
var DOMTokenListPrototype = classList && classList.constructor && classList.constructor.prototype;

module.exports = DOMTokenListPrototype === Object.prototype ? undefined : DOMTokenListPrototype;


/***/ }),

/***/ "./node_modules/core-js/internals/engine-ff-version.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/engine-ff-version.js ***!
  \*************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var userAgent = __webpack_require__(/*! ../internals/engine-user-agent */ "./node_modules/core-js/internals/engine-user-agent.js");

var firefox = userAgent.match(/firefox\/(\d+)/i);

module.exports = !!firefox && +firefox[1];


/***/ }),

/***/ "./node_modules/core-js/internals/engine-is-browser.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/engine-is-browser.js ***!
  \*************************************************************/
/***/ (function(module) {

module.exports = typeof window == 'object';


/***/ }),

/***/ "./node_modules/core-js/internals/engine-is-ie-or-edge.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/engine-is-ie-or-edge.js ***!
  \****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var UA = __webpack_require__(/*! ../internals/engine-user-agent */ "./node_modules/core-js/internals/engine-user-agent.js");

module.exports = /MSIE|Trident/.test(UA);


/***/ }),

/***/ "./node_modules/core-js/internals/engine-is-ios-pebble.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/engine-is-ios-pebble.js ***!
  \****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var userAgent = __webpack_require__(/*! ../internals/engine-user-agent */ "./node_modules/core-js/internals/engine-user-agent.js");
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");

module.exports = /ipad|iphone|ipod/i.test(userAgent) && global.Pebble !== undefined;


/***/ }),

/***/ "./node_modules/core-js/internals/engine-is-ios.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/engine-is-ios.js ***!
  \*********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var userAgent = __webpack_require__(/*! ../internals/engine-user-agent */ "./node_modules/core-js/internals/engine-user-agent.js");

module.exports = /(?:ipad|iphone|ipod).*applewebkit/i.test(userAgent);


/***/ }),

/***/ "./node_modules/core-js/internals/engine-is-node.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/engine-is-node.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var classof = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");

module.exports = classof(global.process) == 'process';


/***/ }),

/***/ "./node_modules/core-js/internals/engine-is-webos-webkit.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/internals/engine-is-webos-webkit.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var userAgent = __webpack_require__(/*! ../internals/engine-user-agent */ "./node_modules/core-js/internals/engine-user-agent.js");

module.exports = /web0s(?!.*chrome)/i.test(userAgent);


/***/ }),

/***/ "./node_modules/core-js/internals/engine-user-agent.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/engine-user-agent.js ***!
  \*************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");

module.exports = getBuiltIn('navigator', 'userAgent') || '';


/***/ }),

/***/ "./node_modules/core-js/internals/engine-v8-version.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/engine-v8-version.js ***!
  \*************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var userAgent = __webpack_require__(/*! ../internals/engine-user-agent */ "./node_modules/core-js/internals/engine-user-agent.js");

var process = global.process;
var Deno = global.Deno;
var versions = process && process.versions || Deno && Deno.version;
var v8 = versions && versions.v8;
var match, version;

if (v8) {
  match = v8.split('.');
  version = match[0] < 4 ? 1 : match[0] + match[1];
} else if (userAgent) {
  match = userAgent.match(/Edge\/(\d+)/);
  if (!match || match[1] >= 74) {
    match = userAgent.match(/Chrome\/(\d+)/);
    if (match) version = match[1];
  }
}

module.exports = version && +version;


/***/ }),

/***/ "./node_modules/core-js/internals/engine-webkit-version.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/internals/engine-webkit-version.js ***!
  \*****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var userAgent = __webpack_require__(/*! ../internals/engine-user-agent */ "./node_modules/core-js/internals/engine-user-agent.js");

var webkit = userAgent.match(/AppleWebKit\/(\d+)\./);

module.exports = !!webkit && +webkit[1];


/***/ }),

/***/ "./node_modules/core-js/internals/enum-bug-keys.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/enum-bug-keys.js ***!
  \*********************************************************/
/***/ (function(module) {

// IE8- don't enum bug keys
module.exports = [
  'constructor',
  'hasOwnProperty',
  'isPrototypeOf',
  'propertyIsEnumerable',
  'toLocaleString',
  'toString',
  'valueOf'
];


/***/ }),

/***/ "./node_modules/core-js/internals/export.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/internals/export.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var getOwnPropertyDescriptor = __webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "./node_modules/core-js/internals/object-get-own-property-descriptor.js").f;
var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "./node_modules/core-js/internals/create-non-enumerable-property.js");
var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");
var setGlobal = __webpack_require__(/*! ../internals/set-global */ "./node_modules/core-js/internals/set-global.js");
var copyConstructorProperties = __webpack_require__(/*! ../internals/copy-constructor-properties */ "./node_modules/core-js/internals/copy-constructor-properties.js");
var isForced = __webpack_require__(/*! ../internals/is-forced */ "./node_modules/core-js/internals/is-forced.js");

/*
  options.target      - name of the target object
  options.global      - target is the global object
  options.stat        - export as static methods of target
  options.proto       - export as prototype methods of target
  options.real        - real prototype method for the `pure` version
  options.forced      - export even if the native feature is available
  options.bind        - bind methods to the target, required for the `pure` version
  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
  options.sham        - add a flag to not completely full polyfills
  options.enumerable  - export as enumerable property
  options.noTargetGet - prevent calling a getter on target
  options.name        - the .name of the function if it does not match the key
*/
module.exports = function (options, source) {
  var TARGET = options.target;
  var GLOBAL = options.global;
  var STATIC = options.stat;
  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
  if (GLOBAL) {
    target = global;
  } else if (STATIC) {
    target = global[TARGET] || setGlobal(TARGET, {});
  } else {
    target = (global[TARGET] || {}).prototype;
  }
  if (target) for (key in source) {
    sourceProperty = source[key];
    if (options.noTargetGet) {
      descriptor = getOwnPropertyDescriptor(target, key);
      targetProperty = descriptor && descriptor.value;
    } else targetProperty = target[key];
    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
    // contained in target
    if (!FORCED && targetProperty !== undefined) {
      if (typeof sourceProperty === typeof targetProperty) continue;
      copyConstructorProperties(sourceProperty, targetProperty);
    }
    // add a flag to not completely full polyfills
    if (options.sham || (targetProperty && targetProperty.sham)) {
      createNonEnumerableProperty(sourceProperty, 'sham', true);
    }
    // extend global
    redefine(target, key, sourceProperty, options);
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/fails.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/internals/fails.js ***!
  \*************************************************/
/***/ (function(module) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (error) {
    return true;
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js":
/*!******************************************************************************!*\
  !*** ./node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js ***!
  \******************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

// TODO: Remove from `core-js@4` since it's moved to entry points
__webpack_require__(/*! ../modules/es.regexp.exec */ "./node_modules/core-js/modules/es.regexp.exec.js");
var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");
var regexpExec = __webpack_require__(/*! ../internals/regexp-exec */ "./node_modules/core-js/internals/regexp-exec.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "./node_modules/core-js/internals/create-non-enumerable-property.js");

var SPECIES = wellKnownSymbol('species');
var RegExpPrototype = RegExp.prototype;

module.exports = function (KEY, exec, FORCED, SHAM) {
  var SYMBOL = wellKnownSymbol(KEY);

  var DELEGATES_TO_SYMBOL = !fails(function () {
    // String methods call symbol-named RegEp methods
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  });

  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {
    // Symbol-named RegExp methods call .exec
    var execCalled = false;
    var re = /a/;

    if (KEY === 'split') {
      // We can't use real regex here since it causes deoptimization
      // and serious performance degradation in V8
      // https://github.com/zloirock/core-js/issues/306
      re = {};
      // RegExp[@@split] doesn't call the regex's exec method, but first creates
      // a new one. We need to return the patched regex when creating the new one.
      re.constructor = {};
      re.constructor[SPECIES] = function () { return re; };
      re.flags = '';
      re[SYMBOL] = /./[SYMBOL];
    }

    re.exec = function () { execCalled = true; return null; };

    re[SYMBOL]('');
    return !execCalled;
  });

  if (
    !DELEGATES_TO_SYMBOL ||
    !DELEGATES_TO_EXEC ||
    FORCED
  ) {
    var nativeRegExpMethod = /./[SYMBOL];
    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
      var $exec = regexp.exec;
      if ($exec === regexpExec || $exec === RegExpPrototype.exec) {
        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
          // The native String method already delegates to @@method (this
          // polyfilled function), leasing to infinite recursion.
          // We avoid it by directly calling the native @@method method.
          return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
        }
        return { done: true, value: nativeMethod.call(str, regexp, arg2) };
      }
      return { done: false };
    });

    redefine(String.prototype, KEY, methods[0]);
    redefine(RegExpPrototype, SYMBOL, methods[1]);
  }

  if (SHAM) createNonEnumerableProperty(RegExpPrototype[SYMBOL], 'sham', true);
};


/***/ }),

/***/ "./node_modules/core-js/internals/freezing.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/internals/freezing.js ***!
  \****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

module.exports = !fails(function () {
  // eslint-disable-next-line es/no-object-isextensible, es/no-object-preventextensions -- required for testing
  return Object.isExtensible(Object.preventExtensions({}));
});


/***/ }),

/***/ "./node_modules/core-js/internals/function-bind-context.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/internals/function-bind-context.js ***!
  \*****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var aCallable = __webpack_require__(/*! ../internals/a-callable */ "./node_modules/core-js/internals/a-callable.js");

// optional / simple context binding
module.exports = function (fn, that, length) {
  aCallable(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 0: return function () {
      return fn.call(that);
    };
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),

/***/ "./node_modules/core-js/internals/function-name.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/function-name.js ***!
  \*********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");

var FunctionPrototype = Function.prototype;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;

var EXISTS = has(FunctionPrototype, 'name');
// additional protection from minified / mangled / dropped function names
var PROPER = EXISTS && (function something() { /* empty */ }).name === 'something';
var CONFIGURABLE = EXISTS && (!DESCRIPTORS || (DESCRIPTORS && getDescriptor(FunctionPrototype, 'name').configurable));

module.exports = {
  EXISTS: EXISTS,
  PROPER: PROPER,
  CONFIGURABLE: CONFIGURABLE
};


/***/ }),

/***/ "./node_modules/core-js/internals/get-built-in.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/internals/get-built-in.js ***!
  \********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");

var aFunction = function (argument) {
  return isCallable(argument) ? argument : undefined;
};

module.exports = function (namespace, method) {
  return arguments.length < 2 ? aFunction(global[namespace]) : global[namespace] && global[namespace][method];
};


/***/ }),

/***/ "./node_modules/core-js/internals/get-iterator-method.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/internals/get-iterator-method.js ***!
  \***************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var classof = __webpack_require__(/*! ../internals/classof */ "./node_modules/core-js/internals/classof.js");
var getMethod = __webpack_require__(/*! ../internals/get-method */ "./node_modules/core-js/internals/get-method.js");
var Iterators = __webpack_require__(/*! ../internals/iterators */ "./node_modules/core-js/internals/iterators.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

var ITERATOR = wellKnownSymbol('iterator');

module.exports = function (it) {
  if (it != undefined) return getMethod(it, ITERATOR)
    || getMethod(it, '@@iterator')
    || Iterators[classof(it)];
};


/***/ }),

/***/ "./node_modules/core-js/internals/get-iterator.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/internals/get-iterator.js ***!
  \********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var aCallable = __webpack_require__(/*! ../internals/a-callable */ "./node_modules/core-js/internals/a-callable.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var getIteratorMethod = __webpack_require__(/*! ../internals/get-iterator-method */ "./node_modules/core-js/internals/get-iterator-method.js");

module.exports = function (argument, usingIterator) {
  var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;
  if (aCallable(iteratorMethod)) return anObject(iteratorMethod.call(argument));
  throw TypeError(String(argument) + ' is not iterable');
};


/***/ }),

/***/ "./node_modules/core-js/internals/get-method.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/get-method.js ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var aCallable = __webpack_require__(/*! ../internals/a-callable */ "./node_modules/core-js/internals/a-callable.js");

// `GetMethod` abstract operation
// https://tc39.es/ecma262/#sec-getmethod
module.exports = function (V, P) {
  var func = V[P];
  return func == null ? undefined : aCallable(func);
};


/***/ }),

/***/ "./node_modules/core-js/internals/get-substitution.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/internals/get-substitution.js ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");

var floor = Math.floor;
var replace = ''.replace;
var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d{1,2}|<[^>]*>)/g;
var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d{1,2})/g;

// `GetSubstitution` abstract operation
// https://tc39.es/ecma262/#sec-getsubstitution
module.exports = function (matched, str, position, captures, namedCaptures, replacement) {
  var tailPos = position + matched.length;
  var m = captures.length;
  var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
  if (namedCaptures !== undefined) {
    namedCaptures = toObject(namedCaptures);
    symbols = SUBSTITUTION_SYMBOLS;
  }
  return replace.call(replacement, symbols, function (match, ch) {
    var capture;
    switch (ch.charAt(0)) {
      case '$': return '$';
      case '&': return matched;
      case '`': return str.slice(0, position);
      case "'": return str.slice(tailPos);
      case '<':
        capture = namedCaptures[ch.slice(1, -1)];
        break;
      default: // \d\d?
        var n = +ch;
        if (n === 0) return match;
        if (n > m) {
          var f = floor(n / 10);
          if (f === 0) return match;
          if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
          return match;
        }
        capture = captures[n - 1];
    }
    return capture === undefined ? '' : capture;
  });
};


/***/ }),

/***/ "./node_modules/core-js/internals/global.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/internals/global.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var check = function (it) {
  return it && it.Math == Math && it;
};

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
module.exports =
  // eslint-disable-next-line es/no-global-this -- safe
  check(typeof globalThis == 'object' && globalThis) ||
  check(typeof window == 'object' && window) ||
  // eslint-disable-next-line no-restricted-globals -- safe
  check(typeof self == 'object' && self) ||
  check(typeof __webpack_require__.g == 'object' && __webpack_require__.g) ||
  // eslint-disable-next-line no-new-func -- fallback
  (function () { return this; })() || Function('return this')();


/***/ }),

/***/ "./node_modules/core-js/internals/has.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/internals/has.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");

var hasOwnProperty = {}.hasOwnProperty;

module.exports = Object.hasOwn || function hasOwn(it, key) {
  return hasOwnProperty.call(toObject(it), key);
};


/***/ }),

/***/ "./node_modules/core-js/internals/hidden-keys.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/hidden-keys.js ***!
  \*******************************************************/
/***/ (function(module) {

module.exports = {};


/***/ }),

/***/ "./node_modules/core-js/internals/host-report-errors.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/internals/host-report-errors.js ***!
  \**************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");

module.exports = function (a, b) {
  var console = global.console;
  if (console && console.error) {
    arguments.length === 1 ? console.error(a) : console.error(a, b);
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/html.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/internals/html.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");

module.exports = getBuiltIn('document', 'documentElement');


/***/ }),

/***/ "./node_modules/core-js/internals/ie8-dom-define.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/ie8-dom-define.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var createElement = __webpack_require__(/*! ../internals/document-create-element */ "./node_modules/core-js/internals/document-create-element.js");

// Thank's IE8 for his funny defineProperty
module.exports = !DESCRIPTORS && !fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- requied for testing
  return Object.defineProperty(createElement('div'), 'a', {
    get: function () { return 7; }
  }).a != 7;
});


/***/ }),

/***/ "./node_modules/core-js/internals/indexed-object.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/indexed-object.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var classof = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");

var split = ''.split;

// fallback for non-array-like ES3 and non-enumerable old V8 strings
module.exports = fails(function () {
  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
  // eslint-disable-next-line no-prototype-builtins -- safe
  return !Object('z').propertyIsEnumerable(0);
}) ? function (it) {
  return classof(it) == 'String' ? split.call(it, '') : Object(it);
} : Object;


/***/ }),

/***/ "./node_modules/core-js/internals/inherit-if-required.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/internals/inherit-if-required.js ***!
  \***************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var setPrototypeOf = __webpack_require__(/*! ../internals/object-set-prototype-of */ "./node_modules/core-js/internals/object-set-prototype-of.js");

// makes subclassing work correct for wrapped built-ins
module.exports = function ($this, dummy, Wrapper) {
  var NewTarget, NewTargetPrototype;
  if (
    // it can work only with native `setPrototypeOf`
    setPrototypeOf &&
    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
    isCallable(NewTarget = dummy.constructor) &&
    NewTarget !== Wrapper &&
    isObject(NewTargetPrototype = NewTarget.prototype) &&
    NewTargetPrototype !== Wrapper.prototype
  ) setPrototypeOf($this, NewTargetPrototype);
  return $this;
};


/***/ }),

/***/ "./node_modules/core-js/internals/inspect-source.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/inspect-source.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var store = __webpack_require__(/*! ../internals/shared-store */ "./node_modules/core-js/internals/shared-store.js");

var functionToString = Function.toString;

// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper
if (!isCallable(store.inspectSource)) {
  store.inspectSource = function (it) {
    return functionToString.call(it);
  };
}

module.exports = store.inspectSource;


/***/ }),

/***/ "./node_modules/core-js/internals/internal-metadata.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/internal-metadata.js ***!
  \*************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "./node_modules/core-js/internals/hidden-keys.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var defineProperty = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f;
var getOwnPropertyNamesModule = __webpack_require__(/*! ../internals/object-get-own-property-names */ "./node_modules/core-js/internals/object-get-own-property-names.js");
var getOwnPropertyNamesExternalModule = __webpack_require__(/*! ../internals/object-get-own-property-names-external */ "./node_modules/core-js/internals/object-get-own-property-names-external.js");
var uid = __webpack_require__(/*! ../internals/uid */ "./node_modules/core-js/internals/uid.js");
var FREEZING = __webpack_require__(/*! ../internals/freezing */ "./node_modules/core-js/internals/freezing.js");

var REQUIRED = false;
var METADATA = uid('meta');
var id = 0;

// eslint-disable-next-line es/no-object-isextensible -- safe
var isExtensible = Object.isExtensible || function () {
  return true;
};

var setMetadata = function (it) {
  defineProperty(it, METADATA, { value: {
    objectID: 'O' + id++, // object ID
    weakData: {}          // weak collections IDs
  } });
};

var fastKey = function (it, create) {
  // return a primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, METADATA)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMetadata(it);
  // return object ID
  } return it[METADATA].objectID;
};

var getWeakData = function (it, create) {
  if (!has(it, METADATA)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMetadata(it);
  // return the store of weak collections IDs
  } return it[METADATA].weakData;
};

// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZING && REQUIRED && isExtensible(it) && !has(it, METADATA)) setMetadata(it);
  return it;
};

var enable = function () {
  meta.enable = function () { /* empty */ };
  REQUIRED = true;
  var getOwnPropertyNames = getOwnPropertyNamesModule.f;
  var splice = [].splice;
  var test = {};
  test[METADATA] = 1;

  // prevent exposing of metadata key
  if (getOwnPropertyNames(test).length) {
    getOwnPropertyNamesModule.f = function (it) {
      var result = getOwnPropertyNames(it);
      for (var i = 0, length = result.length; i < length; i++) {
        if (result[i] === METADATA) {
          splice.call(result, i, 1);
          break;
        }
      } return result;
    };

    $({ target: 'Object', stat: true, forced: true }, {
      getOwnPropertyNames: getOwnPropertyNamesExternalModule.f
    });
  }
};

var meta = module.exports = {
  enable: enable,
  fastKey: fastKey,
  getWeakData: getWeakData,
  onFreeze: onFreeze
};

hiddenKeys[METADATA] = true;


/***/ }),

/***/ "./node_modules/core-js/internals/internal-state.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/internal-state.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var NATIVE_WEAK_MAP = __webpack_require__(/*! ../internals/native-weak-map */ "./node_modules/core-js/internals/native-weak-map.js");
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "./node_modules/core-js/internals/create-non-enumerable-property.js");
var objectHas = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var shared = __webpack_require__(/*! ../internals/shared-store */ "./node_modules/core-js/internals/shared-store.js");
var sharedKey = __webpack_require__(/*! ../internals/shared-key */ "./node_modules/core-js/internals/shared-key.js");
var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "./node_modules/core-js/internals/hidden-keys.js");

var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
var WeakMap = global.WeakMap;
var set, get, has;

var enforce = function (it) {
  return has(it) ? get(it) : set(it, {});
};

var getterFor = function (TYPE) {
  return function (it) {
    var state;
    if (!isObject(it) || (state = get(it)).type !== TYPE) {
      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
    } return state;
  };
};

if (NATIVE_WEAK_MAP || shared.state) {
  var store = shared.state || (shared.state = new WeakMap());
  var wmget = store.get;
  var wmhas = store.has;
  var wmset = store.set;
  set = function (it, metadata) {
    if (wmhas.call(store, it)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    wmset.call(store, it, metadata);
    return metadata;
  };
  get = function (it) {
    return wmget.call(store, it) || {};
  };
  has = function (it) {
    return wmhas.call(store, it);
  };
} else {
  var STATE = sharedKey('state');
  hiddenKeys[STATE] = true;
  set = function (it, metadata) {
    if (objectHas(it, STATE)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    createNonEnumerableProperty(it, STATE, metadata);
    return metadata;
  };
  get = function (it) {
    return objectHas(it, STATE) ? it[STATE] : {};
  };
  has = function (it) {
    return objectHas(it, STATE);
  };
}

module.exports = {
  set: set,
  get: get,
  has: has,
  enforce: enforce,
  getterFor: getterFor
};


/***/ }),

/***/ "./node_modules/core-js/internals/is-array-iterator-method.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/is-array-iterator-method.js ***!
  \********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var Iterators = __webpack_require__(/*! ../internals/iterators */ "./node_modules/core-js/internals/iterators.js");

var ITERATOR = wellKnownSymbol('iterator');
var ArrayPrototype = Array.prototype;

// check on default Array iterator
module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
};


/***/ }),

/***/ "./node_modules/core-js/internals/is-array.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/internals/is-array.js ***!
  \****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var classof = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");

// `IsArray` abstract operation
// https://tc39.es/ecma262/#sec-isarray
// eslint-disable-next-line es/no-array-isarray -- safe
module.exports = Array.isArray || function isArray(argument) {
  return classof(argument) == 'Array';
};


/***/ }),

/***/ "./node_modules/core-js/internals/is-callable.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/is-callable.js ***!
  \*******************************************************/
/***/ (function(module) {

// `IsCallable` abstract operation
// https://tc39.es/ecma262/#sec-iscallable
module.exports = function (argument) {
  return typeof argument === 'function';
};


/***/ }),

/***/ "./node_modules/core-js/internals/is-constructor.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/is-constructor.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var classof = __webpack_require__(/*! ../internals/classof */ "./node_modules/core-js/internals/classof.js");
var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");
var inspectSource = __webpack_require__(/*! ../internals/inspect-source */ "./node_modules/core-js/internals/inspect-source.js");

var empty = [];
var construct = getBuiltIn('Reflect', 'construct');
var constructorRegExp = /^\s*(?:class|function)\b/;
var exec = constructorRegExp.exec;
var INCORRECT_TO_STRING = !constructorRegExp.exec(function () { /* empty */ });

var isConstructorModern = function (argument) {
  if (!isCallable(argument)) return false;
  try {
    construct(Object, empty, argument);
    return true;
  } catch (error) {
    return false;
  }
};

var isConstructorLegacy = function (argument) {
  if (!isCallable(argument)) return false;
  switch (classof(argument)) {
    case 'AsyncFunction':
    case 'GeneratorFunction':
    case 'AsyncGeneratorFunction': return false;
    // we can't check .prototype since constructors produced by .bind haven't it
  } return INCORRECT_TO_STRING || !!exec.call(constructorRegExp, inspectSource(argument));
};

// `IsConstructor` abstract operation
// https://tc39.es/ecma262/#sec-isconstructor
module.exports = !construct || fails(function () {
  var called;
  return isConstructorModern(isConstructorModern.call)
    || !isConstructorModern(Object)
    || !isConstructorModern(function () { called = true; })
    || called;
}) ? isConstructorLegacy : isConstructorModern;


/***/ }),

/***/ "./node_modules/core-js/internals/is-forced.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/is-forced.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");

var replacement = /#|\.prototype\./;

var isForced = function (feature, detection) {
  var value = data[normalize(feature)];
  return value == POLYFILL ? true
    : value == NATIVE ? false
    : isCallable(detection) ? fails(detection)
    : !!detection;
};

var normalize = isForced.normalize = function (string) {
  return String(string).replace(replacement, '.').toLowerCase();
};

var data = isForced.data = {};
var NATIVE = isForced.NATIVE = 'N';
var POLYFILL = isForced.POLYFILL = 'P';

module.exports = isForced;


/***/ }),

/***/ "./node_modules/core-js/internals/is-object.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/is-object.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : isCallable(it);
};


/***/ }),

/***/ "./node_modules/core-js/internals/is-pure.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/internals/is-pure.js ***!
  \***************************************************/
/***/ (function(module) {

module.exports = false;


/***/ }),

/***/ "./node_modules/core-js/internals/is-regexp.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/is-regexp.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var classof = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

var MATCH = wellKnownSymbol('match');

// `IsRegExp` abstract operation
// https://tc39.es/ecma262/#sec-isregexp
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) == 'RegExp');
};


/***/ }),

/***/ "./node_modules/core-js/internals/is-symbol.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/is-symbol.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");
var USE_SYMBOL_AS_UID = __webpack_require__(/*! ../internals/use-symbol-as-uid */ "./node_modules/core-js/internals/use-symbol-as-uid.js");

module.exports = USE_SYMBOL_AS_UID ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  var $Symbol = getBuiltIn('Symbol');
  return isCallable($Symbol) && Object(it) instanceof $Symbol;
};


/***/ }),

/***/ "./node_modules/core-js/internals/iterate.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/internals/iterate.js ***!
  \***************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var isArrayIteratorMethod = __webpack_require__(/*! ../internals/is-array-iterator-method */ "./node_modules/core-js/internals/is-array-iterator-method.js");
var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
var bind = __webpack_require__(/*! ../internals/function-bind-context */ "./node_modules/core-js/internals/function-bind-context.js");
var getIterator = __webpack_require__(/*! ../internals/get-iterator */ "./node_modules/core-js/internals/get-iterator.js");
var getIteratorMethod = __webpack_require__(/*! ../internals/get-iterator-method */ "./node_modules/core-js/internals/get-iterator-method.js");
var iteratorClose = __webpack_require__(/*! ../internals/iterator-close */ "./node_modules/core-js/internals/iterator-close.js");

var Result = function (stopped, result) {
  this.stopped = stopped;
  this.result = result;
};

module.exports = function (iterable, unboundFunction, options) {
  var that = options && options.that;
  var AS_ENTRIES = !!(options && options.AS_ENTRIES);
  var IS_ITERATOR = !!(options && options.IS_ITERATOR);
  var INTERRUPTED = !!(options && options.INTERRUPTED);
  var fn = bind(unboundFunction, that, 1 + AS_ENTRIES + INTERRUPTED);
  var iterator, iterFn, index, length, result, next, step;

  var stop = function (condition) {
    if (iterator) iteratorClose(iterator, 'normal', condition);
    return new Result(true, condition);
  };

  var callFn = function (value) {
    if (AS_ENTRIES) {
      anObject(value);
      return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
    } return INTERRUPTED ? fn(value, stop) : fn(value);
  };

  if (IS_ITERATOR) {
    iterator = iterable;
  } else {
    iterFn = getIteratorMethod(iterable);
    if (!iterFn) throw TypeError(String(iterable) + ' is not iterable');
    // optimisation for array iterators
    if (isArrayIteratorMethod(iterFn)) {
      for (index = 0, length = toLength(iterable.length); length > index; index++) {
        result = callFn(iterable[index]);
        if (result && result instanceof Result) return result;
      } return new Result(false);
    }
    iterator = getIterator(iterable, iterFn);
  }

  next = iterator.next;
  while (!(step = next.call(iterator)).done) {
    try {
      result = callFn(step.value);
    } catch (error) {
      iteratorClose(iterator, 'throw', error);
    }
    if (typeof result == 'object' && result && result instanceof Result) return result;
  } return new Result(false);
};


/***/ }),

/***/ "./node_modules/core-js/internals/iterator-close.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/iterator-close.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var getMethod = __webpack_require__(/*! ../internals/get-method */ "./node_modules/core-js/internals/get-method.js");

module.exports = function (iterator, kind, value) {
  var innerResult, innerError;
  anObject(iterator);
  try {
    innerResult = getMethod(iterator, 'return');
    if (!innerResult) {
      if (kind === 'throw') throw value;
      return value;
    }
    innerResult = innerResult.call(iterator);
  } catch (error) {
    innerError = true;
    innerResult = error;
  }
  if (kind === 'throw') throw value;
  if (innerError) throw innerResult;
  anObject(innerResult);
  return value;
};


/***/ }),

/***/ "./node_modules/core-js/internals/iterators-core.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/iterators-core.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var create = __webpack_require__(/*! ../internals/object-create */ "./node_modules/core-js/internals/object-create.js");
var getPrototypeOf = __webpack_require__(/*! ../internals/object-get-prototype-of */ "./node_modules/core-js/internals/object-get-prototype-of.js");
var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");

var ITERATOR = wellKnownSymbol('iterator');
var BUGGY_SAFARI_ITERATORS = false;

// `%IteratorPrototype%` object
// https://tc39.es/ecma262/#sec-%iteratorprototype%-object
var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

/* eslint-disable es/no-array-prototype-keys -- safe */
if ([].keys) {
  arrayIterator = [].keys();
  // Safari 8 has buggy iterators w/o `next`
  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
  else {
    PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
  }
}

var NEW_ITERATOR_PROTOTYPE = IteratorPrototype == undefined || fails(function () {
  var test = {};
  // FF44- legacy iterators case
  return IteratorPrototype[ITERATOR].call(test) !== test;
});

if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype = {};
else if (IS_PURE) IteratorPrototype = create(IteratorPrototype);

// `%IteratorPrototype%[@@iterator]()` method
// https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator
if (!isCallable(IteratorPrototype[ITERATOR])) {
  redefine(IteratorPrototype, ITERATOR, function () {
    return this;
  });
}

module.exports = {
  IteratorPrototype: IteratorPrototype,
  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
};


/***/ }),

/***/ "./node_modules/core-js/internals/iterators.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/iterators.js ***!
  \*****************************************************/
/***/ (function(module) {

module.exports = {};


/***/ }),

/***/ "./node_modules/core-js/internals/microtask.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/microtask.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var getOwnPropertyDescriptor = __webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "./node_modules/core-js/internals/object-get-own-property-descriptor.js").f;
var macrotask = __webpack_require__(/*! ../internals/task */ "./node_modules/core-js/internals/task.js").set;
var IS_IOS = __webpack_require__(/*! ../internals/engine-is-ios */ "./node_modules/core-js/internals/engine-is-ios.js");
var IS_IOS_PEBBLE = __webpack_require__(/*! ../internals/engine-is-ios-pebble */ "./node_modules/core-js/internals/engine-is-ios-pebble.js");
var IS_WEBOS_WEBKIT = __webpack_require__(/*! ../internals/engine-is-webos-webkit */ "./node_modules/core-js/internals/engine-is-webos-webkit.js");
var IS_NODE = __webpack_require__(/*! ../internals/engine-is-node */ "./node_modules/core-js/internals/engine-is-node.js");

var MutationObserver = global.MutationObserver || global.WebKitMutationObserver;
var document = global.document;
var process = global.process;
var Promise = global.Promise;
// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
var queueMicrotaskDescriptor = getOwnPropertyDescriptor(global, 'queueMicrotask');
var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;

var flush, head, last, notify, toggle, node, promise, then;

// modern engines have queueMicrotask method
if (!queueMicrotask) {
  flush = function () {
    var parent, fn;
    if (IS_NODE && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (error) {
        if (head) notify();
        else last = undefined;
        throw error;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
  // also except WebOS Webkit https://github.com/zloirock/core-js/issues/898
  if (!IS_IOS && !IS_NODE && !IS_WEBOS_WEBKIT && MutationObserver && document) {
    toggle = true;
    node = document.createTextNode('');
    new MutationObserver(flush).observe(node, { characterData: true });
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (!IS_IOS_PEBBLE && Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    promise = Promise.resolve(undefined);
    // workaround of WebKit ~ iOS Safari 10.1 bug
    promise.constructor = Promise;
    then = promise.then;
    notify = function () {
      then.call(promise, flush);
    };
  // Node.js without promises
  } else if (IS_NODE) {
    notify = function () {
      process.nextTick(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }
}

module.exports = queueMicrotask || function (fn) {
  var task = { fn: fn, next: undefined };
  if (last) last.next = task;
  if (!head) {
    head = task;
    notify();
  } last = task;
};


/***/ }),

/***/ "./node_modules/core-js/internals/native-promise-constructor.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/internals/native-promise-constructor.js ***!
  \**********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");

module.exports = global.Promise;


/***/ }),

/***/ "./node_modules/core-js/internals/native-symbol.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/native-symbol.js ***!
  \*********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/* eslint-disable es/no-symbol -- required for testing */
var V8_VERSION = __webpack_require__(/*! ../internals/engine-v8-version */ "./node_modules/core-js/internals/engine-v8-version.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

// eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing
module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
  var symbol = Symbol();
  // Chrome 38 Symbol has incorrect toString conversion
  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances
  return !String(symbol) || !(Object(symbol) instanceof Symbol) ||
    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
    !Symbol.sham && V8_VERSION && V8_VERSION < 41;
});


/***/ }),

/***/ "./node_modules/core-js/internals/native-weak-map.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/native-weak-map.js ***!
  \***********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var inspectSource = __webpack_require__(/*! ../internals/inspect-source */ "./node_modules/core-js/internals/inspect-source.js");

var WeakMap = global.WeakMap;

module.exports = isCallable(WeakMap) && /native code/.test(inspectSource(WeakMap));


/***/ }),

/***/ "./node_modules/core-js/internals/new-promise-capability.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/internals/new-promise-capability.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var aCallable = __webpack_require__(/*! ../internals/a-callable */ "./node_modules/core-js/internals/a-callable.js");

var PromiseCapability = function (C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aCallable(resolve);
  this.reject = aCallable(reject);
};

// `NewPromiseCapability` abstract operation
// https://tc39.es/ecma262/#sec-newpromisecapability
module.exports.f = function (C) {
  return new PromiseCapability(C);
};


/***/ }),

/***/ "./node_modules/core-js/internals/not-a-regexp.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/internals/not-a-regexp.js ***!
  \********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isRegExp = __webpack_require__(/*! ../internals/is-regexp */ "./node_modules/core-js/internals/is-regexp.js");

module.exports = function (it) {
  if (isRegExp(it)) {
    throw TypeError("The method doesn't accept regular expressions");
  } return it;
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-assign.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/object-assign.js ***!
  \*********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var objectKeys = __webpack_require__(/*! ../internals/object-keys */ "./node_modules/core-js/internals/object-keys.js");
var getOwnPropertySymbolsModule = __webpack_require__(/*! ../internals/object-get-own-property-symbols */ "./node_modules/core-js/internals/object-get-own-property-symbols.js");
var propertyIsEnumerableModule = __webpack_require__(/*! ../internals/object-property-is-enumerable */ "./node_modules/core-js/internals/object-property-is-enumerable.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
var IndexedObject = __webpack_require__(/*! ../internals/indexed-object */ "./node_modules/core-js/internals/indexed-object.js");

// eslint-disable-next-line es/no-object-assign -- safe
var $assign = Object.assign;
// eslint-disable-next-line es/no-object-defineproperty -- required for testing
var defineProperty = Object.defineProperty;

// `Object.assign` method
// https://tc39.es/ecma262/#sec-object.assign
module.exports = !$assign || fails(function () {
  // should have correct order of operations (Edge bug)
  if (DESCRIPTORS && $assign({ b: 1 }, $assign(defineProperty({}, 'a', {
    enumerable: true,
    get: function () {
      defineProperty(this, 'b', {
        value: 3,
        enumerable: false
      });
    }
  }), { b: 2 })).b !== 1) return true;
  // should work with symbols and should have deterministic property order (V8 bug)
  var A = {};
  var B = {};
  // eslint-disable-next-line es/no-symbol -- safe
  var symbol = Symbol();
  var alphabet = 'abcdefghijklmnopqrst';
  A[symbol] = 7;
  alphabet.split('').forEach(function (chr) { B[chr] = chr; });
  return $assign({}, A)[symbol] != 7 || objectKeys($assign({}, B)).join('') != alphabet;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars -- required for `.length`
  var T = toObject(target);
  var argumentsLength = arguments.length;
  var index = 1;
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  var propertyIsEnumerable = propertyIsEnumerableModule.f;
  while (argumentsLength > index) {
    var S = IndexedObject(arguments[index++]);
    var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) {
      key = keys[j++];
      if (!DESCRIPTORS || propertyIsEnumerable.call(S, key)) T[key] = S[key];
    }
  } return T;
} : $assign;


/***/ }),

/***/ "./node_modules/core-js/internals/object-create.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/object-create.js ***!
  \*********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/* global ActiveXObject -- old IE, WSH */
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var defineProperties = __webpack_require__(/*! ../internals/object-define-properties */ "./node_modules/core-js/internals/object-define-properties.js");
var enumBugKeys = __webpack_require__(/*! ../internals/enum-bug-keys */ "./node_modules/core-js/internals/enum-bug-keys.js");
var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "./node_modules/core-js/internals/hidden-keys.js");
var html = __webpack_require__(/*! ../internals/html */ "./node_modules/core-js/internals/html.js");
var documentCreateElement = __webpack_require__(/*! ../internals/document-create-element */ "./node_modules/core-js/internals/document-create-element.js");
var sharedKey = __webpack_require__(/*! ../internals/shared-key */ "./node_modules/core-js/internals/shared-key.js");

var GT = '>';
var LT = '<';
var PROTOTYPE = 'prototype';
var SCRIPT = 'script';
var IE_PROTO = sharedKey('IE_PROTO');

var EmptyConstructor = function () { /* empty */ };

var scriptTag = function (content) {
  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
};

// Create object with fake `null` prototype: use ActiveX Object with cleared prototype
var NullProtoObjectViaActiveX = function (activeXDocument) {
  activeXDocument.write(scriptTag(''));
  activeXDocument.close();
  var temp = activeXDocument.parentWindow.Object;
  activeXDocument = null; // avoid memory leak
  return temp;
};

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var NullProtoObjectViaIFrame = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = documentCreateElement('iframe');
  var JS = 'java' + SCRIPT + ':';
  var iframeDocument;
  iframe.style.display = 'none';
  html.appendChild(iframe);
  // https://github.com/zloirock/core-js/issues/475
  iframe.src = String(JS);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(scriptTag('document.F=Object'));
  iframeDocument.close();
  return iframeDocument.F;
};

// Check for document.domain and active x support
// No need to use active x approach when document.domain is not set
// see https://github.com/es-shims/es5-shim/issues/150
// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
// avoid IE GC bug
var activeXDocument;
var NullProtoObject = function () {
  try {
    activeXDocument = new ActiveXObject('htmlfile');
  } catch (error) { /* ignore */ }
  NullProtoObject = typeof document != 'undefined'
    ? document.domain && activeXDocument
      ? NullProtoObjectViaActiveX(activeXDocument) // old IE
      : NullProtoObjectViaIFrame()
    : NullProtoObjectViaActiveX(activeXDocument); // WSH
  var length = enumBugKeys.length;
  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
  return NullProtoObject();
};

hiddenKeys[IE_PROTO] = true;

// `Object.create` method
// https://tc39.es/ecma262/#sec-object.create
module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    EmptyConstructor[PROTOTYPE] = anObject(O);
    result = new EmptyConstructor();
    EmptyConstructor[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = NullProtoObject();
  return Properties === undefined ? result : defineProperties(result, Properties);
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-define-properties.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/object-define-properties.js ***!
  \********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var objectKeys = __webpack_require__(/*! ../internals/object-keys */ "./node_modules/core-js/internals/object-keys.js");

// `Object.defineProperties` method
// https://tc39.es/ecma262/#sec-object.defineproperties
// eslint-disable-next-line es/no-object-defineproperties -- safe
module.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = objectKeys(Properties);
  var length = keys.length;
  var index = 0;
  var key;
  while (length > index) definePropertyModule.f(O, key = keys[index++], Properties[key]);
  return O;
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-define-property.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/internals/object-define-property.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var IE8_DOM_DEFINE = __webpack_require__(/*! ../internals/ie8-dom-define */ "./node_modules/core-js/internals/ie8-dom-define.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var toPropertyKey = __webpack_require__(/*! ../internals/to-property-key */ "./node_modules/core-js/internals/to-property-key.js");

// eslint-disable-next-line es/no-object-defineproperty -- safe
var $defineProperty = Object.defineProperty;

// `Object.defineProperty` method
// https://tc39.es/ecma262/#sec-object.defineproperty
exports.f = DESCRIPTORS ? $defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPropertyKey(P);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return $defineProperty(O, P, Attributes);
  } catch (error) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-get-own-property-descriptor.js":
/*!******************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-own-property-descriptor.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var propertyIsEnumerableModule = __webpack_require__(/*! ../internals/object-property-is-enumerable */ "./node_modules/core-js/internals/object-property-is-enumerable.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var toPropertyKey = __webpack_require__(/*! ../internals/to-property-key */ "./node_modules/core-js/internals/to-property-key.js");
var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var IE8_DOM_DEFINE = __webpack_require__(/*! ../internals/ie8-dom-define */ "./node_modules/core-js/internals/ie8-dom-define.js");

// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// `Object.getOwnPropertyDescriptor` method
// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
  O = toIndexedObject(O);
  P = toPropertyKey(P);
  if (IE8_DOM_DEFINE) try {
    return $getOwnPropertyDescriptor(O, P);
  } catch (error) { /* empty */ }
  if (has(O, P)) return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-get-own-property-names-external.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-own-property-names-external.js ***!
  \**********************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/* eslint-disable es/no-object-getownpropertynames -- safe */
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var $getOwnPropertyNames = __webpack_require__(/*! ../internals/object-get-own-property-names */ "./node_modules/core-js/internals/object-get-own-property-names.js").f;

var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return $getOwnPropertyNames(it);
  } catch (error) {
    return windowNames.slice();
  }
};

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]'
    ? getWindowNames(it)
    : $getOwnPropertyNames(toIndexedObject(it));
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-get-own-property-names.js":
/*!*************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-own-property-names.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

var internalObjectKeys = __webpack_require__(/*! ../internals/object-keys-internal */ "./node_modules/core-js/internals/object-keys-internal.js");
var enumBugKeys = __webpack_require__(/*! ../internals/enum-bug-keys */ "./node_modules/core-js/internals/enum-bug-keys.js");

var hiddenKeys = enumBugKeys.concat('length', 'prototype');

// `Object.getOwnPropertyNames` method
// https://tc39.es/ecma262/#sec-object.getownpropertynames
// eslint-disable-next-line es/no-object-getownpropertynames -- safe
exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return internalObjectKeys(O, hiddenKeys);
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-get-own-property-symbols.js":
/*!***************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-own-property-symbols.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports) {

// eslint-disable-next-line es/no-object-getownpropertysymbols -- safe
exports.f = Object.getOwnPropertySymbols;


/***/ }),

/***/ "./node_modules/core-js/internals/object-get-prototype-of.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-prototype-of.js ***!
  \*******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
var sharedKey = __webpack_require__(/*! ../internals/shared-key */ "./node_modules/core-js/internals/shared-key.js");
var CORRECT_PROTOTYPE_GETTER = __webpack_require__(/*! ../internals/correct-prototype-getter */ "./node_modules/core-js/internals/correct-prototype-getter.js");

var IE_PROTO = sharedKey('IE_PROTO');
var ObjectPrototype = Object.prototype;

// `Object.getPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.getprototypeof
// eslint-disable-next-line es/no-object-getprototypeof -- safe
module.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function (O) {
  var object = toObject(O);
  if (has(object, IE_PROTO)) return object[IE_PROTO];
  var constructor = object.constructor;
  if (isCallable(constructor) && object instanceof constructor) {
    return constructor.prototype;
  } return object instanceof Object ? ObjectPrototype : null;
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-keys-internal.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/object-keys-internal.js ***!
  \****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var indexOf = __webpack_require__(/*! ../internals/array-includes */ "./node_modules/core-js/internals/array-includes.js").indexOf;
var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "./node_modules/core-js/internals/hidden-keys.js");

module.exports = function (object, names) {
  var O = toIndexedObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~indexOf(result, key) || result.push(key);
  }
  return result;
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-keys.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/object-keys.js ***!
  \*******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var internalObjectKeys = __webpack_require__(/*! ../internals/object-keys-internal */ "./node_modules/core-js/internals/object-keys-internal.js");
var enumBugKeys = __webpack_require__(/*! ../internals/enum-bug-keys */ "./node_modules/core-js/internals/enum-bug-keys.js");

// `Object.keys` method
// https://tc39.es/ecma262/#sec-object.keys
// eslint-disable-next-line es/no-object-keys -- safe
module.exports = Object.keys || function keys(O) {
  return internalObjectKeys(O, enumBugKeys);
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-property-is-enumerable.js":
/*!*************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-property-is-enumerable.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

var $propertyIsEnumerable = {}.propertyIsEnumerable;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Nashorn ~ JDK8 bug
var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);

// `Object.prototype.propertyIsEnumerable` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
  var descriptor = getOwnPropertyDescriptor(this, V);
  return !!descriptor && descriptor.enumerable;
} : $propertyIsEnumerable;


/***/ }),

/***/ "./node_modules/core-js/internals/object-set-prototype-of.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/internals/object-set-prototype-of.js ***!
  \*******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/* eslint-disable no-proto -- safe */
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var aPossiblePrototype = __webpack_require__(/*! ../internals/a-possible-prototype */ "./node_modules/core-js/internals/a-possible-prototype.js");

// `Object.setPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.setprototypeof
// Works with __proto__ only. Old v8 can't work with null proto objects.
// eslint-disable-next-line es/no-object-setprototypeof -- safe
module.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {
  var CORRECT_SETTER = false;
  var test = {};
  var setter;
  try {
    // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
    setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
    setter.call(test, []);
    CORRECT_SETTER = test instanceof Array;
  } catch (error) { /* empty */ }
  return function setPrototypeOf(O, proto) {
    anObject(O);
    aPossiblePrototype(proto);
    if (CORRECT_SETTER) setter.call(O, proto);
    else O.__proto__ = proto;
    return O;
  };
}() : undefined);


/***/ }),

/***/ "./node_modules/core-js/internals/object-to-string.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/internals/object-to-string.js ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var TO_STRING_TAG_SUPPORT = __webpack_require__(/*! ../internals/to-string-tag-support */ "./node_modules/core-js/internals/to-string-tag-support.js");
var classof = __webpack_require__(/*! ../internals/classof */ "./node_modules/core-js/internals/classof.js");

// `Object.prototype.toString` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.tostring
module.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {
  return '[object ' + classof(this) + ']';
};


/***/ }),

/***/ "./node_modules/core-js/internals/ordinary-to-primitive.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/internals/ordinary-to-primitive.js ***!
  \*****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");

// `OrdinaryToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-ordinarytoprimitive
module.exports = function (input, pref) {
  var fn, val;
  if (pref === 'string' && isCallable(fn = input.toString) && !isObject(val = fn.call(input))) return val;
  if (isCallable(fn = input.valueOf) && !isObject(val = fn.call(input))) return val;
  if (pref !== 'string' && isCallable(fn = input.toString) && !isObject(val = fn.call(input))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),

/***/ "./node_modules/core-js/internals/own-keys.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/internals/own-keys.js ***!
  \****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");
var getOwnPropertyNamesModule = __webpack_require__(/*! ../internals/object-get-own-property-names */ "./node_modules/core-js/internals/object-get-own-property-names.js");
var getOwnPropertySymbolsModule = __webpack_require__(/*! ../internals/object-get-own-property-symbols */ "./node_modules/core-js/internals/object-get-own-property-symbols.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");

// all object keys, includes non-enumerable and symbols
module.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
  var keys = getOwnPropertyNamesModule.f(anObject(it));
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
};


/***/ }),

/***/ "./node_modules/core-js/internals/path.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/internals/path.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");

module.exports = global;


/***/ }),

/***/ "./node_modules/core-js/internals/perform.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/internals/perform.js ***!
  \***************************************************/
/***/ (function(module) {

module.exports = function (exec) {
  try {
    return { error: false, value: exec() };
  } catch (error) {
    return { error: true, value: error };
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/promise-resolve.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/promise-resolve.js ***!
  \***********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var newPromiseCapability = __webpack_require__(/*! ../internals/new-promise-capability */ "./node_modules/core-js/internals/new-promise-capability.js");

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};


/***/ }),

/***/ "./node_modules/core-js/internals/redefine-all.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/internals/redefine-all.js ***!
  \********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");

module.exports = function (target, src, options) {
  for (var key in src) redefine(target, key, src[key], options);
  return target;
};


/***/ }),

/***/ "./node_modules/core-js/internals/redefine.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/internals/redefine.js ***!
  \****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "./node_modules/core-js/internals/create-non-enumerable-property.js");
var setGlobal = __webpack_require__(/*! ../internals/set-global */ "./node_modules/core-js/internals/set-global.js");
var inspectSource = __webpack_require__(/*! ../internals/inspect-source */ "./node_modules/core-js/internals/inspect-source.js");
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js");
var CONFIGURABLE_FUNCTION_NAME = __webpack_require__(/*! ../internals/function-name */ "./node_modules/core-js/internals/function-name.js").CONFIGURABLE;

var getInternalState = InternalStateModule.get;
var enforceInternalState = InternalStateModule.enforce;
var TEMPLATE = String(String).split('String');

(module.exports = function (O, key, value, options) {
  var unsafe = options ? !!options.unsafe : false;
  var simple = options ? !!options.enumerable : false;
  var noTargetGet = options ? !!options.noTargetGet : false;
  var name = options && options.name !== undefined ? options.name : key;
  var state;
  if (isCallable(value)) {
    if (String(name).slice(0, 7) === 'Symbol(') {
      name = '[' + String(name).replace(/^Symbol\(([^)]*)\)/, '$1') + ']';
    }
    if (!has(value, 'name') || (CONFIGURABLE_FUNCTION_NAME && value.name !== name)) {
      createNonEnumerableProperty(value, 'name', name);
    }
    state = enforceInternalState(value);
    if (!state.source) {
      state.source = TEMPLATE.join(typeof name == 'string' ? name : '');
    }
  }
  if (O === global) {
    if (simple) O[key] = value;
    else setGlobal(key, value);
    return;
  } else if (!unsafe) {
    delete O[key];
  } else if (!noTargetGet && O[key]) {
    simple = true;
  }
  if (simple) O[key] = value;
  else createNonEnumerableProperty(O, key, value);
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, 'toString', function toString() {
  return isCallable(this) && getInternalState(this).source || inspectSource(this);
});


/***/ }),

/***/ "./node_modules/core-js/internals/regexp-exec-abstract.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/regexp-exec-abstract.js ***!
  \****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var classof = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");
var regexpExec = __webpack_require__(/*! ../internals/regexp-exec */ "./node_modules/core-js/internals/regexp-exec.js");

// `RegExpExec` abstract operation
// https://tc39.es/ecma262/#sec-regexpexec
module.exports = function (R, S) {
  var exec = R.exec;
  if (isCallable(exec)) {
    var result = exec.call(R, S);
    if (result !== null) anObject(result);
    return result;
  }
  if (classof(R) === 'RegExp') return regexpExec.call(R, S);
  throw TypeError('RegExp#exec called on incompatible receiver');
};


/***/ }),

/***/ "./node_modules/core-js/internals/regexp-exec.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/regexp-exec.js ***!
  \*******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

/* eslint-disable regexp/no-empty-capturing-group, regexp/no-empty-group, regexp/no-lazy-ends -- testing */
/* eslint-disable regexp/no-useless-quantifier -- testing */
var toString = __webpack_require__(/*! ../internals/to-string */ "./node_modules/core-js/internals/to-string.js");
var regexpFlags = __webpack_require__(/*! ../internals/regexp-flags */ "./node_modules/core-js/internals/regexp-flags.js");
var stickyHelpers = __webpack_require__(/*! ../internals/regexp-sticky-helpers */ "./node_modules/core-js/internals/regexp-sticky-helpers.js");
var shared = __webpack_require__(/*! ../internals/shared */ "./node_modules/core-js/internals/shared.js");
var create = __webpack_require__(/*! ../internals/object-create */ "./node_modules/core-js/internals/object-create.js");
var getInternalState = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js").get;
var UNSUPPORTED_DOT_ALL = __webpack_require__(/*! ../internals/regexp-unsupported-dot-all */ "./node_modules/core-js/internals/regexp-unsupported-dot-all.js");
var UNSUPPORTED_NCG = __webpack_require__(/*! ../internals/regexp-unsupported-ncg */ "./node_modules/core-js/internals/regexp-unsupported-ncg.js");

var nativeExec = RegExp.prototype.exec;
var nativeReplace = shared('native-string-replace', String.prototype.replace);

var patchedExec = nativeExec;

var UPDATES_LAST_INDEX_WRONG = (function () {
  var re1 = /a/;
  var re2 = /b*/g;
  nativeExec.call(re1, 'a');
  nativeExec.call(re2, 'a');
  return re1.lastIndex !== 0 || re2.lastIndex !== 0;
})();

var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y || stickyHelpers.BROKEN_CARET;

// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y || UNSUPPORTED_DOT_ALL || UNSUPPORTED_NCG;

if (PATCH) {
  // eslint-disable-next-line max-statements -- TODO
  patchedExec = function exec(string) {
    var re = this;
    var state = getInternalState(re);
    var str = toString(string);
    var raw = state.raw;
    var result, reCopy, lastIndex, match, i, object, group;

    if (raw) {
      raw.lastIndex = re.lastIndex;
      result = patchedExec.call(raw, str);
      re.lastIndex = raw.lastIndex;
      return result;
    }

    var groups = state.groups;
    var sticky = UNSUPPORTED_Y && re.sticky;
    var flags = regexpFlags.call(re);
    var source = re.source;
    var charsAdded = 0;
    var strCopy = str;

    if (sticky) {
      flags = flags.replace('y', '');
      if (flags.indexOf('g') === -1) {
        flags += 'g';
      }

      strCopy = str.slice(re.lastIndex);
      // Support anchored sticky behavior.
      if (re.lastIndex > 0 && (!re.multiline || re.multiline && str.charAt(re.lastIndex - 1) !== '\n')) {
        source = '(?: ' + source + ')';
        strCopy = ' ' + strCopy;
        charsAdded++;
      }
      // ^(? + rx + ) is needed, in combination with some str slicing, to
      // simulate the 'y' flag.
      reCopy = new RegExp('^(?:' + source + ')', flags);
    }

    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
    }
    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

    match = nativeExec.call(sticky ? reCopy : re, strCopy);

    if (sticky) {
      if (match) {
        match.input = match.input.slice(charsAdded);
        match[0] = match[0].slice(charsAdded);
        match.index = re.lastIndex;
        re.lastIndex += match[0].length;
      } else re.lastIndex = 0;
    } else if (UPDATES_LAST_INDEX_WRONG && match) {
      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
    }
    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
      nativeReplace.call(match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }

    if (match && groups) {
      match.groups = object = create(null);
      for (i = 0; i < groups.length; i++) {
        group = groups[i];
        object[group[0]] = match[group[1]];
      }
    }

    return match;
  };
}

module.exports = patchedExec;


/***/ }),

/***/ "./node_modules/core-js/internals/regexp-flags.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/internals/regexp-flags.js ***!
  \********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");

// `RegExp.prototype.flags` getter implementation
// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.dotAll) result += 's';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};


/***/ }),

/***/ "./node_modules/core-js/internals/regexp-sticky-helpers.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/internals/regexp-sticky-helpers.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");

// babel-minify and Closure Compiler transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError
var $RegExp = global.RegExp;

exports.UNSUPPORTED_Y = fails(function () {
  var re = $RegExp('a', 'y');
  re.lastIndex = 2;
  return re.exec('abcd') != null;
});

exports.BROKEN_CARET = fails(function () {
  // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
  var re = $RegExp('^r', 'gy');
  re.lastIndex = 2;
  return re.exec('str') != null;
});


/***/ }),

/***/ "./node_modules/core-js/internals/regexp-unsupported-dot-all.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/internals/regexp-unsupported-dot-all.js ***!
  \**********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");

// babel-minify and Closure Compiler transpiles RegExp('.', 's') -> /./s and it causes SyntaxError
var $RegExp = global.RegExp;

module.exports = fails(function () {
  var re = $RegExp('.', 's');
  return !(re.dotAll && re.exec('\n') && re.flags === 's');
});


/***/ }),

/***/ "./node_modules/core-js/internals/regexp-unsupported-ncg.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/internals/regexp-unsupported-ncg.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");

// babel-minify and Closure Compiler transpiles RegExp('(?<a>b)', 'g') -> /(?<a>b)/g and it causes SyntaxError
var $RegExp = global.RegExp;

module.exports = fails(function () {
  var re = $RegExp('(?<a>b)', 'g');
  return re.exec('b').groups.a !== 'b' ||
    'b'.replace(re, '$<a>c') !== 'bc';
});


/***/ }),

/***/ "./node_modules/core-js/internals/require-object-coercible.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/require-object-coercible.js ***!
  \********************************************************************/
/***/ (function(module) {

// `RequireObjectCoercible` abstract operation
// https://tc39.es/ecma262/#sec-requireobjectcoercible
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on " + it);
  return it;
};


/***/ }),

/***/ "./node_modules/core-js/internals/set-global.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/set-global.js ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");

module.exports = function (key, value) {
  try {
    // eslint-disable-next-line es/no-object-defineproperty -- safe
    Object.defineProperty(global, key, { value: value, configurable: true, writable: true });
  } catch (error) {
    global[key] = value;
  } return value;
};


/***/ }),

/***/ "./node_modules/core-js/internals/set-species.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/set-species.js ***!
  \*******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");

var SPECIES = wellKnownSymbol('species');

module.exports = function (CONSTRUCTOR_NAME) {
  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
  var defineProperty = definePropertyModule.f;

  if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {
    defineProperty(Constructor, SPECIES, {
      configurable: true,
      get: function () { return this; }
    });
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/set-to-string-tag.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/set-to-string-tag.js ***!
  \*************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var defineProperty = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f;
var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

var TO_STRING_TAG = wellKnownSymbol('toStringTag');

module.exports = function (it, TAG, STATIC) {
  if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {
    defineProperty(it, TO_STRING_TAG, { configurable: true, value: TAG });
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/shared-key.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/shared-key.js ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var shared = __webpack_require__(/*! ../internals/shared */ "./node_modules/core-js/internals/shared.js");
var uid = __webpack_require__(/*! ../internals/uid */ "./node_modules/core-js/internals/uid.js");

var keys = shared('keys');

module.exports = function (key) {
  return keys[key] || (keys[key] = uid(key));
};


/***/ }),

/***/ "./node_modules/core-js/internals/shared-store.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/internals/shared-store.js ***!
  \********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var setGlobal = __webpack_require__(/*! ../internals/set-global */ "./node_modules/core-js/internals/set-global.js");

var SHARED = '__core-js_shared__';
var store = global[SHARED] || setGlobal(SHARED, {});

module.exports = store;


/***/ }),

/***/ "./node_modules/core-js/internals/shared.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/internals/shared.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");
var store = __webpack_require__(/*! ../internals/shared-store */ "./node_modules/core-js/internals/shared-store.js");

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: '3.18.1',
  mode: IS_PURE ? 'pure' : 'global',
  copyright: '© 2021 Denis Pushkarev (zloirock.ru)'
});


/***/ }),

/***/ "./node_modules/core-js/internals/species-constructor.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/internals/species-constructor.js ***!
  \***************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var aConstructor = __webpack_require__(/*! ../internals/a-constructor */ "./node_modules/core-js/internals/a-constructor.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

var SPECIES = wellKnownSymbol('species');

// `SpeciesConstructor` abstract operation
// https://tc39.es/ecma262/#sec-speciesconstructor
module.exports = function (O, defaultConstructor) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? defaultConstructor : aConstructor(S);
};


/***/ }),

/***/ "./node_modules/core-js/internals/string-multibyte.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/internals/string-multibyte.js ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var toInteger = __webpack_require__(/*! ../internals/to-integer */ "./node_modules/core-js/internals/to-integer.js");
var toString = __webpack_require__(/*! ../internals/to-string */ "./node_modules/core-js/internals/to-string.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");

// `String.prototype.codePointAt` methods implementation
var createMethod = function (CONVERT_TO_STRING) {
  return function ($this, pos) {
    var S = toString(requireObjectCoercible($this));
    var position = toInteger(pos);
    var size = S.length;
    var first, second;
    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
    first = S.charCodeAt(position);
    return first < 0xD800 || first > 0xDBFF || position + 1 === size
      || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF
        ? CONVERT_TO_STRING ? S.charAt(position) : first
        : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
  };
};

module.exports = {
  // `String.prototype.codePointAt` method
  // https://tc39.es/ecma262/#sec-string.prototype.codepointat
  codeAt: createMethod(false),
  // `String.prototype.at` method
  // https://github.com/mathiasbynens/String.prototype.at
  charAt: createMethod(true)
};


/***/ }),

/***/ "./node_modules/core-js/internals/string-repeat.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/string-repeat.js ***!
  \*********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var toInteger = __webpack_require__(/*! ../internals/to-integer */ "./node_modules/core-js/internals/to-integer.js");
var toString = __webpack_require__(/*! ../internals/to-string */ "./node_modules/core-js/internals/to-string.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");

// `String.prototype.repeat` method implementation
// https://tc39.es/ecma262/#sec-string.prototype.repeat
module.exports = function repeat(count) {
  var str = toString(requireObjectCoercible(this));
  var result = '';
  var n = toInteger(count);
  if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');
  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;
  return result;
};


/***/ }),

/***/ "./node_modules/core-js/internals/string-trim-forced.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/internals/string-trim-forced.js ***!
  \**************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var PROPER_FUNCTION_NAME = __webpack_require__(/*! ../internals/function-name */ "./node_modules/core-js/internals/function-name.js").PROPER;
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var whitespaces = __webpack_require__(/*! ../internals/whitespaces */ "./node_modules/core-js/internals/whitespaces.js");

var non = '\u200B\u0085\u180E';

// check that a method works with the correct list
// of whitespaces and has a correct name
module.exports = function (METHOD_NAME) {
  return fails(function () {
    return !!whitespaces[METHOD_NAME]()
      || non[METHOD_NAME]() !== non
      || (PROPER_FUNCTION_NAME && whitespaces[METHOD_NAME].name !== METHOD_NAME);
  });
};


/***/ }),

/***/ "./node_modules/core-js/internals/string-trim.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/string-trim.js ***!
  \*******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");
var toString = __webpack_require__(/*! ../internals/to-string */ "./node_modules/core-js/internals/to-string.js");
var whitespaces = __webpack_require__(/*! ../internals/whitespaces */ "./node_modules/core-js/internals/whitespaces.js");

var whitespace = '[' + whitespaces + ']';
var ltrim = RegExp('^' + whitespace + whitespace + '*');
var rtrim = RegExp(whitespace + whitespace + '*$');

// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
var createMethod = function (TYPE) {
  return function ($this) {
    var string = toString(requireObjectCoercible($this));
    if (TYPE & 1) string = string.replace(ltrim, '');
    if (TYPE & 2) string = string.replace(rtrim, '');
    return string;
  };
};

module.exports = {
  // `String.prototype.{ trimLeft, trimStart }` methods
  // https://tc39.es/ecma262/#sec-string.prototype.trimstart
  start: createMethod(1),
  // `String.prototype.{ trimRight, trimEnd }` methods
  // https://tc39.es/ecma262/#sec-string.prototype.trimend
  end: createMethod(2),
  // `String.prototype.trim` method
  // https://tc39.es/ecma262/#sec-string.prototype.trim
  trim: createMethod(3)
};


/***/ }),

/***/ "./node_modules/core-js/internals/task.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/internals/task.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var bind = __webpack_require__(/*! ../internals/function-bind-context */ "./node_modules/core-js/internals/function-bind-context.js");
var html = __webpack_require__(/*! ../internals/html */ "./node_modules/core-js/internals/html.js");
var createElement = __webpack_require__(/*! ../internals/document-create-element */ "./node_modules/core-js/internals/document-create-element.js");
var IS_IOS = __webpack_require__(/*! ../internals/engine-is-ios */ "./node_modules/core-js/internals/engine-is-ios.js");
var IS_NODE = __webpack_require__(/*! ../internals/engine-is-node */ "./node_modules/core-js/internals/engine-is-node.js");

var set = global.setImmediate;
var clear = global.clearImmediate;
var process = global.process;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var location, defer, channel, port;

try {
  // Deno throws a ReferenceError on `location` access without `--location` flag
  location = global.location;
} catch (error) { /* empty */ }

var run = function (id) {
  // eslint-disable-next-line no-prototype-builtins -- safe
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};

var runner = function (id) {
  return function () {
    run(id);
  };
};

var listener = function (event) {
  run(event.data);
};

var post = function (id) {
  // old engines have not location.origin
  global.postMessage(String(id), location.protocol + '//' + location.host);
};

// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!set || !clear) {
  set = function setImmediate(fn) {
    var args = [];
    var argumentsLength = arguments.length;
    var i = 1;
    while (argumentsLength > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func -- spec requirement
      (isCallable(fn) ? fn : Function(fn)).apply(undefined, args);
    };
    defer(counter);
    return counter;
  };
  clear = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (IS_NODE) {
    defer = function (id) {
      process.nextTick(runner(id));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(runner(id));
    };
  // Browsers with MessageChannel, includes WebWorkers
  // except iOS - https://github.com/zloirock/core-js/issues/624
  } else if (MessageChannel && !IS_IOS) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = bind(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (
    global.addEventListener &&
    isCallable(global.postMessage) &&
    !global.importScripts &&
    location && location.protocol !== 'file:' &&
    !fails(post)
  ) {
    defer = post;
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in createElement('script')) {
    defer = function (id) {
      html.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(runner(id), 0);
    };
  }
}

module.exports = {
  set: set,
  clear: clear
};


/***/ }),

/***/ "./node_modules/core-js/internals/this-number-value.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/this-number-value.js ***!
  \*************************************************************/
/***/ (function(module) {

var valueOf = 1.0.valueOf;

// `thisNumberValue` abstract operation
// https://tc39.es/ecma262/#sec-thisnumbervalue
module.exports = function (value) {
  return valueOf.call(value);
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-absolute-index.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/to-absolute-index.js ***!
  \*************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var toInteger = __webpack_require__(/*! ../internals/to-integer */ "./node_modules/core-js/internals/to-integer.js");

var max = Math.max;
var min = Math.min;

// Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
module.exports = function (index, length) {
  var integer = toInteger(index);
  return integer < 0 ? max(integer + length, 0) : min(integer, length);
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-indexed-object.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/to-indexed-object.js ***!
  \*************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

// toObject with fallback for non-array-like ES3 strings
var IndexedObject = __webpack_require__(/*! ../internals/indexed-object */ "./node_modules/core-js/internals/indexed-object.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");

module.exports = function (it) {
  return IndexedObject(requireObjectCoercible(it));
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-integer.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/to-integer.js ***!
  \******************************************************/
/***/ (function(module) {

var ceil = Math.ceil;
var floor = Math.floor;

// `ToInteger` abstract operation
// https://tc39.es/ecma262/#sec-tointeger
module.exports = function (argument) {
  return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-length.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/to-length.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var toInteger = __webpack_require__(/*! ../internals/to-integer */ "./node_modules/core-js/internals/to-integer.js");

var min = Math.min;

// `ToLength` abstract operation
// https://tc39.es/ecma262/#sec-tolength
module.exports = function (argument) {
  return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-object.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/to-object.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");

// `ToObject` abstract operation
// https://tc39.es/ecma262/#sec-toobject
module.exports = function (argument) {
  return Object(requireObjectCoercible(argument));
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-primitive.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/internals/to-primitive.js ***!
  \********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var isSymbol = __webpack_require__(/*! ../internals/is-symbol */ "./node_modules/core-js/internals/is-symbol.js");
var getMethod = __webpack_require__(/*! ../internals/get-method */ "./node_modules/core-js/internals/get-method.js");
var ordinaryToPrimitive = __webpack_require__(/*! ../internals/ordinary-to-primitive */ "./node_modules/core-js/internals/ordinary-to-primitive.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');

// `ToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-toprimitive
module.exports = function (input, pref) {
  if (!isObject(input) || isSymbol(input)) return input;
  var exoticToPrim = getMethod(input, TO_PRIMITIVE);
  var result;
  if (exoticToPrim) {
    if (pref === undefined) pref = 'default';
    result = exoticToPrim.call(input, pref);
    if (!isObject(result) || isSymbol(result)) return result;
    throw TypeError("Can't convert object to primitive value");
  }
  if (pref === undefined) pref = 'number';
  return ordinaryToPrimitive(input, pref);
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-property-key.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/to-property-key.js ***!
  \***********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var toPrimitive = __webpack_require__(/*! ../internals/to-primitive */ "./node_modules/core-js/internals/to-primitive.js");
var isSymbol = __webpack_require__(/*! ../internals/is-symbol */ "./node_modules/core-js/internals/is-symbol.js");

// `ToPropertyKey` abstract operation
// https://tc39.es/ecma262/#sec-topropertykey
module.exports = function (argument) {
  var key = toPrimitive(argument, 'string');
  return isSymbol(key) ? key : String(key);
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-string-tag-support.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/internals/to-string-tag-support.js ***!
  \*****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var test = {};

test[TO_STRING_TAG] = 'z';

module.exports = String(test) === '[object z]';


/***/ }),

/***/ "./node_modules/core-js/internals/to-string.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/to-string.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var classof = __webpack_require__(/*! ../internals/classof */ "./node_modules/core-js/internals/classof.js");

module.exports = function (argument) {
  if (classof(argument) === 'Symbol') throw TypeError('Cannot convert a Symbol value to a string');
  return String(argument);
};


/***/ }),

/***/ "./node_modules/core-js/internals/try-to-string.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/try-to-string.js ***!
  \*********************************************************/
/***/ (function(module) {

module.exports = function (argument) {
  try {
    return String(argument);
  } catch (error) {
    return 'Object';
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/uid.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/internals/uid.js ***!
  \***********************************************/
/***/ (function(module) {

var id = 0;
var postfix = Math.random();

module.exports = function (key) {
  return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);
};


/***/ }),

/***/ "./node_modules/core-js/internals/use-symbol-as-uid.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/use-symbol-as-uid.js ***!
  \*************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/* eslint-disable es/no-symbol -- required for testing */
var NATIVE_SYMBOL = __webpack_require__(/*! ../internals/native-symbol */ "./node_modules/core-js/internals/native-symbol.js");

module.exports = NATIVE_SYMBOL
  && !Symbol.sham
  && typeof Symbol.iterator == 'symbol';


/***/ }),

/***/ "./node_modules/core-js/internals/well-known-symbol-wrapped.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/internals/well-known-symbol-wrapped.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

exports.f = wellKnownSymbol;


/***/ }),

/***/ "./node_modules/core-js/internals/well-known-symbol.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/well-known-symbol.js ***!
  \*************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var shared = __webpack_require__(/*! ../internals/shared */ "./node_modules/core-js/internals/shared.js");
var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var uid = __webpack_require__(/*! ../internals/uid */ "./node_modules/core-js/internals/uid.js");
var NATIVE_SYMBOL = __webpack_require__(/*! ../internals/native-symbol */ "./node_modules/core-js/internals/native-symbol.js");
var USE_SYMBOL_AS_UID = __webpack_require__(/*! ../internals/use-symbol-as-uid */ "./node_modules/core-js/internals/use-symbol-as-uid.js");

var WellKnownSymbolsStore = shared('wks');
var Symbol = global.Symbol;
var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol : Symbol && Symbol.withoutSetter || uid;

module.exports = function (name) {
  if (!has(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == 'string')) {
    if (NATIVE_SYMBOL && has(Symbol, name)) {
      WellKnownSymbolsStore[name] = Symbol[name];
    } else {
      WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);
    }
  } return WellKnownSymbolsStore[name];
};


/***/ }),

/***/ "./node_modules/core-js/internals/whitespaces.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/whitespaces.js ***!
  \*******************************************************/
/***/ (function(module) {

// a string of all valid unicode whitespaces
module.exports = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002' +
  '\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.concat.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.concat.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var isArray = __webpack_require__(/*! ../internals/is-array */ "./node_modules/core-js/internals/is-array.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
var createProperty = __webpack_require__(/*! ../internals/create-property */ "./node_modules/core-js/internals/create-property.js");
var arraySpeciesCreate = __webpack_require__(/*! ../internals/array-species-create */ "./node_modules/core-js/internals/array-species-create.js");
var arrayMethodHasSpeciesSupport = __webpack_require__(/*! ../internals/array-method-has-species-support */ "./node_modules/core-js/internals/array-method-has-species-support.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var V8_VERSION = __webpack_require__(/*! ../internals/engine-v8-version */ "./node_modules/core-js/internals/engine-v8-version.js");

var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');
var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';

// We can't use this feature detection in V8 since it causes
// deoptimization and serious performance degradation
// https://github.com/zloirock/core-js/issues/679
var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function () {
  var array = [];
  array[IS_CONCAT_SPREADABLE] = false;
  return array.concat()[0] !== array;
});

var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');

var isConcatSpreadable = function (O) {
  if (!isObject(O)) return false;
  var spreadable = O[IS_CONCAT_SPREADABLE];
  return spreadable !== undefined ? !!spreadable : isArray(O);
};

var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;

// `Array.prototype.concat` method
// https://tc39.es/ecma262/#sec-array.prototype.concat
// with adding support of @@isConcatSpreadable and @@species
$({ target: 'Array', proto: true, forced: FORCED }, {
  // eslint-disable-next-line no-unused-vars -- required for `.length`
  concat: function concat(arg) {
    var O = toObject(this);
    var A = arraySpeciesCreate(O, 0);
    var n = 0;
    var i, k, length, len, E;
    for (i = -1, length = arguments.length; i < length; i++) {
      E = i === -1 ? O : arguments[i];
      if (isConcatSpreadable(E)) {
        len = toLength(E.length);
        if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
        for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);
      } else {
        if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
        createProperty(A, n++, E);
      }
    }
    A.length = n;
    return A;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.fill.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.fill.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var fill = __webpack_require__(/*! ../internals/array-fill */ "./node_modules/core-js/internals/array-fill.js");
var addToUnscopables = __webpack_require__(/*! ../internals/add-to-unscopables */ "./node_modules/core-js/internals/add-to-unscopables.js");

// `Array.prototype.fill` method
// https://tc39.es/ecma262/#sec-array.prototype.fill
$({ target: 'Array', proto: true }, {
  fill: fill
});

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('fill');


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.filter.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.filter.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var $filter = __webpack_require__(/*! ../internals/array-iteration */ "./node_modules/core-js/internals/array-iteration.js").filter;
var arrayMethodHasSpeciesSupport = __webpack_require__(/*! ../internals/array-method-has-species-support */ "./node_modules/core-js/internals/array-method-has-species-support.js");

var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('filter');

// `Array.prototype.filter` method
// https://tc39.es/ecma262/#sec-array.prototype.filter
// with adding support of @@species
$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT }, {
  filter: function filter(callbackfn /* , thisArg */) {
    return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.find-index.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.find-index.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var $findIndex = __webpack_require__(/*! ../internals/array-iteration */ "./node_modules/core-js/internals/array-iteration.js").findIndex;
var addToUnscopables = __webpack_require__(/*! ../internals/add-to-unscopables */ "./node_modules/core-js/internals/add-to-unscopables.js");

var FIND_INDEX = 'findIndex';
var SKIPS_HOLES = true;

// Shouldn't skip holes
if (FIND_INDEX in []) Array(1)[FIND_INDEX](function () { SKIPS_HOLES = false; });

// `Array.prototype.findIndex` method
// https://tc39.es/ecma262/#sec-array.prototype.findindex
$({ target: 'Array', proto: true, forced: SKIPS_HOLES }, {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return $findIndex(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables(FIND_INDEX);


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.from.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.from.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var from = __webpack_require__(/*! ../internals/array-from */ "./node_modules/core-js/internals/array-from.js");
var checkCorrectnessOfIteration = __webpack_require__(/*! ../internals/check-correctness-of-iteration */ "./node_modules/core-js/internals/check-correctness-of-iteration.js");

var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function (iterable) {
  // eslint-disable-next-line es/no-array-from -- required for testing
  Array.from(iterable);
});

// `Array.from` method
// https://tc39.es/ecma262/#sec-array.from
$({ target: 'Array', stat: true, forced: INCORRECT_ITERATION }, {
  from: from
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.includes.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.includes.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var $includes = __webpack_require__(/*! ../internals/array-includes */ "./node_modules/core-js/internals/array-includes.js").includes;
var addToUnscopables = __webpack_require__(/*! ../internals/add-to-unscopables */ "./node_modules/core-js/internals/add-to-unscopables.js");

// `Array.prototype.includes` method
// https://tc39.es/ecma262/#sec-array.prototype.includes
$({ target: 'Array', proto: true }, {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('includes');


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.iterator.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.iterator.js ***!
  \***********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var addToUnscopables = __webpack_require__(/*! ../internals/add-to-unscopables */ "./node_modules/core-js/internals/add-to-unscopables.js");
var Iterators = __webpack_require__(/*! ../internals/iterators */ "./node_modules/core-js/internals/iterators.js");
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js");
var defineIterator = __webpack_require__(/*! ../internals/define-iterator */ "./node_modules/core-js/internals/define-iterator.js");

var ARRAY_ITERATOR = 'Array Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);

// `Array.prototype.entries` method
// https://tc39.es/ecma262/#sec-array.prototype.entries
// `Array.prototype.keys` method
// https://tc39.es/ecma262/#sec-array.prototype.keys
// `Array.prototype.values` method
// https://tc39.es/ecma262/#sec-array.prototype.values
// `Array.prototype[@@iterator]` method
// https://tc39.es/ecma262/#sec-array.prototype-@@iterator
// `CreateArrayIterator` internal method
// https://tc39.es/ecma262/#sec-createarrayiterator
module.exports = defineIterator(Array, 'Array', function (iterated, kind) {
  setInternalState(this, {
    type: ARRAY_ITERATOR,
    target: toIndexedObject(iterated), // target
    index: 0,                          // next index
    kind: kind                         // kind
  });
// `%ArrayIteratorPrototype%.next` method
// https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next
}, function () {
  var state = getInternalState(this);
  var target = state.target;
  var kind = state.kind;
  var index = state.index++;
  if (!target || index >= target.length) {
    state.target = undefined;
    return { value: undefined, done: true };
  }
  if (kind == 'keys') return { value: index, done: false };
  if (kind == 'values') return { value: target[index], done: false };
  return { value: [index, target[index]], done: false };
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values%
// https://tc39.es/ecma262/#sec-createunmappedargumentsobject
// https://tc39.es/ecma262/#sec-createmappedargumentsobject
Iterators.Arguments = Iterators.Array;

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.join.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.join.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var IndexedObject = __webpack_require__(/*! ../internals/indexed-object */ "./node_modules/core-js/internals/indexed-object.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var arrayMethodIsStrict = __webpack_require__(/*! ../internals/array-method-is-strict */ "./node_modules/core-js/internals/array-method-is-strict.js");

var nativeJoin = [].join;

var ES3_STRINGS = IndexedObject != Object;
var STRICT_METHOD = arrayMethodIsStrict('join', ',');

// `Array.prototype.join` method
// https://tc39.es/ecma262/#sec-array.prototype.join
$({ target: 'Array', proto: true, forced: ES3_STRINGS || !STRICT_METHOD }, {
  join: function join(separator) {
    return nativeJoin.call(toIndexedObject(this), separator === undefined ? ',' : separator);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.map.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.map.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var $map = __webpack_require__(/*! ../internals/array-iteration */ "./node_modules/core-js/internals/array-iteration.js").map;
var arrayMethodHasSpeciesSupport = __webpack_require__(/*! ../internals/array-method-has-species-support */ "./node_modules/core-js/internals/array-method-has-species-support.js");

var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('map');

// `Array.prototype.map` method
// https://tc39.es/ecma262/#sec-array.prototype.map
// with adding support of @@species
$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT }, {
  map: function map(callbackfn /* , thisArg */) {
    return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.slice.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.slice.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var isArray = __webpack_require__(/*! ../internals/is-array */ "./node_modules/core-js/internals/is-array.js");
var isConstructor = __webpack_require__(/*! ../internals/is-constructor */ "./node_modules/core-js/internals/is-constructor.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var toAbsoluteIndex = __webpack_require__(/*! ../internals/to-absolute-index */ "./node_modules/core-js/internals/to-absolute-index.js");
var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var createProperty = __webpack_require__(/*! ../internals/create-property */ "./node_modules/core-js/internals/create-property.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var arrayMethodHasSpeciesSupport = __webpack_require__(/*! ../internals/array-method-has-species-support */ "./node_modules/core-js/internals/array-method-has-species-support.js");

var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('slice');

var SPECIES = wellKnownSymbol('species');
var nativeSlice = [].slice;
var max = Math.max;

// `Array.prototype.slice` method
// https://tc39.es/ecma262/#sec-array.prototype.slice
// fallback for not array-like ES3 strings and DOM objects
$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT }, {
  slice: function slice(start, end) {
    var O = toIndexedObject(this);
    var length = toLength(O.length);
    var k = toAbsoluteIndex(start, length);
    var fin = toAbsoluteIndex(end === undefined ? length : end, length);
    // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
    var Constructor, result, n;
    if (isArray(O)) {
      Constructor = O.constructor;
      // cross-realm fallback
      if (isConstructor(Constructor) && (Constructor === Array || isArray(Constructor.prototype))) {
        Constructor = undefined;
      } else if (isObject(Constructor)) {
        Constructor = Constructor[SPECIES];
        if (Constructor === null) Constructor = undefined;
      }
      if (Constructor === Array || Constructor === undefined) {
        return nativeSlice.call(O, k, fin);
      }
    }
    result = new (Constructor === undefined ? Array : Constructor)(max(fin - k, 0));
    for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);
    result.length = n;
    return result;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.sort.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.sort.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var aCallable = __webpack_require__(/*! ../internals/a-callable */ "./node_modules/core-js/internals/a-callable.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
var toString = __webpack_require__(/*! ../internals/to-string */ "./node_modules/core-js/internals/to-string.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var internalSort = __webpack_require__(/*! ../internals/array-sort */ "./node_modules/core-js/internals/array-sort.js");
var arrayMethodIsStrict = __webpack_require__(/*! ../internals/array-method-is-strict */ "./node_modules/core-js/internals/array-method-is-strict.js");
var FF = __webpack_require__(/*! ../internals/engine-ff-version */ "./node_modules/core-js/internals/engine-ff-version.js");
var IE_OR_EDGE = __webpack_require__(/*! ../internals/engine-is-ie-or-edge */ "./node_modules/core-js/internals/engine-is-ie-or-edge.js");
var V8 = __webpack_require__(/*! ../internals/engine-v8-version */ "./node_modules/core-js/internals/engine-v8-version.js");
var WEBKIT = __webpack_require__(/*! ../internals/engine-webkit-version */ "./node_modules/core-js/internals/engine-webkit-version.js");

var test = [];
var nativeSort = test.sort;

// IE8-
var FAILS_ON_UNDEFINED = fails(function () {
  test.sort(undefined);
});
// V8 bug
var FAILS_ON_NULL = fails(function () {
  test.sort(null);
});
// Old WebKit
var STRICT_METHOD = arrayMethodIsStrict('sort');

var STABLE_SORT = !fails(function () {
  // feature detection can be too slow, so check engines versions
  if (V8) return V8 < 70;
  if (FF && FF > 3) return;
  if (IE_OR_EDGE) return true;
  if (WEBKIT) return WEBKIT < 603;

  var result = '';
  var code, chr, value, index;

  // generate an array with more 512 elements (Chakra and old V8 fails only in this case)
  for (code = 65; code < 76; code++) {
    chr = String.fromCharCode(code);

    switch (code) {
      case 66: case 69: case 70: case 72: value = 3; break;
      case 68: case 71: value = 4; break;
      default: value = 2;
    }

    for (index = 0; index < 47; index++) {
      test.push({ k: chr + index, v: value });
    }
  }

  test.sort(function (a, b) { return b.v - a.v; });

  for (index = 0; index < test.length; index++) {
    chr = test[index].k.charAt(0);
    if (result.charAt(result.length - 1) !== chr) result += chr;
  }

  return result !== 'DGBEFHACIJK';
});

var FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD || !STABLE_SORT;

var getSortCompare = function (comparefn) {
  return function (x, y) {
    if (y === undefined) return -1;
    if (x === undefined) return 1;
    if (comparefn !== undefined) return +comparefn(x, y) || 0;
    return toString(x) > toString(y) ? 1 : -1;
  };
};

// `Array.prototype.sort` method
// https://tc39.es/ecma262/#sec-array.prototype.sort
$({ target: 'Array', proto: true, forced: FORCED }, {
  sort: function sort(comparefn) {
    if (comparefn !== undefined) aCallable(comparefn);

    var array = toObject(this);

    if (STABLE_SORT) return comparefn === undefined ? nativeSort.call(array) : nativeSort.call(array, comparefn);

    var items = [];
    var arrayLength = toLength(array.length);
    var itemsLength, index;

    for (index = 0; index < arrayLength; index++) {
      if (index in array) items.push(array[index]);
    }

    items = internalSort(items, getSortCompare(comparefn));
    itemsLength = items.length;
    index = 0;

    while (index < itemsLength) array[index] = items[index++];
    while (index < arrayLength) delete array[index++];

    return array;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.splice.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.splice.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var toAbsoluteIndex = __webpack_require__(/*! ../internals/to-absolute-index */ "./node_modules/core-js/internals/to-absolute-index.js");
var toInteger = __webpack_require__(/*! ../internals/to-integer */ "./node_modules/core-js/internals/to-integer.js");
var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
var arraySpeciesCreate = __webpack_require__(/*! ../internals/array-species-create */ "./node_modules/core-js/internals/array-species-create.js");
var createProperty = __webpack_require__(/*! ../internals/create-property */ "./node_modules/core-js/internals/create-property.js");
var arrayMethodHasSpeciesSupport = __webpack_require__(/*! ../internals/array-method-has-species-support */ "./node_modules/core-js/internals/array-method-has-species-support.js");

var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('splice');

var max = Math.max;
var min = Math.min;
var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';

// `Array.prototype.splice` method
// https://tc39.es/ecma262/#sec-array.prototype.splice
// with adding support of @@species
$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT }, {
  splice: function splice(start, deleteCount /* , ...items */) {
    var O = toObject(this);
    var len = toLength(O.length);
    var actualStart = toAbsoluteIndex(start, len);
    var argumentsLength = arguments.length;
    var insertCount, actualDeleteCount, A, k, from, to;
    if (argumentsLength === 0) {
      insertCount = actualDeleteCount = 0;
    } else if (argumentsLength === 1) {
      insertCount = 0;
      actualDeleteCount = len - actualStart;
    } else {
      insertCount = argumentsLength - 2;
      actualDeleteCount = min(max(toInteger(deleteCount), 0), len - actualStart);
    }
    if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {
      throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
    }
    A = arraySpeciesCreate(O, actualDeleteCount);
    for (k = 0; k < actualDeleteCount; k++) {
      from = actualStart + k;
      if (from in O) createProperty(A, k, O[from]);
    }
    A.length = actualDeleteCount;
    if (insertCount < actualDeleteCount) {
      for (k = actualStart; k < len - actualDeleteCount; k++) {
        from = k + actualDeleteCount;
        to = k + insertCount;
        if (from in O) O[to] = O[from];
        else delete O[to];
      }
      for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];
    } else if (insertCount > actualDeleteCount) {
      for (k = len - actualDeleteCount; k > actualStart; k--) {
        from = k + actualDeleteCount - 1;
        to = k + insertCount - 1;
        if (from in O) O[to] = O[from];
        else delete O[to];
      }
    }
    for (k = 0; k < insertCount; k++) {
      O[k + actualStart] = arguments[k + 2];
    }
    O.length = len - actualDeleteCount + insertCount;
    return A;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.function.name.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es.function.name.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var FUNCTION_NAME_EXISTS = __webpack_require__(/*! ../internals/function-name */ "./node_modules/core-js/internals/function-name.js").EXISTS;
var defineProperty = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f;

var FunctionPrototype = Function.prototype;
var FunctionPrototypeToString = FunctionPrototype.toString;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name';

// Function instances `.name` property
// https://tc39.es/ecma262/#sec-function-instances-name
if (DESCRIPTORS && !FUNCTION_NAME_EXISTS) {
  defineProperty(FunctionPrototype, NAME, {
    configurable: true,
    get: function () {
      try {
        return FunctionPrototypeToString.call(this).match(nameRE)[1];
      } catch (error) {
        return '';
      }
    }
  });
}


/***/ }),

/***/ "./node_modules/core-js/modules/es.global-this.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es.global-this.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");

// `globalThis` object
// https://tc39.es/ecma262/#sec-globalthis
$({ global: true }, {
  globalThis: global
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.number.constructor.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es.number.constructor.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var isForced = __webpack_require__(/*! ../internals/is-forced */ "./node_modules/core-js/internals/is-forced.js");
var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");
var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var classof = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");
var inheritIfRequired = __webpack_require__(/*! ../internals/inherit-if-required */ "./node_modules/core-js/internals/inherit-if-required.js");
var isSymbol = __webpack_require__(/*! ../internals/is-symbol */ "./node_modules/core-js/internals/is-symbol.js");
var toPrimitive = __webpack_require__(/*! ../internals/to-primitive */ "./node_modules/core-js/internals/to-primitive.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var create = __webpack_require__(/*! ../internals/object-create */ "./node_modules/core-js/internals/object-create.js");
var getOwnPropertyNames = __webpack_require__(/*! ../internals/object-get-own-property-names */ "./node_modules/core-js/internals/object-get-own-property-names.js").f;
var getOwnPropertyDescriptor = __webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "./node_modules/core-js/internals/object-get-own-property-descriptor.js").f;
var defineProperty = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f;
var trim = __webpack_require__(/*! ../internals/string-trim */ "./node_modules/core-js/internals/string-trim.js").trim;

var NUMBER = 'Number';
var NativeNumber = global[NUMBER];
var NumberPrototype = NativeNumber.prototype;

// Opera ~12 has broken Object#toString
var BROKEN_CLASSOF = classof(create(NumberPrototype)) == NUMBER;

// `ToNumber` abstract operation
// https://tc39.es/ecma262/#sec-tonumber
var toNumber = function (argument) {
  if (isSymbol(argument)) throw TypeError('Cannot convert a Symbol value to a number');
  var it = toPrimitive(argument, 'number');
  var first, third, radix, maxCode, digits, length, index, code;
  if (typeof it == 'string' && it.length > 2) {
    it = trim(it);
    first = it.charCodeAt(0);
    if (first === 43 || first === 45) {
      third = it.charCodeAt(2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (it.charCodeAt(1)) {
        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal of /^0b[01]+$/i
        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal of /^0o[0-7]+$/i
        default: return +it;
      }
      digits = it.slice(2);
      length = digits.length;
      for (index = 0; index < length; index++) {
        code = digits.charCodeAt(index);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if (code < 48 || code > maxCode) return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

// `Number` constructor
// https://tc39.es/ecma262/#sec-number-constructor
if (isForced(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {
  var NumberWrapper = function Number(value) {
    var it = arguments.length < 1 ? 0 : value;
    var dummy = this;
    return dummy instanceof NumberWrapper
      // check on 1..constructor(foo) case
      && (BROKEN_CLASSOF ? fails(function () { NumberPrototype.valueOf.call(dummy); }) : classof(dummy) != NUMBER)
        ? inheritIfRequired(new NativeNumber(toNumber(it)), dummy, NumberWrapper) : toNumber(it);
  };
  for (var keys = DESCRIPTORS ? getOwnPropertyNames(NativeNumber) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES2015 (in case, if modules with ES2015 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger,' +
    // ESNext
    'fromString,range'
  ).split(','), j = 0, key; keys.length > j; j++) {
    if (has(NativeNumber, key = keys[j]) && !has(NumberWrapper, key)) {
      defineProperty(NumberWrapper, key, getOwnPropertyDescriptor(NativeNumber, key));
    }
  }
  NumberWrapper.prototype = NumberPrototype;
  NumberPrototype.constructor = NumberWrapper;
  redefine(global, NUMBER, NumberWrapper);
}


/***/ }),

/***/ "./node_modules/core-js/modules/es.number.to-fixed.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es.number.to-fixed.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var toInteger = __webpack_require__(/*! ../internals/to-integer */ "./node_modules/core-js/internals/to-integer.js");
var thisNumberValue = __webpack_require__(/*! ../internals/this-number-value */ "./node_modules/core-js/internals/this-number-value.js");
var repeat = __webpack_require__(/*! ../internals/string-repeat */ "./node_modules/core-js/internals/string-repeat.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

var nativeToFixed = 1.0.toFixed;
var floor = Math.floor;

var pow = function (x, n, acc) {
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};

var log = function (x) {
  var n = 0;
  var x2 = x;
  while (x2 >= 4096) {
    n += 12;
    x2 /= 4096;
  }
  while (x2 >= 2) {
    n += 1;
    x2 /= 2;
  } return n;
};

var multiply = function (data, n, c) {
  var index = -1;
  var c2 = c;
  while (++index < 6) {
    c2 += n * data[index];
    data[index] = c2 % 1e7;
    c2 = floor(c2 / 1e7);
  }
};

var divide = function (data, n) {
  var index = 6;
  var c = 0;
  while (--index >= 0) {
    c += data[index];
    data[index] = floor(c / n);
    c = (c % n) * 1e7;
  }
};

var dataToString = function (data) {
  var index = 6;
  var s = '';
  while (--index >= 0) {
    if (s !== '' || index === 0 || data[index] !== 0) {
      var t = String(data[index]);
      s = s === '' ? t : s + repeat.call('0', 7 - t.length) + t;
    }
  } return s;
};

var FORCED = nativeToFixed && (
  0.00008.toFixed(3) !== '0.000' ||
  0.9.toFixed(0) !== '1' ||
  1.255.toFixed(2) !== '1.25' ||
  1000000000000000128.0.toFixed(0) !== '1000000000000000128'
) || !fails(function () {
  // V8 ~ Android 4.3-
  nativeToFixed.call({});
});

// `Number.prototype.toFixed` method
// https://tc39.es/ecma262/#sec-number.prototype.tofixed
$({ target: 'Number', proto: true, forced: FORCED }, {
  toFixed: function toFixed(fractionDigits) {
    var number = thisNumberValue(this);
    var fractDigits = toInteger(fractionDigits);
    var data = [0, 0, 0, 0, 0, 0];
    var sign = '';
    var result = '0';
    var e, z, j, k;

    if (fractDigits < 0 || fractDigits > 20) throw RangeError('Incorrect fraction digits');
    // eslint-disable-next-line no-self-compare -- NaN check
    if (number != number) return 'NaN';
    if (number <= -1e21 || number >= 1e21) return String(number);
    if (number < 0) {
      sign = '-';
      number = -number;
    }
    if (number > 1e-21) {
      e = log(number * pow(2, 69, 1)) - 69;
      z = e < 0 ? number * pow(2, -e, 1) : number / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if (e > 0) {
        multiply(data, 0, z);
        j = fractDigits;
        while (j >= 7) {
          multiply(data, 1e7, 0);
          j -= 7;
        }
        multiply(data, pow(10, j, 1), 0);
        j = e - 1;
        while (j >= 23) {
          divide(data, 1 << 23);
          j -= 23;
        }
        divide(data, 1 << j);
        multiply(data, 1, 1);
        divide(data, 2);
        result = dataToString(data);
      } else {
        multiply(data, 0, z);
        multiply(data, 1 << -e, 0);
        result = dataToString(data) + repeat.call('0', fractDigits);
      }
    }
    if (fractDigits > 0) {
      k = result.length;
      result = sign + (k <= fractDigits
        ? '0.' + repeat.call('0', fractDigits - k) + result
        : result.slice(0, k - fractDigits) + '.' + result.slice(k - fractDigits));
    } else {
      result = sign + result;
    } return result;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.object.assign.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es.object.assign.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var assign = __webpack_require__(/*! ../internals/object-assign */ "./node_modules/core-js/internals/object-assign.js");

// `Object.assign` method
// https://tc39.es/ecma262/#sec-object.assign
// eslint-disable-next-line es/no-object-assign -- required for testing
$({ target: 'Object', stat: true, forced: Object.assign !== assign }, {
  assign: assign
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.object.get-own-property-descriptor.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/core-js/modules/es.object.get-own-property-descriptor.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var nativeGetOwnPropertyDescriptor = __webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "./node_modules/core-js/internals/object-get-own-property-descriptor.js").f;
var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");

var FAILS_ON_PRIMITIVES = fails(function () { nativeGetOwnPropertyDescriptor(1); });
var FORCED = !DESCRIPTORS || FAILS_ON_PRIMITIVES;

// `Object.getOwnPropertyDescriptor` method
// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
$({ target: 'Object', stat: true, forced: FORCED, sham: !DESCRIPTORS }, {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {
    return nativeGetOwnPropertyDescriptor(toIndexedObject(it), key);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.object.keys.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es.object.keys.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
var nativeKeys = __webpack_require__(/*! ../internals/object-keys */ "./node_modules/core-js/internals/object-keys.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

var FAILS_ON_PRIMITIVES = fails(function () { nativeKeys(1); });

// `Object.keys` method
// https://tc39.es/ecma262/#sec-object.keys
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {
  keys: function keys(it) {
    return nativeKeys(toObject(it));
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.object.to-string.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es.object.to-string.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

var TO_STRING_TAG_SUPPORT = __webpack_require__(/*! ../internals/to-string-tag-support */ "./node_modules/core-js/internals/to-string-tag-support.js");
var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");
var toString = __webpack_require__(/*! ../internals/object-to-string */ "./node_modules/core-js/internals/object-to-string.js");

// `Object.prototype.toString` method
// https://tc39.es/ecma262/#sec-object.prototype.tostring
if (!TO_STRING_TAG_SUPPORT) {
  redefine(Object.prototype, 'toString', toString, { unsafe: true });
}


/***/ }),

/***/ "./node_modules/core-js/modules/es.promise.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/es.promise.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");
var NativePromise = __webpack_require__(/*! ../internals/native-promise-constructor */ "./node_modules/core-js/internals/native-promise-constructor.js");
var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");
var redefineAll = __webpack_require__(/*! ../internals/redefine-all */ "./node_modules/core-js/internals/redefine-all.js");
var setPrototypeOf = __webpack_require__(/*! ../internals/object-set-prototype-of */ "./node_modules/core-js/internals/object-set-prototype-of.js");
var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "./node_modules/core-js/internals/set-to-string-tag.js");
var setSpecies = __webpack_require__(/*! ../internals/set-species */ "./node_modules/core-js/internals/set-species.js");
var aCallable = __webpack_require__(/*! ../internals/a-callable */ "./node_modules/core-js/internals/a-callable.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var anInstance = __webpack_require__(/*! ../internals/an-instance */ "./node_modules/core-js/internals/an-instance.js");
var inspectSource = __webpack_require__(/*! ../internals/inspect-source */ "./node_modules/core-js/internals/inspect-source.js");
var iterate = __webpack_require__(/*! ../internals/iterate */ "./node_modules/core-js/internals/iterate.js");
var checkCorrectnessOfIteration = __webpack_require__(/*! ../internals/check-correctness-of-iteration */ "./node_modules/core-js/internals/check-correctness-of-iteration.js");
var speciesConstructor = __webpack_require__(/*! ../internals/species-constructor */ "./node_modules/core-js/internals/species-constructor.js");
var task = __webpack_require__(/*! ../internals/task */ "./node_modules/core-js/internals/task.js").set;
var microtask = __webpack_require__(/*! ../internals/microtask */ "./node_modules/core-js/internals/microtask.js");
var promiseResolve = __webpack_require__(/*! ../internals/promise-resolve */ "./node_modules/core-js/internals/promise-resolve.js");
var hostReportErrors = __webpack_require__(/*! ../internals/host-report-errors */ "./node_modules/core-js/internals/host-report-errors.js");
var newPromiseCapabilityModule = __webpack_require__(/*! ../internals/new-promise-capability */ "./node_modules/core-js/internals/new-promise-capability.js");
var perform = __webpack_require__(/*! ../internals/perform */ "./node_modules/core-js/internals/perform.js");
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js");
var isForced = __webpack_require__(/*! ../internals/is-forced */ "./node_modules/core-js/internals/is-forced.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var IS_BROWSER = __webpack_require__(/*! ../internals/engine-is-browser */ "./node_modules/core-js/internals/engine-is-browser.js");
var IS_NODE = __webpack_require__(/*! ../internals/engine-is-node */ "./node_modules/core-js/internals/engine-is-node.js");
var V8_VERSION = __webpack_require__(/*! ../internals/engine-v8-version */ "./node_modules/core-js/internals/engine-v8-version.js");

var SPECIES = wellKnownSymbol('species');
var PROMISE = 'Promise';
var getInternalState = InternalStateModule.get;
var setInternalState = InternalStateModule.set;
var getInternalPromiseState = InternalStateModule.getterFor(PROMISE);
var NativePromisePrototype = NativePromise && NativePromise.prototype;
var PromiseConstructor = NativePromise;
var PromiseConstructorPrototype = NativePromisePrototype;
var TypeError = global.TypeError;
var document = global.document;
var process = global.process;
var newPromiseCapability = newPromiseCapabilityModule.f;
var newGenericPromiseCapability = newPromiseCapability;
var DISPATCH_EVENT = !!(document && document.createEvent && global.dispatchEvent);
var NATIVE_REJECTION_EVENT = isCallable(global.PromiseRejectionEvent);
var UNHANDLED_REJECTION = 'unhandledrejection';
var REJECTION_HANDLED = 'rejectionhandled';
var PENDING = 0;
var FULFILLED = 1;
var REJECTED = 2;
var HANDLED = 1;
var UNHANDLED = 2;
var SUBCLASSING = false;
var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;

var FORCED = isForced(PROMISE, function () {
  var PROMISE_CONSTRUCTOR_SOURCE = inspectSource(PromiseConstructor);
  var GLOBAL_CORE_JS_PROMISE = PROMISE_CONSTRUCTOR_SOURCE !== String(PromiseConstructor);
  // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
  // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
  // We can't detect it synchronously, so just check versions
  if (!GLOBAL_CORE_JS_PROMISE && V8_VERSION === 66) return true;
  // We need Promise#finally in the pure version for preventing prototype pollution
  if (IS_PURE && !PromiseConstructorPrototype['finally']) return true;
  // We can't use @@species feature detection in V8 since it causes
  // deoptimization and performance degradation
  // https://github.com/zloirock/core-js/issues/679
  if (V8_VERSION >= 51 && /native code/.test(PROMISE_CONSTRUCTOR_SOURCE)) return false;
  // Detect correctness of subclassing with @@species support
  var promise = new PromiseConstructor(function (resolve) { resolve(1); });
  var FakePromise = function (exec) {
    exec(function () { /* empty */ }, function () { /* empty */ });
  };
  var constructor = promise.constructor = {};
  constructor[SPECIES] = FakePromise;
  SUBCLASSING = promise.then(function () { /* empty */ }) instanceof FakePromise;
  if (!SUBCLASSING) return true;
  // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
  return !GLOBAL_CORE_JS_PROMISE && IS_BROWSER && !NATIVE_REJECTION_EVENT;
});

var INCORRECT_ITERATION = FORCED || !checkCorrectnessOfIteration(function (iterable) {
  PromiseConstructor.all(iterable)['catch'](function () { /* empty */ });
});

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && isCallable(then = it.then) ? then : false;
};

var notify = function (state, isReject) {
  if (state.notified) return;
  state.notified = true;
  var chain = state.reactions;
  microtask(function () {
    var value = state.value;
    var ok = state.state == FULFILLED;
    var index = 0;
    // variable length - can't use forEach
    while (chain.length > index) {
      var reaction = chain[index++];
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (state.rejection === UNHANDLED) onHandleUnhandled(state);
            state.rejection = HANDLED;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // can throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (error) {
        if (domain && !exited) domain.exit();
        reject(error);
      }
    }
    state.reactions = [];
    state.notified = false;
    if (isReject && !state.rejection) onUnhandled(state);
  });
};

var dispatchEvent = function (name, promise, reason) {
  var event, handler;
  if (DISPATCH_EVENT) {
    event = document.createEvent('Event');
    event.promise = promise;
    event.reason = reason;
    event.initEvent(name, false, true);
    global.dispatchEvent(event);
  } else event = { promise: promise, reason: reason };
  if (!NATIVE_REJECTION_EVENT && (handler = global['on' + name])) handler(event);
  else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
};

var onUnhandled = function (state) {
  task.call(global, function () {
    var promise = state.facade;
    var value = state.value;
    var IS_UNHANDLED = isUnhandled(state);
    var result;
    if (IS_UNHANDLED) {
      result = perform(function () {
        if (IS_NODE) {
          process.emit('unhandledRejection', value, promise);
        } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;
      if (result.error) throw result.value;
    }
  });
};

var isUnhandled = function (state) {
  return state.rejection !== HANDLED && !state.parent;
};

var onHandleUnhandled = function (state) {
  task.call(global, function () {
    var promise = state.facade;
    if (IS_NODE) {
      process.emit('rejectionHandled', promise);
    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
  });
};

var bind = function (fn, state, unwrap) {
  return function (value) {
    fn(state, value, unwrap);
  };
};

var internalReject = function (state, value, unwrap) {
  if (state.done) return;
  state.done = true;
  if (unwrap) state = unwrap;
  state.value = value;
  state.state = REJECTED;
  notify(state, true);
};

var internalResolve = function (state, value, unwrap) {
  if (state.done) return;
  state.done = true;
  if (unwrap) state = unwrap;
  try {
    if (state.facade === value) throw TypeError("Promise can't be resolved itself");
    var then = isThenable(value);
    if (then) {
      microtask(function () {
        var wrapper = { done: false };
        try {
          then.call(value,
            bind(internalResolve, wrapper, state),
            bind(internalReject, wrapper, state)
          );
        } catch (error) {
          internalReject(wrapper, error, state);
        }
      });
    } else {
      state.value = value;
      state.state = FULFILLED;
      notify(state, false);
    }
  } catch (error) {
    internalReject({ done: false }, error, state);
  }
};

// constructor polyfill
if (FORCED) {
  // 25.4.3.1 Promise(executor)
  PromiseConstructor = function Promise(executor) {
    anInstance(this, PromiseConstructor, PROMISE);
    aCallable(executor);
    Internal.call(this);
    var state = getInternalState(this);
    try {
      executor(bind(internalResolve, state), bind(internalReject, state));
    } catch (error) {
      internalReject(state, error);
    }
  };
  PromiseConstructorPrototype = PromiseConstructor.prototype;
  // eslint-disable-next-line no-unused-vars -- required for `.length`
  Internal = function Promise(executor) {
    setInternalState(this, {
      type: PROMISE,
      done: false,
      notified: false,
      parent: false,
      reactions: [],
      rejection: false,
      state: PENDING,
      value: undefined
    });
  };
  Internal.prototype = redefineAll(PromiseConstructorPrototype, {
    // `Promise.prototype.then` method
    // https://tc39.es/ecma262/#sec-promise.prototype.then
    then: function then(onFulfilled, onRejected) {
      var state = getInternalPromiseState(this);
      var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));
      reaction.ok = isCallable(onFulfilled) ? onFulfilled : true;
      reaction.fail = isCallable(onRejected) && onRejected;
      reaction.domain = IS_NODE ? process.domain : undefined;
      state.parent = true;
      state.reactions.push(reaction);
      if (state.state != PENDING) notify(state, false);
      return reaction.promise;
    },
    // `Promise.prototype.catch` method
    // https://tc39.es/ecma262/#sec-promise.prototype.catch
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    var state = getInternalState(promise);
    this.promise = promise;
    this.resolve = bind(internalResolve, state);
    this.reject = bind(internalReject, state);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === PromiseConstructor || C === PromiseWrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };

  if (!IS_PURE && isCallable(NativePromise) && NativePromisePrototype !== Object.prototype) {
    nativeThen = NativePromisePrototype.then;

    if (!SUBCLASSING) {
      // make `Promise#then` return a polyfilled `Promise` for native promise-based APIs
      redefine(NativePromisePrototype, 'then', function then(onFulfilled, onRejected) {
        var that = this;
        return new PromiseConstructor(function (resolve, reject) {
          nativeThen.call(that, resolve, reject);
        }).then(onFulfilled, onRejected);
      // https://github.com/zloirock/core-js/issues/640
      }, { unsafe: true });

      // makes sure that native promise-based APIs `Promise#catch` properly works with patched `Promise#then`
      redefine(NativePromisePrototype, 'catch', PromiseConstructorPrototype['catch'], { unsafe: true });
    }

    // make `.constructor === Promise` work for native promise-based APIs
    try {
      delete NativePromisePrototype.constructor;
    } catch (error) { /* empty */ }

    // make `instanceof Promise` work for native promise-based APIs
    if (setPrototypeOf) {
      setPrototypeOf(NativePromisePrototype, PromiseConstructorPrototype);
    }
  }
}

$({ global: true, wrap: true, forced: FORCED }, {
  Promise: PromiseConstructor
});

setToStringTag(PromiseConstructor, PROMISE, false, true);
setSpecies(PROMISE);

PromiseWrapper = getBuiltIn(PROMISE);

// statics
$({ target: PROMISE, stat: true, forced: FORCED }, {
  // `Promise.reject` method
  // https://tc39.es/ecma262/#sec-promise.reject
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    capability.reject.call(undefined, r);
    return capability.promise;
  }
});

$({ target: PROMISE, stat: true, forced: IS_PURE || FORCED }, {
  // `Promise.resolve` method
  // https://tc39.es/ecma262/#sec-promise.resolve
  resolve: function resolve(x) {
    return promiseResolve(IS_PURE && this === PromiseWrapper ? PromiseConstructor : this, x);
  }
});

$({ target: PROMISE, stat: true, forced: INCORRECT_ITERATION }, {
  // `Promise.all` method
  // https://tc39.es/ecma262/#sec-promise.all
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var $promiseResolve = aCallable(C.resolve);
      var values = [];
      var counter = 0;
      var remaining = 1;
      iterate(iterable, function (promise) {
        var index = counter++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        $promiseResolve.call(C, promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.error) reject(result.value);
    return capability.promise;
  },
  // `Promise.race` method
  // https://tc39.es/ecma262/#sec-promise.race
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      var $promiseResolve = aCallable(C.resolve);
      iterate(iterable, function (promise) {
        $promiseResolve.call(C, promise).then(capability.resolve, reject);
      });
    });
    if (result.error) reject(result.value);
    return capability.promise;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.regexp.constructor.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es.regexp.constructor.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var isForced = __webpack_require__(/*! ../internals/is-forced */ "./node_modules/core-js/internals/is-forced.js");
var inheritIfRequired = __webpack_require__(/*! ../internals/inherit-if-required */ "./node_modules/core-js/internals/inherit-if-required.js");
var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "./node_modules/core-js/internals/create-non-enumerable-property.js");
var defineProperty = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f;
var getOwnPropertyNames = __webpack_require__(/*! ../internals/object-get-own-property-names */ "./node_modules/core-js/internals/object-get-own-property-names.js").f;
var isRegExp = __webpack_require__(/*! ../internals/is-regexp */ "./node_modules/core-js/internals/is-regexp.js");
var toString = __webpack_require__(/*! ../internals/to-string */ "./node_modules/core-js/internals/to-string.js");
var getFlags = __webpack_require__(/*! ../internals/regexp-flags */ "./node_modules/core-js/internals/regexp-flags.js");
var stickyHelpers = __webpack_require__(/*! ../internals/regexp-sticky-helpers */ "./node_modules/core-js/internals/regexp-sticky-helpers.js");
var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var enforceInternalState = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js").enforce;
var setSpecies = __webpack_require__(/*! ../internals/set-species */ "./node_modules/core-js/internals/set-species.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var UNSUPPORTED_DOT_ALL = __webpack_require__(/*! ../internals/regexp-unsupported-dot-all */ "./node_modules/core-js/internals/regexp-unsupported-dot-all.js");
var UNSUPPORTED_NCG = __webpack_require__(/*! ../internals/regexp-unsupported-ncg */ "./node_modules/core-js/internals/regexp-unsupported-ncg.js");

var MATCH = wellKnownSymbol('match');
var NativeRegExp = global.RegExp;
var RegExpPrototype = NativeRegExp.prototype;
// TODO: Use only propper RegExpIdentifierName
var IS_NCG = /^\?<[^\s\d!#%&*+<=>@^][^\s!#%&*+<=>@^]*>/;
var re1 = /a/g;
var re2 = /a/g;

// "new" should create a new object, old webkit bug
var CORRECT_NEW = new NativeRegExp(re1) !== re1;

var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;

var BASE_FORCED = DESCRIPTORS &&
  (!CORRECT_NEW || UNSUPPORTED_Y || UNSUPPORTED_DOT_ALL || UNSUPPORTED_NCG || fails(function () {
    re2[MATCH] = false;
    // RegExp constructor can alter flags and IsRegExp works correct with @@match
    return NativeRegExp(re1) != re1 || NativeRegExp(re2) == re2 || NativeRegExp(re1, 'i') != '/a/i';
  }));

var handleDotAll = function (string) {
  var length = string.length;
  var index = 0;
  var result = '';
  var brackets = false;
  var chr;
  for (; index <= length; index++) {
    chr = string.charAt(index);
    if (chr === '\\') {
      result += chr + string.charAt(++index);
      continue;
    }
    if (!brackets && chr === '.') {
      result += '[\\s\\S]';
    } else {
      if (chr === '[') {
        brackets = true;
      } else if (chr === ']') {
        brackets = false;
      } result += chr;
    }
  } return result;
};

var handleNCG = function (string) {
  var length = string.length;
  var index = 0;
  var result = '';
  var named = [];
  var names = {};
  var brackets = false;
  var ncg = false;
  var groupid = 0;
  var groupname = '';
  var chr;
  for (; index <= length; index++) {
    chr = string.charAt(index);
    if (chr === '\\') {
      chr = chr + string.charAt(++index);
    } else if (chr === ']') {
      brackets = false;
    } else if (!brackets) switch (true) {
      case chr === '[':
        brackets = true;
        break;
      case chr === '(':
        if (IS_NCG.test(string.slice(index + 1))) {
          index += 2;
          ncg = true;
        }
        result += chr;
        groupid++;
        continue;
      case chr === '>' && ncg:
        if (groupname === '' || has(names, groupname)) {
          throw new SyntaxError('Invalid capture group name');
        }
        names[groupname] = true;
        named.push([groupname, groupid]);
        ncg = false;
        groupname = '';
        continue;
    }
    if (ncg) groupname += chr;
    else result += chr;
  } return [result, named];
};

// `RegExp` constructor
// https://tc39.es/ecma262/#sec-regexp-constructor
if (isForced('RegExp', BASE_FORCED)) {
  var RegExpWrapper = function RegExp(pattern, flags) {
    var thisIsRegExp = this instanceof RegExpWrapper;
    var patternIsRegExp = isRegExp(pattern);
    var flagsAreUndefined = flags === undefined;
    var groups = [];
    var rawPattern = pattern;
    var rawFlags, dotAll, sticky, handled, result, state;

    if (!thisIsRegExp && patternIsRegExp && flagsAreUndefined && pattern.constructor === RegExpWrapper) {
      return pattern;
    }

    if (patternIsRegExp || pattern instanceof RegExpWrapper) {
      pattern = pattern.source;
      if (flagsAreUndefined) flags = 'flags' in rawPattern ? rawPattern.flags : getFlags.call(rawPattern);
    }

    pattern = pattern === undefined ? '' : toString(pattern);
    flags = flags === undefined ? '' : toString(flags);
    rawPattern = pattern;

    if (UNSUPPORTED_DOT_ALL && 'dotAll' in re1) {
      dotAll = !!flags && flags.indexOf('s') > -1;
      if (dotAll) flags = flags.replace(/s/g, '');
    }

    rawFlags = flags;

    if (UNSUPPORTED_Y && 'sticky' in re1) {
      sticky = !!flags && flags.indexOf('y') > -1;
      if (sticky) flags = flags.replace(/y/g, '');
    }

    if (UNSUPPORTED_NCG) {
      handled = handleNCG(pattern);
      pattern = handled[0];
      groups = handled[1];
    }

    result = inheritIfRequired(NativeRegExp(pattern, flags), thisIsRegExp ? this : RegExpPrototype, RegExpWrapper);

    if (dotAll || sticky || groups.length) {
      state = enforceInternalState(result);
      if (dotAll) {
        state.dotAll = true;
        state.raw = RegExpWrapper(handleDotAll(pattern), rawFlags);
      }
      if (sticky) state.sticky = true;
      if (groups.length) state.groups = groups;
    }

    if (pattern !== rawPattern) try {
      // fails in old engines, but we have no alternatives for unsupported regex syntax
      createNonEnumerableProperty(result, 'source', rawPattern === '' ? '(?:)' : rawPattern);
    } catch (error) { /* empty */ }

    return result;
  };

  var proxy = function (key) {
    key in RegExpWrapper || defineProperty(RegExpWrapper, key, {
      configurable: true,
      get: function () { return NativeRegExp[key]; },
      set: function (it) { NativeRegExp[key] = it; }
    });
  };

  for (var keys = getOwnPropertyNames(NativeRegExp), index = 0; keys.length > index;) {
    proxy(keys[index++]);
  }

  RegExpPrototype.constructor = RegExpWrapper;
  RegExpWrapper.prototype = RegExpPrototype;
  redefine(global, 'RegExp', RegExpWrapper);
}

// https://tc39.es/ecma262/#sec-get-regexp-@@species
setSpecies('RegExp');


/***/ }),

/***/ "./node_modules/core-js/modules/es.regexp.exec.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es.regexp.exec.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var exec = __webpack_require__(/*! ../internals/regexp-exec */ "./node_modules/core-js/internals/regexp-exec.js");

// `RegExp.prototype.exec` method
// https://tc39.es/ecma262/#sec-regexp.prototype.exec
$({ target: 'RegExp', proto: true, forced: /./.exec !== exec }, {
  exec: exec
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.regexp.to-string.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es.regexp.to-string.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var PROPER_FUNCTION_NAME = __webpack_require__(/*! ../internals/function-name */ "./node_modules/core-js/internals/function-name.js").PROPER;
var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var $toString = __webpack_require__(/*! ../internals/to-string */ "./node_modules/core-js/internals/to-string.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var flags = __webpack_require__(/*! ../internals/regexp-flags */ "./node_modules/core-js/internals/regexp-flags.js");

var TO_STRING = 'toString';
var RegExpPrototype = RegExp.prototype;
var nativeToString = RegExpPrototype[TO_STRING];

var NOT_GENERIC = fails(function () { return nativeToString.call({ source: 'a', flags: 'b' }) != '/a/b'; });
// FF44- RegExp#toString has a wrong name
var INCORRECT_NAME = PROPER_FUNCTION_NAME && nativeToString.name != TO_STRING;

// `RegExp.prototype.toString` method
// https://tc39.es/ecma262/#sec-regexp.prototype.tostring
if (NOT_GENERIC || INCORRECT_NAME) {
  redefine(RegExp.prototype, TO_STRING, function toString() {
    var R = anObject(this);
    var p = $toString(R.source);
    var rf = R.flags;
    var f = $toString(rf === undefined && R instanceof RegExp && !('flags' in RegExpPrototype) ? flags.call(R) : rf);
    return '/' + p + '/' + f;
  }, { unsafe: true });
}


/***/ }),

/***/ "./node_modules/core-js/modules/es.set.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/modules/es.set.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var collection = __webpack_require__(/*! ../internals/collection */ "./node_modules/core-js/internals/collection.js");
var collectionStrong = __webpack_require__(/*! ../internals/collection-strong */ "./node_modules/core-js/internals/collection-strong.js");

// `Set` constructor
// https://tc39.es/ecma262/#sec-set-objects
module.exports = collection('Set', function (init) {
  return function Set() { return init(this, arguments.length ? arguments[0] : undefined); };
}, collectionStrong);


/***/ }),

/***/ "./node_modules/core-js/modules/es.string.ends-with.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es.string.ends-with.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var getOwnPropertyDescriptor = __webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "./node_modules/core-js/internals/object-get-own-property-descriptor.js").f;
var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
var toString = __webpack_require__(/*! ../internals/to-string */ "./node_modules/core-js/internals/to-string.js");
var notARegExp = __webpack_require__(/*! ../internals/not-a-regexp */ "./node_modules/core-js/internals/not-a-regexp.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");
var correctIsRegExpLogic = __webpack_require__(/*! ../internals/correct-is-regexp-logic */ "./node_modules/core-js/internals/correct-is-regexp-logic.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");

// eslint-disable-next-line es/no-string-prototype-endswith -- safe
var $endsWith = ''.endsWith;
var min = Math.min;

var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic('endsWith');
// https://github.com/zloirock/core-js/pull/702
var MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function () {
  var descriptor = getOwnPropertyDescriptor(String.prototype, 'endsWith');
  return descriptor && !descriptor.writable;
}();

// `String.prototype.endsWith` method
// https://tc39.es/ecma262/#sec-string.prototype.endswith
$({ target: 'String', proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC }, {
  endsWith: function endsWith(searchString /* , endPosition = @length */) {
    var that = toString(requireObjectCoercible(this));
    notARegExp(searchString);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = toLength(that.length);
    var end = endPosition === undefined ? len : min(toLength(endPosition), len);
    var search = toString(searchString);
    return $endsWith
      ? $endsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.string.includes.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es.string.includes.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var notARegExp = __webpack_require__(/*! ../internals/not-a-regexp */ "./node_modules/core-js/internals/not-a-regexp.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");
var toString = __webpack_require__(/*! ../internals/to-string */ "./node_modules/core-js/internals/to-string.js");
var correctIsRegExpLogic = __webpack_require__(/*! ../internals/correct-is-regexp-logic */ "./node_modules/core-js/internals/correct-is-regexp-logic.js");

// `String.prototype.includes` method
// https://tc39.es/ecma262/#sec-string.prototype.includes
$({ target: 'String', proto: true, forced: !correctIsRegExpLogic('includes') }, {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~toString(requireObjectCoercible(this))
      .indexOf(toString(notARegExp(searchString)), arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.string.iterator.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es.string.iterator.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var charAt = __webpack_require__(/*! ../internals/string-multibyte */ "./node_modules/core-js/internals/string-multibyte.js").charAt;
var toString = __webpack_require__(/*! ../internals/to-string */ "./node_modules/core-js/internals/to-string.js");
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js");
var defineIterator = __webpack_require__(/*! ../internals/define-iterator */ "./node_modules/core-js/internals/define-iterator.js");

var STRING_ITERATOR = 'String Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);

// `String.prototype[@@iterator]` method
// https://tc39.es/ecma262/#sec-string.prototype-@@iterator
defineIterator(String, 'String', function (iterated) {
  setInternalState(this, {
    type: STRING_ITERATOR,
    string: toString(iterated),
    index: 0
  });
// `%StringIteratorPrototype%.next` method
// https://tc39.es/ecma262/#sec-%stringiteratorprototype%.next
}, function next() {
  var state = getInternalState(this);
  var string = state.string;
  var index = state.index;
  var point;
  if (index >= string.length) return { value: undefined, done: true };
  point = charAt(string, index);
  state.index += point.length;
  return { value: point, done: false };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.string.match.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es.string.match.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var fixRegExpWellKnownSymbolLogic = __webpack_require__(/*! ../internals/fix-regexp-well-known-symbol-logic */ "./node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
var toString = __webpack_require__(/*! ../internals/to-string */ "./node_modules/core-js/internals/to-string.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");
var getMethod = __webpack_require__(/*! ../internals/get-method */ "./node_modules/core-js/internals/get-method.js");
var advanceStringIndex = __webpack_require__(/*! ../internals/advance-string-index */ "./node_modules/core-js/internals/advance-string-index.js");
var regExpExec = __webpack_require__(/*! ../internals/regexp-exec-abstract */ "./node_modules/core-js/internals/regexp-exec-abstract.js");

// @@match logic
fixRegExpWellKnownSymbolLogic('match', function (MATCH, nativeMatch, maybeCallNative) {
  return [
    // `String.prototype.match` method
    // https://tc39.es/ecma262/#sec-string.prototype.match
    function match(regexp) {
      var O = requireObjectCoercible(this);
      var matcher = regexp == undefined ? undefined : getMethod(regexp, MATCH);
      return matcher ? matcher.call(regexp, O) : new RegExp(regexp)[MATCH](toString(O));
    },
    // `RegExp.prototype[@@match]` method
    // https://tc39.es/ecma262/#sec-regexp.prototype-@@match
    function (string) {
      var rx = anObject(this);
      var S = toString(string);
      var res = maybeCallNative(nativeMatch, rx, S);

      if (res.done) return res.value;

      if (!rx.global) return regExpExec(rx, S);

      var fullUnicode = rx.unicode;
      rx.lastIndex = 0;
      var A = [];
      var n = 0;
      var result;
      while ((result = regExpExec(rx, S)) !== null) {
        var matchStr = toString(result[0]);
        A[n] = matchStr;
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
        n++;
      }
      return n === 0 ? null : A;
    }
  ];
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.string.repeat.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es.string.repeat.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var repeat = __webpack_require__(/*! ../internals/string-repeat */ "./node_modules/core-js/internals/string-repeat.js");

// `String.prototype.repeat` method
// https://tc39.es/ecma262/#sec-string.prototype.repeat
$({ target: 'String', proto: true }, {
  repeat: repeat
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.string.replace.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es.string.replace.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var fixRegExpWellKnownSymbolLogic = __webpack_require__(/*! ../internals/fix-regexp-well-known-symbol-logic */ "./node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var toInteger = __webpack_require__(/*! ../internals/to-integer */ "./node_modules/core-js/internals/to-integer.js");
var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
var toString = __webpack_require__(/*! ../internals/to-string */ "./node_modules/core-js/internals/to-string.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");
var advanceStringIndex = __webpack_require__(/*! ../internals/advance-string-index */ "./node_modules/core-js/internals/advance-string-index.js");
var getMethod = __webpack_require__(/*! ../internals/get-method */ "./node_modules/core-js/internals/get-method.js");
var getSubstitution = __webpack_require__(/*! ../internals/get-substitution */ "./node_modules/core-js/internals/get-substitution.js");
var regExpExec = __webpack_require__(/*! ../internals/regexp-exec-abstract */ "./node_modules/core-js/internals/regexp-exec-abstract.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

var REPLACE = wellKnownSymbol('replace');
var max = Math.max;
var min = Math.min;

var maybeToString = function (it) {
  return it === undefined ? it : String(it);
};

// IE <= 11 replaces $0 with the whole match, as if it was $&
// https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0
var REPLACE_KEEPS_$0 = (function () {
  // eslint-disable-next-line regexp/prefer-escape-replacement-dollar-char -- required for testing
  return 'a'.replace(/./, '$0') === '$0';
})();

// Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string
var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = (function () {
  if (/./[REPLACE]) {
    return /./[REPLACE]('a', '$0') === '';
  }
  return false;
})();

var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
  var re = /./;
  re.exec = function () {
    var result = [];
    result.groups = { a: '7' };
    return result;
  };
  // eslint-disable-next-line regexp/no-useless-dollar-replacements -- false positive
  return ''.replace(re, '$<a>') !== '7';
});

// @@replace logic
fixRegExpWellKnownSymbolLogic('replace', function (_, nativeReplace, maybeCallNative) {
  var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';

  return [
    // `String.prototype.replace` method
    // https://tc39.es/ecma262/#sec-string.prototype.replace
    function replace(searchValue, replaceValue) {
      var O = requireObjectCoercible(this);
      var replacer = searchValue == undefined ? undefined : getMethod(searchValue, REPLACE);
      return replacer
        ? replacer.call(searchValue, O, replaceValue)
        : nativeReplace.call(toString(O), searchValue, replaceValue);
    },
    // `RegExp.prototype[@@replace]` method
    // https://tc39.es/ecma262/#sec-regexp.prototype-@@replace
    function (string, replaceValue) {
      var rx = anObject(this);
      var S = toString(string);

      if (
        typeof replaceValue === 'string' &&
        replaceValue.indexOf(UNSAFE_SUBSTITUTE) === -1 &&
        replaceValue.indexOf('$<') === -1
      ) {
        var res = maybeCallNative(nativeReplace, rx, S, replaceValue);
        if (res.done) return res.value;
      }

      var functionalReplace = isCallable(replaceValue);
      if (!functionalReplace) replaceValue = toString(replaceValue);

      var global = rx.global;
      if (global) {
        var fullUnicode = rx.unicode;
        rx.lastIndex = 0;
      }
      var results = [];
      while (true) {
        var result = regExpExec(rx, S);
        if (result === null) break;

        results.push(result);
        if (!global) break;

        var matchStr = toString(result[0]);
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
      }

      var accumulatedResult = '';
      var nextSourcePosition = 0;
      for (var i = 0; i < results.length; i++) {
        result = results[i];

        var matched = toString(result[0]);
        var position = max(min(toInteger(result.index), S.length), 0);
        var captures = [];
        // NOTE: This is equivalent to
        //   captures = result.slice(1).map(maybeToString)
        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
        var namedCaptures = result.groups;
        if (functionalReplace) {
          var replacerArgs = [matched].concat(captures, position, S);
          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
          var replacement = toString(replaceValue.apply(undefined, replacerArgs));
        } else {
          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
        }
        if (position >= nextSourcePosition) {
          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
          nextSourcePosition = position + matched.length;
        }
      }
      return accumulatedResult + S.slice(nextSourcePosition);
    }
  ];
}, !REPLACE_SUPPORTS_NAMED_GROUPS || !REPLACE_KEEPS_$0 || REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE);


/***/ }),

/***/ "./node_modules/core-js/modules/es.string.split.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es.string.split.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var fixRegExpWellKnownSymbolLogic = __webpack_require__(/*! ../internals/fix-regexp-well-known-symbol-logic */ "./node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js");
var isRegExp = __webpack_require__(/*! ../internals/is-regexp */ "./node_modules/core-js/internals/is-regexp.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");
var speciesConstructor = __webpack_require__(/*! ../internals/species-constructor */ "./node_modules/core-js/internals/species-constructor.js");
var advanceStringIndex = __webpack_require__(/*! ../internals/advance-string-index */ "./node_modules/core-js/internals/advance-string-index.js");
var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
var toString = __webpack_require__(/*! ../internals/to-string */ "./node_modules/core-js/internals/to-string.js");
var getMethod = __webpack_require__(/*! ../internals/get-method */ "./node_modules/core-js/internals/get-method.js");
var callRegExpExec = __webpack_require__(/*! ../internals/regexp-exec-abstract */ "./node_modules/core-js/internals/regexp-exec-abstract.js");
var regexpExec = __webpack_require__(/*! ../internals/regexp-exec */ "./node_modules/core-js/internals/regexp-exec.js");
var stickyHelpers = __webpack_require__(/*! ../internals/regexp-sticky-helpers */ "./node_modules/core-js/internals/regexp-sticky-helpers.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;
var arrayPush = [].push;
var min = Math.min;
var MAX_UINT32 = 0xFFFFFFFF;

// Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
// Weex JS has frozen built-in prototypes, so use try / catch wrapper
var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {
  // eslint-disable-next-line regexp/no-empty-group -- required for testing
  var re = /(?:)/;
  var originalExec = re.exec;
  re.exec = function () { return originalExec.apply(this, arguments); };
  var result = 'ab'.split(re);
  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
});

// @@split logic
fixRegExpWellKnownSymbolLogic('split', function (SPLIT, nativeSplit, maybeCallNative) {
  var internalSplit;
  if (
    'abbc'.split(/(b)*/)[1] == 'c' ||
    // eslint-disable-next-line regexp/no-empty-group -- required for testing
    'test'.split(/(?:)/, -1).length != 4 ||
    'ab'.split(/(?:ab)*/).length != 2 ||
    '.'.split(/(.?)(.?)/).length != 4 ||
    // eslint-disable-next-line regexp/no-empty-capturing-group, regexp/no-empty-group -- required for testing
    '.'.split(/()()/).length > 1 ||
    ''.split(/.?/).length
  ) {
    // based on es5-shim implementation, need to rework it
    internalSplit = function (separator, limit) {
      var string = toString(requireObjectCoercible(this));
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (separator === undefined) return [string];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) {
        return nativeSplit.call(string, separator, lim);
      }
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var match, lastIndex, lastLength;
      while (match = regexpExec.call(separatorCopy, string)) {
        lastIndex = separatorCopy.lastIndex;
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));
          lastLength = match[0].length;
          lastLastIndex = lastIndex;
          if (output.length >= lim) break;
        }
        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
      }
      if (lastLastIndex === string.length) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output.length > lim ? output.slice(0, lim) : output;
    };
  // Chakra, V8
  } else if ('0'.split(undefined, 0).length) {
    internalSplit = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);
    };
  } else internalSplit = nativeSplit;

  return [
    // `String.prototype.split` method
    // https://tc39.es/ecma262/#sec-string.prototype.split
    function split(separator, limit) {
      var O = requireObjectCoercible(this);
      var splitter = separator == undefined ? undefined : getMethod(separator, SPLIT);
      return splitter
        ? splitter.call(separator, O, limit)
        : internalSplit.call(toString(O), separator, limit);
    },
    // `RegExp.prototype[@@split]` method
    // https://tc39.es/ecma262/#sec-regexp.prototype-@@split
    //
    // NOTE: This cannot be properly polyfilled in engines that don't support
    // the 'y' flag.
    function (string, limit) {
      var rx = anObject(this);
      var S = toString(string);
      var res = maybeCallNative(internalSplit, rx, S, limit, internalSplit !== nativeSplit);

      if (res.done) return res.value;

      var C = speciesConstructor(rx, RegExp);

      var unicodeMatching = rx.unicode;
      var flags = (rx.ignoreCase ? 'i' : '') +
                  (rx.multiline ? 'm' : '') +
                  (rx.unicode ? 'u' : '') +
                  (UNSUPPORTED_Y ? 'g' : 'y');

      // ^(? + rx + ) is needed, in combination with some S slicing, to
      // simulate the 'y' flag.
      var splitter = new C(UNSUPPORTED_Y ? '^(?:' + rx.source + ')' : rx, flags);
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
      var p = 0;
      var q = 0;
      var A = [];
      while (q < S.length) {
        splitter.lastIndex = UNSUPPORTED_Y ? 0 : q;
        var z = callRegExpExec(splitter, UNSUPPORTED_Y ? S.slice(q) : S);
        var e;
        if (
          z === null ||
          (e = min(toLength(splitter.lastIndex + (UNSUPPORTED_Y ? q : 0)), S.length)) === p
        ) {
          q = advanceStringIndex(S, q, unicodeMatching);
        } else {
          A.push(S.slice(p, q));
          if (A.length === lim) return A;
          for (var i = 1; i <= z.length - 1; i++) {
            A.push(z[i]);
            if (A.length === lim) return A;
          }
          q = p = e;
        }
      }
      A.push(S.slice(p));
      return A;
    }
  ];
}, !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC, UNSUPPORTED_Y);


/***/ }),

/***/ "./node_modules/core-js/modules/es.string.starts-with.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es.string.starts-with.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var getOwnPropertyDescriptor = __webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "./node_modules/core-js/internals/object-get-own-property-descriptor.js").f;
var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
var toString = __webpack_require__(/*! ../internals/to-string */ "./node_modules/core-js/internals/to-string.js");
var notARegExp = __webpack_require__(/*! ../internals/not-a-regexp */ "./node_modules/core-js/internals/not-a-regexp.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");
var correctIsRegExpLogic = __webpack_require__(/*! ../internals/correct-is-regexp-logic */ "./node_modules/core-js/internals/correct-is-regexp-logic.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");

// eslint-disable-next-line es/no-string-prototype-startswith -- safe
var $startsWith = ''.startsWith;
var min = Math.min;

var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic('startsWith');
// https://github.com/zloirock/core-js/pull/702
var MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function () {
  var descriptor = getOwnPropertyDescriptor(String.prototype, 'startsWith');
  return descriptor && !descriptor.writable;
}();

// `String.prototype.startsWith` method
// https://tc39.es/ecma262/#sec-string.prototype.startswith
$({ target: 'String', proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC }, {
  startsWith: function startsWith(searchString /* , position = 0 */) {
    var that = toString(requireObjectCoercible(this));
    notARegExp(searchString);
    var index = toLength(min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = toString(searchString);
    return $startsWith
      ? $startsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.string.trim.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es.string.trim.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var $trim = __webpack_require__(/*! ../internals/string-trim */ "./node_modules/core-js/internals/string-trim.js").trim;
var forcedStringTrimMethod = __webpack_require__(/*! ../internals/string-trim-forced */ "./node_modules/core-js/internals/string-trim-forced.js");

// `String.prototype.trim` method
// https://tc39.es/ecma262/#sec-string.prototype.trim
$({ target: 'String', proto: true, forced: forcedStringTrimMethod('trim') }, {
  trim: function trim() {
    return $trim(this);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.symbol.description.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es.symbol.description.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";
// `Symbol.prototype.description` getter
// https://tc39.es/ecma262/#sec-symbol.prototype.description

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var defineProperty = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f;
var copyConstructorProperties = __webpack_require__(/*! ../internals/copy-constructor-properties */ "./node_modules/core-js/internals/copy-constructor-properties.js");

var NativeSymbol = global.Symbol;

if (DESCRIPTORS && isCallable(NativeSymbol) && (!('description' in NativeSymbol.prototype) ||
  // Safari 12 bug
  NativeSymbol().description !== undefined
)) {
  var EmptyStringDescriptionStore = {};
  // wrap Symbol constructor for correct work with undefined description
  var SymbolWrapper = function Symbol() {
    var description = arguments.length < 1 || arguments[0] === undefined ? undefined : String(arguments[0]);
    var result = this instanceof SymbolWrapper
      ? new NativeSymbol(description)
      // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'
      : description === undefined ? NativeSymbol() : NativeSymbol(description);
    if (description === '') EmptyStringDescriptionStore[result] = true;
    return result;
  };
  copyConstructorProperties(SymbolWrapper, NativeSymbol);
  var symbolPrototype = SymbolWrapper.prototype = NativeSymbol.prototype;
  symbolPrototype.constructor = SymbolWrapper;

  var symbolToString = symbolPrototype.toString;
  var nativeSymbol = String(NativeSymbol('test')) == 'Symbol(test)';
  var regexp = /^Symbol\((.*)\)[^)]+$/;
  defineProperty(symbolPrototype, 'description', {
    configurable: true,
    get: function description() {
      var symbol = isObject(this) ? this.valueOf() : this;
      var string = symbolToString.call(symbol);
      if (has(EmptyStringDescriptionStore, symbol)) return '';
      var desc = nativeSymbol ? string.slice(7, -1) : string.replace(regexp, '$1');
      return desc === '' ? undefined : desc;
    }
  });

  $({ global: true, forced: true }, {
    Symbol: SymbolWrapper
  });
}


/***/ }),

/***/ "./node_modules/core-js/modules/es.symbol.iterator.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es.symbol.iterator.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

var defineWellKnownSymbol = __webpack_require__(/*! ../internals/define-well-known-symbol */ "./node_modules/core-js/internals/define-well-known-symbol.js");

// `Symbol.iterator` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.iterator
defineWellKnownSymbol('iterator');


/***/ }),

/***/ "./node_modules/core-js/modules/es.symbol.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/modules/es.symbol.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");
var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var NATIVE_SYMBOL = __webpack_require__(/*! ../internals/native-symbol */ "./node_modules/core-js/internals/native-symbol.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var isArray = __webpack_require__(/*! ../internals/is-array */ "./node_modules/core-js/internals/is-array.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var isSymbol = __webpack_require__(/*! ../internals/is-symbol */ "./node_modules/core-js/internals/is-symbol.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var toPropertyKey = __webpack_require__(/*! ../internals/to-property-key */ "./node_modules/core-js/internals/to-property-key.js");
var $toString = __webpack_require__(/*! ../internals/to-string */ "./node_modules/core-js/internals/to-string.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");
var nativeObjectCreate = __webpack_require__(/*! ../internals/object-create */ "./node_modules/core-js/internals/object-create.js");
var objectKeys = __webpack_require__(/*! ../internals/object-keys */ "./node_modules/core-js/internals/object-keys.js");
var getOwnPropertyNamesModule = __webpack_require__(/*! ../internals/object-get-own-property-names */ "./node_modules/core-js/internals/object-get-own-property-names.js");
var getOwnPropertyNamesExternal = __webpack_require__(/*! ../internals/object-get-own-property-names-external */ "./node_modules/core-js/internals/object-get-own-property-names-external.js");
var getOwnPropertySymbolsModule = __webpack_require__(/*! ../internals/object-get-own-property-symbols */ "./node_modules/core-js/internals/object-get-own-property-symbols.js");
var getOwnPropertyDescriptorModule = __webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "./node_modules/core-js/internals/object-get-own-property-descriptor.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");
var propertyIsEnumerableModule = __webpack_require__(/*! ../internals/object-property-is-enumerable */ "./node_modules/core-js/internals/object-property-is-enumerable.js");
var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");
var shared = __webpack_require__(/*! ../internals/shared */ "./node_modules/core-js/internals/shared.js");
var sharedKey = __webpack_require__(/*! ../internals/shared-key */ "./node_modules/core-js/internals/shared-key.js");
var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "./node_modules/core-js/internals/hidden-keys.js");
var uid = __webpack_require__(/*! ../internals/uid */ "./node_modules/core-js/internals/uid.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var wrappedWellKnownSymbolModule = __webpack_require__(/*! ../internals/well-known-symbol-wrapped */ "./node_modules/core-js/internals/well-known-symbol-wrapped.js");
var defineWellKnownSymbol = __webpack_require__(/*! ../internals/define-well-known-symbol */ "./node_modules/core-js/internals/define-well-known-symbol.js");
var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "./node_modules/core-js/internals/set-to-string-tag.js");
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js");
var $forEach = __webpack_require__(/*! ../internals/array-iteration */ "./node_modules/core-js/internals/array-iteration.js").forEach;

var HIDDEN = sharedKey('hidden');
var SYMBOL = 'Symbol';
var PROTOTYPE = 'prototype';
var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(SYMBOL);
var ObjectPrototype = Object[PROTOTYPE];
var $Symbol = global.Symbol;
var $stringify = getBuiltIn('JSON', 'stringify');
var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
var nativeDefineProperty = definePropertyModule.f;
var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
var AllSymbols = shared('symbols');
var ObjectPrototypeSymbols = shared('op-symbols');
var StringToSymbolRegistry = shared('string-to-symbol-registry');
var SymbolToStringRegistry = shared('symbol-to-string-registry');
var WellKnownSymbolsStore = shared('wks');
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDescriptor = DESCRIPTORS && fails(function () {
  return nativeObjectCreate(nativeDefineProperty({}, 'a', {
    get: function () { return nativeDefineProperty(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (O, P, Attributes) {
  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, P);
  if (ObjectPrototypeDescriptor) delete ObjectPrototype[P];
  nativeDefineProperty(O, P, Attributes);
  if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {
    nativeDefineProperty(ObjectPrototype, P, ObjectPrototypeDescriptor);
  }
} : nativeDefineProperty;

var wrap = function (tag, description) {
  var symbol = AllSymbols[tag] = nativeObjectCreate($Symbol[PROTOTYPE]);
  setInternalState(symbol, {
    type: SYMBOL,
    tag: tag,
    description: description
  });
  if (!DESCRIPTORS) symbol.description = description;
  return symbol;
};

var $defineProperty = function defineProperty(O, P, Attributes) {
  if (O === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
  anObject(O);
  var key = toPropertyKey(P);
  anObject(Attributes);
  if (has(AllSymbols, key)) {
    if (!Attributes.enumerable) {
      if (!has(O, HIDDEN)) nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));
      O[HIDDEN][key] = true;
    } else {
      if (has(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
      Attributes = nativeObjectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });
    } return setSymbolDescriptor(O, key, Attributes);
  } return nativeDefineProperty(O, key, Attributes);
};

var $defineProperties = function defineProperties(O, Properties) {
  anObject(O);
  var properties = toIndexedObject(Properties);
  var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
  $forEach(keys, function (key) {
    if (!DESCRIPTORS || $propertyIsEnumerable.call(properties, key)) $defineProperty(O, key, properties[key]);
  });
  return O;
};

var $create = function create(O, Properties) {
  return Properties === undefined ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);
};

var $propertyIsEnumerable = function propertyIsEnumerable(V) {
  var P = toPropertyKey(V);
  var enumerable = nativePropertyIsEnumerable.call(this, P);
  if (this === ObjectPrototype && has(AllSymbols, P) && !has(ObjectPrototypeSymbols, P)) return false;
  return enumerable || !has(this, P) || !has(AllSymbols, P) || has(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
};

var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
  var it = toIndexedObject(O);
  var key = toPropertyKey(P);
  if (it === ObjectPrototype && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key)) return;
  var descriptor = nativeGetOwnPropertyDescriptor(it, key);
  if (descriptor && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) {
    descriptor.enumerable = true;
  }
  return descriptor;
};

var $getOwnPropertyNames = function getOwnPropertyNames(O) {
  var names = nativeGetOwnPropertyNames(toIndexedObject(O));
  var result = [];
  $forEach(names, function (key) {
    if (!has(AllSymbols, key) && !has(hiddenKeys, key)) result.push(key);
  });
  return result;
};

var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
  var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
  var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
  var result = [];
  $forEach(names, function (key) {
    if (has(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || has(ObjectPrototype, key))) {
      result.push(AllSymbols[key]);
    }
  });
  return result;
};

// `Symbol` constructor
// https://tc39.es/ecma262/#sec-symbol-constructor
if (!NATIVE_SYMBOL) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor');
    var description = !arguments.length || arguments[0] === undefined ? undefined : $toString(arguments[0]);
    var tag = uid(description);
    var setter = function (value) {
      if (this === ObjectPrototype) setter.call(ObjectPrototypeSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
    };
    if (DESCRIPTORS && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, { configurable: true, set: setter });
    return wrap(tag, description);
  };

  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return getInternalState(this).tag;
  });

  redefine($Symbol, 'withoutSetter', function (description) {
    return wrap(uid(description), description);
  });

  propertyIsEnumerableModule.f = $propertyIsEnumerable;
  definePropertyModule.f = $defineProperty;
  getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
  getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
  getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;

  wrappedWellKnownSymbolModule.f = function (name) {
    return wrap(wellKnownSymbol(name), name);
  };

  if (DESCRIPTORS) {
    // https://github.com/tc39/proposal-Symbol-description
    nativeDefineProperty($Symbol[PROTOTYPE], 'description', {
      configurable: true,
      get: function description() {
        return getInternalState(this).description;
      }
    });
    if (!IS_PURE) {
      redefine(ObjectPrototype, 'propertyIsEnumerable', $propertyIsEnumerable, { unsafe: true });
    }
  }
}

$({ global: true, wrap: true, forced: !NATIVE_SYMBOL, sham: !NATIVE_SYMBOL }, {
  Symbol: $Symbol
});

$forEach(objectKeys(WellKnownSymbolsStore), function (name) {
  defineWellKnownSymbol(name);
});

$({ target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL }, {
  // `Symbol.for` method
  // https://tc39.es/ecma262/#sec-symbol.for
  'for': function (key) {
    var string = $toString(key);
    if (has(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
    var symbol = $Symbol(string);
    StringToSymbolRegistry[string] = symbol;
    SymbolToStringRegistry[symbol] = string;
    return symbol;
  },
  // `Symbol.keyFor` method
  // https://tc39.es/ecma262/#sec-symbol.keyfor
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol');
    if (has(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
  },
  useSetter: function () { USE_SETTER = true; },
  useSimple: function () { USE_SETTER = false; }
});

$({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL, sham: !DESCRIPTORS }, {
  // `Object.create` method
  // https://tc39.es/ecma262/#sec-object.create
  create: $create,
  // `Object.defineProperty` method
  // https://tc39.es/ecma262/#sec-object.defineproperty
  defineProperty: $defineProperty,
  // `Object.defineProperties` method
  // https://tc39.es/ecma262/#sec-object.defineproperties
  defineProperties: $defineProperties,
  // `Object.getOwnPropertyDescriptor` method
  // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor
});

$({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL }, {
  // `Object.getOwnPropertyNames` method
  // https://tc39.es/ecma262/#sec-object.getownpropertynames
  getOwnPropertyNames: $getOwnPropertyNames,
  // `Object.getOwnPropertySymbols` method
  // https://tc39.es/ecma262/#sec-object.getownpropertysymbols
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443
$({ target: 'Object', stat: true, forced: fails(function () { getOwnPropertySymbolsModule.f(1); }) }, {
  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
    return getOwnPropertySymbolsModule.f(toObject(it));
  }
});

// `JSON.stringify` method behavior with symbols
// https://tc39.es/ecma262/#sec-json.stringify
if ($stringify) {
  var FORCED_JSON_STRINGIFY = !NATIVE_SYMBOL || fails(function () {
    var symbol = $Symbol();
    // MS Edge converts symbol values to JSON as {}
    return $stringify([symbol]) != '[null]'
      // WebKit converts symbol values to JSON as null
      || $stringify({ a: symbol }) != '{}'
      // V8 throws on boxed symbols
      || $stringify(Object(symbol)) != '{}';
  });

  $({ target: 'JSON', stat: true, forced: FORCED_JSON_STRINGIFY }, {
    // eslint-disable-next-line no-unused-vars -- required for `.length`
    stringify: function stringify(it, replacer, space) {
      var args = [it];
      var index = 1;
      var $replacer;
      while (arguments.length > index) args.push(arguments[index++]);
      $replacer = replacer;
      if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
      if (!isArray(replacer)) replacer = function (key, value) {
        if (isCallable($replacer)) value = $replacer.call(this, key, value);
        if (!isSymbol(value)) return value;
      };
      args[1] = replacer;
      return $stringify.apply(null, args);
    }
  });
}

// `Symbol.prototype[@@toPrimitive]` method
// https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive
if (!$Symbol[PROTOTYPE][TO_PRIMITIVE]) {
  var valueOf = $Symbol[PROTOTYPE].valueOf;
  redefine($Symbol[PROTOTYPE], TO_PRIMITIVE, function () {
    return valueOf.apply(this, arguments);
  });
}
// `Symbol.prototype[@@toStringTag]` property
// https://tc39.es/ecma262/#sec-symbol.prototype-@@tostringtag
setToStringTag($Symbol, SYMBOL);

hiddenKeys[HIDDEN] = true;


/***/ }),

/***/ "./node_modules/core-js/modules/esnext.global-this.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/esnext.global-this.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

// TODO: Remove from `core-js@4`
__webpack_require__(/*! ../modules/es.global-this */ "./node_modules/core-js/modules/es.global-this.js");


/***/ }),

/***/ "./node_modules/core-js/modules/web.dom-collections.for-each.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/modules/web.dom-collections.for-each.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var DOMIterables = __webpack_require__(/*! ../internals/dom-iterables */ "./node_modules/core-js/internals/dom-iterables.js");
var DOMTokenListPrototype = __webpack_require__(/*! ../internals/dom-token-list-prototype */ "./node_modules/core-js/internals/dom-token-list-prototype.js");
var forEach = __webpack_require__(/*! ../internals/array-for-each */ "./node_modules/core-js/internals/array-for-each.js");
var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "./node_modules/core-js/internals/create-non-enumerable-property.js");

var handlePrototype = function (CollectionPrototype) {
  // some Chrome versions have non-configurable methods on DOMTokenList
  if (CollectionPrototype && CollectionPrototype.forEach !== forEach) try {
    createNonEnumerableProperty(CollectionPrototype, 'forEach', forEach);
  } catch (error) {
    CollectionPrototype.forEach = forEach;
  }
};

for (var COLLECTION_NAME in DOMIterables) {
  if (DOMIterables[COLLECTION_NAME]) {
    handlePrototype(global[COLLECTION_NAME] && global[COLLECTION_NAME].prototype);
  }
}

handlePrototype(DOMTokenListPrototype);


/***/ }),

/***/ "./node_modules/core-js/modules/web.dom-collections.iterator.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/modules/web.dom-collections.iterator.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var DOMIterables = __webpack_require__(/*! ../internals/dom-iterables */ "./node_modules/core-js/internals/dom-iterables.js");
var DOMTokenListPrototype = __webpack_require__(/*! ../internals/dom-token-list-prototype */ "./node_modules/core-js/internals/dom-token-list-prototype.js");
var ArrayIteratorMethods = __webpack_require__(/*! ../modules/es.array.iterator */ "./node_modules/core-js/modules/es.array.iterator.js");
var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "./node_modules/core-js/internals/create-non-enumerable-property.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

var ITERATOR = wellKnownSymbol('iterator');
var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var ArrayValues = ArrayIteratorMethods.values;

var handlePrototype = function (CollectionPrototype, COLLECTION_NAME) {
  if (CollectionPrototype) {
    // some Chrome versions have non-configurable methods on DOMTokenList
    if (CollectionPrototype[ITERATOR] !== ArrayValues) try {
      createNonEnumerableProperty(CollectionPrototype, ITERATOR, ArrayValues);
    } catch (error) {
      CollectionPrototype[ITERATOR] = ArrayValues;
    }
    if (!CollectionPrototype[TO_STRING_TAG]) {
      createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
    }
    if (DOMIterables[COLLECTION_NAME]) for (var METHOD_NAME in ArrayIteratorMethods) {
      // some Chrome versions have non-configurable methods on DOMTokenList
      if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {
        createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
      } catch (error) {
        CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
      }
    }
  }
};

for (var COLLECTION_NAME in DOMIterables) {
  handlePrototype(global[COLLECTION_NAME] && global[COLLECTION_NAME].prototype, COLLECTION_NAME);
}

handlePrototype(DOMTokenListPrototype, 'DOMTokenList');


/***/ }),

/***/ "./node_modules/core-js/modules/web.immediate.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/web.immediate.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var task = __webpack_require__(/*! ../internals/task */ "./node_modules/core-js/internals/task.js");

var FORCED = !global.setImmediate || !global.clearImmediate;

// http://w3c.github.io/setImmediate/
$({ global: true, bind: true, enumerable: true, forced: FORCED }, {
  // `setImmediate` method
  // http://w3c.github.io/setImmediate/#si-setImmediate
  setImmediate: task.set,
  // `clearImmediate` method
  // http://w3c.github.io/setImmediate/#si-clearImmediate
  clearImmediate: task.clear
});


/***/ }),

/***/ "./node_modules/uikit/src/images/components/close-icon.svg":
/*!*****************************************************************!*\
  !*** ./node_modules/uikit/src/images/components/close-icon.svg ***!
  \*****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = __webpack_require__.p + "images/close-icon.d44b157b.svg";

/***/ }),

/***/ "./node_modules/uikit/src/images/components/close-large.svg":
/*!******************************************************************!*\
  !*** ./node_modules/uikit/src/images/components/close-large.svg ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = __webpack_require__.p + "images/close-large.876704cc.svg";

/***/ }),

/***/ "./node_modules/uikit/src/images/components/marker.svg":
/*!*************************************************************!*\
  !*** ./node_modules/uikit/src/images/components/marker.svg ***!
  \*************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = __webpack_require__.p + "images/marker.064a9122.svg";

/***/ }),

/***/ "./node_modules/uikit/src/images/components/navbar-toggle-icon.svg":
/*!*************************************************************************!*\
  !*** ./node_modules/uikit/src/images/components/navbar-toggle-icon.svg ***!
  \*************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = __webpack_require__.p + "images/navbar-toggle-icon.89c46c98.svg";

/***/ }),

/***/ "./node_modules/uikit/src/images/components/overlay-icon.svg":
/*!*******************************************************************!*\
  !*** ./node_modules/uikit/src/images/components/overlay-icon.svg ***!
  \*******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = __webpack_require__.p + "images/overlay-icon.a22620ce.svg";

/***/ }),

/***/ "./node_modules/uikit/src/images/components/pagination-next.svg":
/*!**********************************************************************!*\
  !*** ./node_modules/uikit/src/images/components/pagination-next.svg ***!
  \**********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = __webpack_require__.p + "images/pagination-next.ff138db6.svg";

/***/ }),

/***/ "./node_modules/uikit/src/images/components/pagination-previous.svg":
/*!**************************************************************************!*\
  !*** ./node_modules/uikit/src/images/components/pagination-previous.svg ***!
  \**************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = __webpack_require__.p + "images/pagination-previous.ca1a712d.svg";

/***/ }),

/***/ "./node_modules/uikit/src/images/components/search-icon.svg":
/*!******************************************************************!*\
  !*** ./node_modules/uikit/src/images/components/search-icon.svg ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = __webpack_require__.p + "images/search-icon.2c3603a2.svg";

/***/ }),

/***/ "./node_modules/uikit/src/images/components/search-large.svg":
/*!*******************************************************************!*\
  !*** ./node_modules/uikit/src/images/components/search-large.svg ***!
  \*******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = __webpack_require__.p + "images/search-large.4c59b68b.svg";

/***/ }),

/***/ "./node_modules/uikit/src/images/components/search-navbar.svg":
/*!********************************************************************!*\
  !*** ./node_modules/uikit/src/images/components/search-navbar.svg ***!
  \********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = __webpack_require__.p + "images/search-navbar.d8dab4a5.svg";

/***/ }),

/***/ "./node_modules/uikit/src/images/components/slidenav-next-large.svg":
/*!**************************************************************************!*\
  !*** ./node_modules/uikit/src/images/components/slidenav-next-large.svg ***!
  \**************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = __webpack_require__.p + "images/slidenav-next-large.03d7d668.svg";

/***/ }),

/***/ "./node_modules/uikit/src/images/components/slidenav-next.svg":
/*!********************************************************************!*\
  !*** ./node_modules/uikit/src/images/components/slidenav-next.svg ***!
  \********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = __webpack_require__.p + "images/slidenav-next.fa281480.svg";

/***/ }),

/***/ "./node_modules/uikit/src/images/components/slidenav-previous-large.svg":
/*!******************************************************************************!*\
  !*** ./node_modules/uikit/src/images/components/slidenav-previous-large.svg ***!
  \******************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = __webpack_require__.p + "images/slidenav-previous-large.119ca30d.svg";

/***/ }),

/***/ "./node_modules/uikit/src/images/components/slidenav-previous.svg":
/*!************************************************************************!*\
  !*** ./node_modules/uikit/src/images/components/slidenav-previous.svg ***!
  \************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = __webpack_require__.p + "images/slidenav-previous.1b7d4825.svg";

/***/ }),

/***/ "./node_modules/uikit/src/images/components/spinner.svg":
/*!**************************************************************!*\
  !*** ./node_modules/uikit/src/images/components/spinner.svg ***!
  \**************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = __webpack_require__.p + "images/spinner.3550941d.svg";

/***/ }),

/***/ "./node_modules/uikit/src/images/components/totop.svg":
/*!************************************************************!*\
  !*** ./node_modules/uikit/src/images/components/totop.svg ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = __webpack_require__.p + "images/totop.5638de2d.svg";

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	!function() {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = function(module) {
/******/ 			var getter = module && module.__esModule ?
/******/ 				function() { return module['default']; } :
/******/ 				function() { return module; };
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	!function() {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	!function() {
/******/ 		__webpack_require__.p = "/build/";
/******/ 	}();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
!function() {
"use strict";
/*!*****************************************!*\
  !*** ./assets/js/index.js + 94 modules ***!
  \*****************************************/
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// NAMESPACE OBJECT: ./node_modules/uikit/src/js/util/index.js
var util_namespaceObject = {};
__webpack_require__.r(util_namespaceObject);
__webpack_require__.d(util_namespaceObject, {
  "$": function() { return $; },
  "$$": function() { return $$; },
  "Animation": function() { return Animation; },
  "Deferred": function() { return Deferred; },
  "Dimensions": function() { return Dimensions; },
  "MouseTracker": function() { return MouseTracker; },
  "Promise": function() { return Promise; },
  "Transition": function() { return Transition; },
  "addClass": function() { return addClass; },
  "after": function() { return after; },
  "ajax": function() { return ajax; },
  "animate": function() { return animate; },
  "append": function() { return append; },
  "apply": function() { return apply; },
  "assign": function() { return lang_assign; },
  "attr": function() { return attr; },
  "before": function() { return before; },
  "boxModelAdjust": function() { return boxModelAdjust; },
  "camelize": function() { return camelize; },
  "children": function() { return filter_children; },
  "clamp": function() { return clamp; },
  "closest": function() { return closest; },
  "createEvent": function() { return createEvent; },
  "css": function() { return css; },
  "data": function() { return attr_data; },
  "dimensions": function() { return dimensions; },
  "each": function() { return each; },
  "empty": function() { return empty; },
  "endsWith": function() { return endsWith; },
  "escape": function() { return selector_escape; },
  "fastdom": function() { return fastdom; },
  "filter": function() { return filter; },
  "find": function() { return find; },
  "findAll": function() { return findAll; },
  "findIndex": function() { return findIndex; },
  "flipPosition": function() { return flipPosition; },
  "fragment": function() { return fragment; },
  "getCssVar": function() { return getCssVar; },
  "getEventPos": function() { return getEventPos; },
  "getImage": function() { return getImage; },
  "getIndex": function() { return lang_getIndex; },
  "getViewport": function() { return getViewport; },
  "getViewportClientHeight": function() { return getViewportClientHeight; },
  "hasAttr": function() { return hasAttr; },
  "hasClass": function() { return hasClass; },
  "hasOwn": function() { return hasOwn; },
  "hasTouch": function() { return hasTouch; },
  "height": function() { return dimensions_height; },
  "html": function() { return html; },
  "hyphenate": function() { return hyphenate; },
  "inBrowser": function() { return inBrowser; },
  "includes": function() { return includes; },
  "index": function() { return index; },
  "intersectRect": function() { return intersectRect; },
  "isArray": function() { return isArray; },
  "isBoolean": function() { return isBoolean; },
  "isDocument": function() { return isDocument; },
  "isElement": function() { return isElement; },
  "isEmpty": function() { return isEmpty; },
  "isEqual": function() { return isEqual; },
  "isFocusable": function() { return isFocusable; },
  "isFunction": function() { return isFunction; },
  "isIE": function() { return isIE; },
  "isInView": function() { return isInView; },
  "isInput": function() { return isInput; },
  "isNode": function() { return isNode; },
  "isNumber": function() { return isNumber; },
  "isNumeric": function() { return isNumeric; },
  "isObject": function() { return isObject; },
  "isPlainObject": function() { return isPlainObject; },
  "isRtl": function() { return isRtl; },
  "isString": function() { return isString; },
  "isTouch": function() { return isTouch; },
  "isUndefined": function() { return isUndefined; },
  "isVisible": function() { return isVisible; },
  "isVoidElement": function() { return isVoidElement; },
  "isWindow": function() { return isWindow; },
  "last": function() { return last; },
  "matches": function() { return matches; },
  "memoize": function() { return memoize; },
  "mergeOptions": function() { return mergeOptions; },
  "mute": function() { return mute; },
  "noop": function() { return noop; },
  "off": function() { return off; },
  "offset": function() { return dimensions_offset; },
  "offsetPosition": function() { return offsetPosition; },
  "on": function() { return on; },
  "once": function() { return once; },
  "parent": function() { return filter_parent; },
  "parents": function() { return parents; },
  "parseOptions": function() { return parseOptions; },
  "pause": function() { return pause; },
  "play": function() { return play; },
  "pointInRect": function() { return pointInRect; },
  "pointerCancel": function() { return pointerCancel; },
  "pointerDown": function() { return pointerDown; },
  "pointerEnter": function() { return pointerEnter; },
  "pointerLeave": function() { return pointerLeave; },
  "pointerMove": function() { return pointerMove; },
  "pointerUp": function() { return pointerUp; },
  "position": function() { return position; },
  "positionAt": function() { return position_positionAt; },
  "prepend": function() { return prepend; },
  "propName": function() { return propName; },
  "query": function() { return query; },
  "queryAll": function() { return queryAll; },
  "ready": function() { return ready; },
  "remove": function() { return dom_remove; },
  "removeAttr": function() { return removeAttr; },
  "removeClass": function() { return removeClass; },
  "removeClasses": function() { return removeClasses; },
  "replaceClass": function() { return replaceClass; },
  "scrollIntoView": function() { return scrollIntoView; },
  "scrollParents": function() { return scrollParents; },
  "scrollTop": function() { return scrollTop; },
  "scrolledOver": function() { return scrolledOver; },
  "selFocusable": function() { return selFocusable; },
  "selInput": function() { return selInput; },
  "sortBy": function() { return sortBy; },
  "startsWith": function() { return startsWith; },
  "swap": function() { return swap; },
  "toArray": function() { return toArray; },
  "toBoolean": function() { return toBoolean; },
  "toEventTargets": function() { return toEventTargets; },
  "toFloat": function() { return toFloat; },
  "toMs": function() { return toMs; },
  "toNode": function() { return toNode; },
  "toNodes": function() { return toNodes; },
  "toNumber": function() { return toNumber; },
  "toPx": function() { return toPx; },
  "toWindow": function() { return toWindow; },
  "toggleClass": function() { return toggleClass; },
  "transition": function() { return transition; },
  "trigger": function() { return trigger; },
  "ucfirst": function() { return ucfirst; },
  "uniqueBy": function() { return uniqueBy; },
  "unwrap": function() { return unwrap; },
  "width": function() { return width; },
  "within": function() { return within; },
  "wrapAll": function() { return wrapAll; },
  "wrapInner": function() { return wrapInner; }
});

// EXTERNAL MODULE: ./node_modules/core-js/modules/web.dom-collections.for-each.js
var web_dom_collections_for_each = __webpack_require__("./node_modules/core-js/modules/web.dom-collections.for-each.js");
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.slice.js
var es_array_slice = __webpack_require__("./node_modules/core-js/modules/es.array.slice.js");
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.map.js
var es_array_map = __webpack_require__("./node_modules/core-js/modules/es.array.map.js");
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.function.name.js
var es_function_name = __webpack_require__("./node_modules/core-js/modules/es.function.name.js");
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.concat.js
var es_array_concat = __webpack_require__("./node_modules/core-js/modules/es.array.concat.js");
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.exec.js
var es_regexp_exec = __webpack_require__("./node_modules/core-js/modules/es.regexp.exec.js");
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.replace.js
var es_string_replace = __webpack_require__("./node_modules/core-js/modules/es.string.replace.js");
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.starts-with.js
var es_string_starts_with = __webpack_require__("./node_modules/core-js/modules/es.string.starts-with.js");
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.ends-with.js
var es_string_ends_with = __webpack_require__("./node_modules/core-js/modules/es.string.ends-with.js");
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.includes.js
var es_array_includes = __webpack_require__("./node_modules/core-js/modules/es.array.includes.js");
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.includes.js
var es_string_includes = __webpack_require__("./node_modules/core-js/modules/es.string.includes.js");
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.find-index.js
var es_array_find_index = __webpack_require__("./node_modules/core-js/modules/es.array.find-index.js");
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.to-string.js
var es_object_to_string = __webpack_require__("./node_modules/core-js/modules/es.object.to-string.js");
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.to-string.js
var es_regexp_to_string = __webpack_require__("./node_modules/core-js/modules/es.regexp.to-string.js");
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.keys.js
var es_object_keys = __webpack_require__("./node_modules/core-js/modules/es.object.keys.js");
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.number.constructor.js
var es_number_constructor = __webpack_require__("./node_modules/core-js/modules/es.number.constructor.js");
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.from.js
var es_array_from = __webpack_require__("./node_modules/core-js/modules/es.array.from.js");
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.iterator.js
var es_string_iterator = __webpack_require__("./node_modules/core-js/modules/es.string.iterator.js");
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.filter.js
var es_array_filter = __webpack_require__("./node_modules/core-js/modules/es.array.filter.js");
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.constructor.js
var es_regexp_constructor = __webpack_require__("./node_modules/core-js/modules/es.regexp.constructor.js");
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.assign.js
var es_object_assign = __webpack_require__("./node_modules/core-js/modules/es.object.assign.js");
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.sort.js
var es_array_sort = __webpack_require__("./node_modules/core-js/modules/es.array.sort.js");
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.iterator.js
var es_array_iterator = __webpack_require__("./node_modules/core-js/modules/es.array.iterator.js");
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.set.js
var es_set = __webpack_require__("./node_modules/core-js/modules/es.set.js");
// EXTERNAL MODULE: ./node_modules/core-js/modules/web.dom-collections.iterator.js
var web_dom_collections_iterator = __webpack_require__("./node_modules/core-js/modules/web.dom-collections.iterator.js");
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.js
var es_symbol = __webpack_require__("./node_modules/core-js/modules/es.symbol.js");
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.description.js
var es_symbol_description = __webpack_require__("./node_modules/core-js/modules/es.symbol.description.js");
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.iterator.js
var es_symbol_iterator = __webpack_require__("./node_modules/core-js/modules/es.symbol.iterator.js");
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/util/lang.js
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }




























var objPrototype = Object.prototype;
var lang_hasOwnProperty = objPrototype.hasOwnProperty;
function hasOwn(obj, key) {
  return lang_hasOwnProperty.call(obj, key);
}
var hyphenateRe = /\B([A-Z])/g;
var hyphenate = memoize(function (str) {
  return str.replace(hyphenateRe, '-$1').toLowerCase();
});
var camelizeRe = /-(\w)/g;
var camelize = memoize(function (str) {
  return str.replace(camelizeRe, toUpper);
});
var ucfirst = memoize(function (str) {
  return str.length ? toUpper(null, str.charAt(0)) + str.slice(1) : '';
});

function toUpper(_, c) {
  return c ? c.toUpperCase() : '';
}

var strPrototype = String.prototype;

var startsWithFn = strPrototype.startsWith || function (search) {
  return this.lastIndexOf(search, 0) === 0;
};

function startsWith(str, search) {
  return startsWithFn.call(str, search);
}

var endsWithFn = strPrototype.endsWith || function (search) {
  return this.substr(-search.length) === search;
};

function endsWith(str, search) {
  return endsWithFn.call(str, search);
}
var arrPrototype = Array.prototype;

var includesFn = function includesFn(search, i) {
  return !!~this.indexOf(search, i);
};

var includesStr = strPrototype.includes || includesFn;
var includesArray = arrPrototype.includes || includesFn;
function includes(obj, search) {
  return obj && (isString(obj) ? includesStr : includesArray).call(obj, search);
}

var findIndexFn = arrPrototype.findIndex || function (predicate) {
  for (var i = 0; i < this.length; i++) {
    if (predicate.call(arguments[1], this[i], i, this)) {
      return i;
    }
  }

  return -1;
};

function findIndex(array, predicate) {
  return findIndexFn.call(array, predicate);
}
var isArray = Array.isArray;

function isFunction(obj) {
  return typeof obj === 'function';
}
function isObject(obj) {
  return obj !== null && _typeof(obj) === 'object';
}
var lang_toString = objPrototype.toString;
function isPlainObject(obj) {
  return lang_toString.call(obj) === '[object Object]';
}
function isWindow(obj) {
  return isObject(obj) && obj === obj.window;
}
function isDocument(obj) {
  return nodeType(obj) === 9;
}
function isNode(obj) {
  return nodeType(obj) >= 1;
}
function isElement(obj) {
  return nodeType(obj) === 1;
}

function nodeType(obj) {
  return !isWindow(obj) && isObject(obj) && obj.nodeType;
}

function isBoolean(value) {
  return typeof value === 'boolean';
}
function isString(value) {
  return typeof value === 'string';
}
function isNumber(value) {
  return typeof value === 'number';
}
function isNumeric(value) {
  return isNumber(value) || isString(value) && !isNaN(value - parseFloat(value));
}
function isEmpty(obj) {
  return !(isArray(obj) ? obj.length : isObject(obj) ? Object.keys(obj).length : false);
}
function isUndefined(value) {
  return value === void 0;
}
function toBoolean(value) {
  return isBoolean(value) ? value : value === 'true' || value === '1' || value === '' ? true : value === 'false' || value === '0' ? false : value;
}
function toNumber(value) {
  var number = Number(value);
  return !isNaN(number) ? number : false;
}
function toFloat(value) {
  return parseFloat(value) || 0;
}
var toArray = Array.from || function (value) {
  return arrPrototype.slice.call(value);
};
function toNode(element) {
  return toNodes(element)[0];
}
function toNodes(element) {
  return element && (isNode(element) ? [element] : toArray(element).filter(isNode)) || [];
}
function toWindow(element) {
  if (isWindow(element)) {
    return element;
  }

  element = toNode(element);
  return element ? (isDocument(element) ? element : element.ownerDocument).defaultView : window;
}
function toMs(time) {
  return !time ? 0 : endsWith(time, 'ms') ? toFloat(time) : toFloat(time) * 1000;
}
function isEqual(value, other) {
  return value === other || isObject(value) && isObject(other) && Object.keys(value).length === Object.keys(other).length && each(value, function (val, key) {
    return val === other[key];
  });
}
function swap(value, a, b) {
  return value.replace(new RegExp("".concat(a, "|").concat(b), 'g'), function (match) {
    return match === a ? b : a;
  });
}
var lang_assign = Object.assign || function (target) {
  target = Object(target);

  for (var i = 0; i < (arguments.length <= 1 ? 0 : arguments.length - 1); i++) {
    var source = i + 1 < 1 || arguments.length <= i + 1 ? undefined : arguments[i + 1];

    if (source !== null) {
      for (var key in source) {
        if (hasOwn(source, key)) {
          target[key] = source[key];
        }
      }
    }
  }

  return target;
};
function last(array) {
  return array[array.length - 1];
}
function each(obj, cb) {
  for (var key in obj) {
    if (false === cb(obj[key], key)) {
      return false;
    }
  }

  return true;
}
function sortBy(array, prop) {
  return array.slice().sort(function (_ref, _ref2) {
    var _ref$prop = _ref[prop],
        propA = _ref$prop === void 0 ? 0 : _ref$prop;
    var _ref2$prop = _ref2[prop],
        propB = _ref2$prop === void 0 ? 0 : _ref2$prop;
    return propA > propB ? 1 : propB > propA ? -1 : 0;
  });
}
function uniqueBy(array, prop) {
  var seen = new Set();
  return array.filter(function (_ref3) {
    var check = _ref3[prop];
    return seen.has(check) ? false : seen.add(check) || true;
  } // IE 11 does not return the Set object
  );
}
function clamp(number) {
  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
  return Math.min(Math.max(toNumber(number) || 0, min), max);
}
function noop() {}
function intersectRect() {
  for (var _len = arguments.length, rects = new Array(_len), _key = 0; _key < _len; _key++) {
    rects[_key] = arguments[_key];
  }

  return [['bottom', 'top'], ['right', 'left']].every(function (_ref4) {
    var _ref5 = _slicedToArray(_ref4, 2),
        minProp = _ref5[0],
        maxProp = _ref5[1];

    return Math.min.apply(Math, _toConsumableArray(rects.map(function (_ref6) {
      var min = _ref6[minProp];
      return min;
    }))) - Math.max.apply(Math, _toConsumableArray(rects.map(function (_ref7) {
      var max = _ref7[maxProp];
      return max;
    }))) > 0;
  });
}
function pointInRect(point, rect) {
  return point.x <= rect.right && point.x >= rect.left && point.y <= rect.bottom && point.y >= rect.top;
}
var Dimensions = {
  ratio: function ratio(dimensions, prop, value) {
    var _ref8;

    var aProp = prop === 'width' ? 'height' : 'width';
    return _ref8 = {}, _defineProperty(_ref8, aProp, dimensions[prop] ? Math.round(value * dimensions[aProp] / dimensions[prop]) : dimensions[aProp]), _defineProperty(_ref8, prop, value), _ref8;
  },
  contain: function contain(dimensions, maxDimensions) {
    var _this = this;

    dimensions = lang_assign({}, dimensions);
    each(dimensions, function (_, prop) {
      return dimensions = dimensions[prop] > maxDimensions[prop] ? _this.ratio(dimensions, prop, maxDimensions[prop]) : dimensions;
    });
    return dimensions;
  },
  cover: function cover(dimensions, maxDimensions) {
    var _this2 = this;

    dimensions = this.contain(dimensions, maxDimensions);
    each(dimensions, function (_, prop) {
      return dimensions = dimensions[prop] < maxDimensions[prop] ? _this2.ratio(dimensions, prop, maxDimensions[prop]) : dimensions;
    });
    return dimensions;
  }
};
function lang_getIndex(i, elements) {
  var current = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var finite = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  elements = toNodes(elements);
  var _elements = elements,
      length = _elements.length;
  i = isNumeric(i) ? toNumber(i) : i === 'next' ? current + 1 : i === 'previous' ? current - 1 : elements.indexOf(toNode(i));

  if (finite) {
    return clamp(i, 0, length - 1);
  }

  i %= length;
  return i < 0 ? i + length : i;
}
function memoize(fn) {
  var cache = Object.create(null);
  return function (key) {
    return cache[key] || (cache[key] = fn(key));
  };
}
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.trim.js
var es_string_trim = __webpack_require__("./node_modules/core-js/modules/es.string.trim.js");
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.match.js
var es_string_match = __webpack_require__("./node_modules/core-js/modules/es.string.match.js");
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.split.js
var es_string_split = __webpack_require__("./node_modules/core-js/modules/es.string.split.js");
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.splice.js
var es_array_splice = __webpack_require__("./node_modules/core-js/modules/es.array.splice.js");
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/util/attr.js




function attr(element, name, value) {
  if (isObject(name)) {
    for (var key in name) {
      attr(element, key, name[key]);
    }

    return;
  }

  if (isUndefined(value)) {
    element = toNode(element);
    return element && element.getAttribute(name);
  } else {
    toNodes(element).forEach(function (element) {
      if (isFunction(value)) {
        value = value.call(element, attr(element, name));
      }

      if (value === null) {
        removeAttr(element, name);
      } else {
        element.setAttribute(name, value);
      }
    });
  }
}
function hasAttr(element, name) {
  return toNodes(element).some(function (element) {
    return element.hasAttribute(name);
  });
}
function removeAttr(element, name) {
  element = toNodes(element);
  name.split(' ').forEach(function (name) {
    return element.forEach(function (element) {
      return element.hasAttribute(name) && element.removeAttribute(name);
    });
  });
}
function attr_data(element, attribute) {
  for (var i = 0, attrs = [attribute, "data-".concat(attribute)]; i < attrs.length; i++) {
    if (hasAttr(element, attrs[i])) {
      return attr(element, attrs[i]);
    }
  }
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/util/env.js
/* global DocumentTouch */

var inBrowser = typeof window !== 'undefined';
var isIE = inBrowser && /msie|trident/i.test(window.navigator.userAgent);
var isRtl = inBrowser && attr(document.documentElement, 'dir') === 'rtl';
var hasTouchEvents = inBrowser && 'ontouchstart' in window;
var hasPointerEvents = inBrowser && window.PointerEvent;
var hasTouch = inBrowser && (hasTouchEvents || window.DocumentTouch && document instanceof DocumentTouch || navigator.maxTouchPoints); // IE >=11

var pointerDown = hasPointerEvents ? 'pointerdown' : hasTouchEvents ? 'touchstart' : 'mousedown';
var pointerMove = hasPointerEvents ? 'pointermove' : hasTouchEvents ? 'touchmove' : 'mousemove';
var pointerUp = hasPointerEvents ? 'pointerup' : hasTouchEvents ? 'touchend' : 'mouseup';
var pointerEnter = hasPointerEvents ? 'pointerenter' : hasTouchEvents ? '' : 'mouseenter';
var pointerLeave = hasPointerEvents ? 'pointerleave' : hasTouchEvents ? '' : 'mouseleave';
var pointerCancel = hasPointerEvents ? 'pointercancel' : 'touchcancel';
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.join.js
var es_array_join = __webpack_require__("./node_modules/core-js/modules/es.array.join.js");
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/util/filter.js





var voidElements = {
  area: true,
  base: true,
  br: true,
  col: true,
  embed: true,
  hr: true,
  img: true,
  input: true,
  keygen: true,
  link: true,
  menuitem: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true
};
function isVoidElement(element) {
  return toNodes(element).some(function (element) {
    return voidElements[element.tagName.toLowerCase()];
  });
}
function isVisible(element) {
  return toNodes(element).some(function (element) {
    return element.offsetWidth || element.offsetHeight || element.getClientRects().length;
  });
}
var selInput = 'input,select,textarea,button';
function isInput(element) {
  return toNodes(element).some(function (element) {
    return matches(element, selInput);
  });
}
var selFocusable = "".concat(selInput, ",a[href],[tabindex]");
function isFocusable(element) {
  return matches(element, selFocusable);
}
function filter_parent(element) {
  element = toNode(element);
  return element && isElement(element.parentNode) && element.parentNode;
}
function filter(element, selector) {
  return toNodes(element).filter(function (element) {
    return matches(element, selector);
  });
}
var elProto = inBrowser ? Element.prototype : {};
var matchesFn = elProto.matches || elProto.webkitMatchesSelector || elProto.msMatchesSelector || noop;
function matches(element, selector) {
  return toNodes(element).some(function (element) {
    return matchesFn.call(element, selector);
  });
}

var closestFn = elProto.closest || function (selector) {
  var ancestor = this;

  do {
    if (matches(ancestor, selector)) {
      return ancestor;
    }
  } while (ancestor = filter_parent(ancestor));
};

function closest(element, selector) {
  if (startsWith(selector, '>')) {
    selector = selector.slice(1);
  }

  return isElement(element) ? closestFn.call(element, selector) : toNodes(element).map(function (element) {
    return closest(element, selector);
  }).filter(Boolean);
}
function within(element, selector) {
  return !isString(selector) ? element === selector || (isDocument(selector) ? selector.documentElement : toNode(selector)).contains(toNode(element)) // IE 11 document does not implement contains
  : matches(element, selector) || !!closest(element, selector);
}
function parents(element, selector) {
  var elements = [];

  while (element = filter_parent(element)) {
    if (!selector || matches(element, selector)) {
      elements.push(element);
    }
  }

  return elements;
}
function filter_children(element, selector) {
  element = toNode(element);
  var children = element ? toNodes(element.children) : [];
  return selector ? filter(children, selector) : children;
}
function index(element, ref) {
  return ref ? toNodes(element).indexOf(toNode(ref)) : filter_children(filter_parent(element)).indexOf(element);
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/util/selector.js













function query(selector, context) {
  return find(selector, getContext(selector, context));
}
function queryAll(selector, context) {
  return findAll(selector, getContext(selector, context));
}

function getContext(selector) {
  var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;
  return isString(selector) && isContextSelector(selector) || isDocument(context) ? context : context.ownerDocument;
}

function find(selector, context) {
  return toNode(_query(selector, context, 'querySelector'));
}
function findAll(selector, context) {
  return toNodes(_query(selector, context, 'querySelectorAll'));
}

function _query(selector) {
  var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;
  var queryFn = arguments.length > 2 ? arguments[2] : undefined;

  if (!selector || !isString(selector)) {
    return selector;
  }

  selector = selector.replace(contextSanitizeRe, '$1 *');

  if (isContextSelector(selector)) {
    selector = splitSelector(selector).map(function (selector) {
      var ctx = context;

      if (selector[0] === '!') {
        var selectors = selector.substr(1).trim().split(' ');
        ctx = closest(filter_parent(context), selectors[0]);
        selector = selectors.slice(1).join(' ').trim();
      }

      if (selector[0] === '-') {
        var _selectors = selector.substr(1).trim().split(' ');

        var prev = (ctx || context).previousElementSibling;
        ctx = matches(prev, selector.substr(1)) ? prev : null;
        selector = _selectors.slice(1).join(' ');
      }

      if (!ctx) {
        return null;
      }

      return "".concat(domPath(ctx), " ").concat(selector);
    }).filter(Boolean).join(',');
    context = document;
  }

  try {
    return context[queryFn](selector);
  } catch (e) {
    return null;
  }
}

var contextSelectorRe = /(^|[^\\],)\s*[!>+~-]/;
var contextSanitizeRe = /([!>+~-])(?=\s+[!>+~-]|\s*$)/g;
var isContextSelector = memoize(function (selector) {
  return selector.match(contextSelectorRe);
});
var selectorRe = /.*?[^\\](?:,|$)/g;
var splitSelector = memoize(function (selector) {
  return selector.match(selectorRe).map(function (selector) {
    return selector.replace(/,$/, '').trim();
  });
});

function domPath(element) {
  var names = [];

  while (element.parentNode) {
    if (element.id) {
      names.unshift("#".concat(selector_escape(element.id)));
      break;
    } else {
      var _element = element,
          tagName = _element.tagName;

      if (tagName !== 'HTML') {
        tagName += ":nth-child(".concat(index(element) + 1, ")");
      }

      names.unshift(tagName);
      element = element.parentNode;
    }
  }

  return names.join(' > ');
}

var escapeFn = inBrowser && window.CSS && CSS.escape || function (css) {
  return css.replace(/([^\x7f-\uFFFF\w-])/g, function (match) {
    return "\\".concat(match);
  });
};

function selector_escape(css) {
  return isString(css) ? escapeFn.call(null, css) : '';
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/util/event.js
function event_toConsumableArray(arr) { return event_arrayWithoutHoles(arr) || event_iterableToArray(arr) || event_unsupportedIterableToArray(arr) || event_nonIterableSpread(); }

function event_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function event_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function event_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return event_arrayLikeToArray(arr); }



















function event_slicedToArray(arr, i) { return event_arrayWithHoles(arr) || event_iterableToArrayLimit(arr, i) || event_unsupportedIterableToArray(arr, i) || event_nonIterableRest(); }

function event_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function event_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return event_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return event_arrayLikeToArray(o, minLen); }

function event_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function event_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function event_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }





function on() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  var _getArgs = getArgs(args),
      _getArgs2 = event_slicedToArray(_getArgs, 5),
      targets = _getArgs2[0],
      type = _getArgs2[1],
      selector = _getArgs2[2],
      listener = _getArgs2[3],
      useCapture = _getArgs2[4];

  targets = toEventTargets(targets);

  if (listener.length > 1) {
    listener = detail(listener);
  }

  if (useCapture && useCapture.self) {
    listener = selfFilter(listener);
  }

  if (selector) {
    listener = delegate(selector, listener);
  }

  useCapture = useCaptureFilter(useCapture);
  type.split(' ').forEach(function (type) {
    return targets.forEach(function (target) {
      return target.addEventListener(type, listener, useCapture);
    });
  });
  return function () {
    return off(targets, type, listener, useCapture);
  };
}
function off(targets, type, listener) {
  var useCapture = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  useCapture = useCaptureFilter(useCapture);
  targets = toEventTargets(targets);
  type.split(' ').forEach(function (type) {
    return targets.forEach(function (target) {
      return target.removeEventListener(type, listener, useCapture);
    });
  });
}
function once() {
  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  var _getArgs3 = getArgs(args),
      _getArgs4 = event_slicedToArray(_getArgs3, 6),
      element = _getArgs4[0],
      type = _getArgs4[1],
      selector = _getArgs4[2],
      listener = _getArgs4[3],
      useCapture = _getArgs4[4],
      condition = _getArgs4[5];

  var off = on(element, type, selector, function (e) {
    var result = !condition || condition(e);

    if (result) {
      off();
      listener(e, result);
    }
  }, useCapture);
  return off;
}
function trigger(targets, event, detail) {
  return toEventTargets(targets).reduce(function (notCanceled, target) {
    return notCanceled && target.dispatchEvent(createEvent(event, true, true, detail));
  }, true);
}
function createEvent(e) {
  var bubbles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var cancelable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var detail = arguments.length > 3 ? arguments[3] : undefined;

  if (isString(e)) {
    var event = document.createEvent('CustomEvent'); // IE 11

    event.initCustomEvent(e, bubbles, cancelable, detail);
    e = event;
  }

  return e;
}

function getArgs(args) {
  if (isFunction(args[2])) {
    args.splice(2, 0, false);
  }

  return args;
}

function delegate(selector, listener) {
  var _this = this;

  return function (e) {
    var current = selector[0] === '>' ? findAll(selector, e.currentTarget).reverse().filter(function (element) {
      return within(e.target, element);
    })[0] : closest(e.target, selector);

    if (current) {
      e.current = current;
      listener.call(_this, e);
    }
  };
}

function detail(listener) {
  return function (e) {
    return isArray(e.detail) ? listener.apply(void 0, [e].concat(event_toConsumableArray(e.detail))) : listener(e);
  };
}

function selfFilter(listener) {
  return function (e) {
    if (e.target === e.currentTarget || e.target === e.current) {
      return listener.call(null, e);
    }
  };
}

function useCaptureFilter(options) {
  return options && isIE && !isBoolean(options) ? !!options.capture : options;
}

function isEventTarget(target) {
  return target && 'addEventListener' in target;
}

function toEventTarget(target) {
  return isEventTarget(target) ? target : toNode(target);
}

function toEventTargets(target) {
  return isArray(target) ? target.map(toEventTarget).filter(Boolean) : isString(target) ? findAll(target) : isEventTarget(target) ? [target] : toNodes(target);
}
function isTouch(e) {
  return e.pointerType === 'touch' || !!e.touches;
}
function getEventPos(e) {
  var touches = e.touches,
      changedTouches = e.changedTouches;

  var _ref = touches && touches[0] || changedTouches && changedTouches[0] || e,
      x = _ref.clientX,
      y = _ref.clientY;

  return {
    x: x,
    y: y
  };
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/util/dom.js










function ready(fn) {
  if (document.readyState !== 'loading') {
    fn();
    return;
  }

  var unbind = on(document, 'DOMContentLoaded', function () {
    unbind();
    fn();
  });
}
function empty(element) {
  element = $(element);
  element.innerHTML = '';
  return element;
}
function html(parent, html) {
  parent = $(parent);
  return isUndefined(html) ? parent.innerHTML : append(parent.hasChildNodes() ? empty(parent) : parent, html);
}
function prepend(parent, element) {
  parent = $(parent);

  if (!parent.hasChildNodes()) {
    return append(parent, element);
  } else {
    return insertNodes(element, function (element) {
      return parent.insertBefore(element, parent.firstChild);
    });
  }
}
function append(parent, element) {
  parent = $(parent);
  return insertNodes(element, function (element) {
    return parent.appendChild(element);
  });
}
function before(ref, element) {
  ref = $(ref);
  return insertNodes(element, function (element) {
    return ref.parentNode.insertBefore(element, ref);
  });
}
function after(ref, element) {
  ref = $(ref);
  return insertNodes(element, function (element) {
    return ref.nextSibling ? before(ref.nextSibling, element) : append(ref.parentNode, element);
  });
}

function insertNodes(element, fn) {
  element = isString(element) ? fragment(element) : element;
  return element ? 'length' in element ? toNodes(element).map(fn) : fn(element) : null;
}

function dom_remove(element) {
  toNodes(element).forEach(function (element) {
    return element.parentNode && element.parentNode.removeChild(element);
  });
}
function wrapAll(element, structure) {
  structure = toNode(before(element, structure));

  while (structure.firstChild) {
    structure = structure.firstChild;
  }

  append(structure, element);
  return structure;
}
function wrapInner(element, structure) {
  return toNodes(toNodes(element).map(function (element) {
    return element.hasChildNodes ? wrapAll(toNodes(element.childNodes), structure) : append(element, structure);
  }));
}
function unwrap(element) {
  toNodes(element).map(filter_parent).filter(function (value, index, self) {
    return self.indexOf(value) === index;
  }).forEach(function (parent) {
    before(parent, parent.childNodes);
    dom_remove(parent);
  });
}
var fragmentRe = /^\s*<(\w+|!)[^>]*>/;
var singleTagRe = /^<(\w+)\s*\/?>(?:<\/\1>)?$/;
function fragment(html) {
  var matches = singleTagRe.exec(html);

  if (matches) {
    return document.createElement(matches[1]);
  }

  var container = document.createElement('div');

  if (fragmentRe.test(html)) {
    container.insertAdjacentHTML('beforeend', html.trim());
  } else {
    container.textContent = html;
  }

  return container.childNodes.length > 1 ? toNodes(container.childNodes) : container.firstChild;
}
function apply(node, fn) {
  if (!isElement(node)) {
    return;
  }

  fn(node);
  node = node.firstElementChild;

  while (node) {
    var next = node.nextElementSibling;
    apply(node, fn);
    node = next;
  }
}
function $(selector, context) {
  return isHtml(selector) ? toNode(fragment(selector)) : find(selector, context);
}
function $$(selector, context) {
  return isHtml(selector) ? toNodes(fragment(selector)) : findAll(selector, context);
}

function isHtml(str) {
  return isString(str) && (str[0] === '<' || str.match(/^\s*</));
}
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.promise.js
var es_promise = __webpack_require__("./node_modules/core-js/modules/es.promise.js");
// EXTERNAL MODULE: ./node_modules/core-js/modules/web.immediate.js
var web_immediate = __webpack_require__("./node_modules/core-js/modules/web.immediate.js");
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/util/promise.js
function promise_slicedToArray(arr, i) { return promise_arrayWithHoles(arr) || promise_iterableToArrayLimit(arr, i) || promise_unsupportedIterableToArray(arr, i) || promise_nonIterableRest(); }

function promise_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function promise_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return promise_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return promise_arrayLikeToArray(o, minLen); }

function promise_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function promise_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function promise_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }














/* global setImmediate */


var Promise = inBrowser && window.Promise || PromiseFn;
var Deferred = function Deferred() {
  var _this = this;

  _classCallCheck(this, Deferred);

  this.promise = new Promise(function (resolve, reject) {
    _this.reject = reject;
    _this.resolve = resolve;
  });
};
/**
 * Promises/A+ polyfill v1.1.4 (https://github.com/bramstein/promis)
 */

var RESOLVED = 0;
var REJECTED = 1;
var PENDING = 2;
var promise_async = inBrowser && window.setImmediate || setTimeout;

function PromiseFn(executor) {
  this.state = PENDING;
  this.value = undefined;
  this.deferred = [];
  var promise = this;

  try {
    executor(function (x) {
      promise.resolve(x);
    }, function (r) {
      promise.reject(r);
    });
  } catch (e) {
    promise.reject(e);
  }
}

PromiseFn.reject = function (r) {
  return new PromiseFn(function (resolve, reject) {
    reject(r);
  });
};

PromiseFn.resolve = function (x) {
  return new PromiseFn(function (resolve, reject) {
    resolve(x);
  });
};

PromiseFn.all = function all(iterable) {
  return new PromiseFn(function (resolve, reject) {
    var result = [];
    var count = 0;

    if (iterable.length === 0) {
      resolve(result);
    }

    function resolver(i) {
      return function (x) {
        result[i] = x;
        count += 1;

        if (count === iterable.length) {
          resolve(result);
        }
      };
    }

    for (var i = 0; i < iterable.length; i += 1) {
      PromiseFn.resolve(iterable[i]).then(resolver(i), reject);
    }
  });
};

PromiseFn.race = function race(iterable) {
  return new PromiseFn(function (resolve, reject) {
    for (var i = 0; i < iterable.length; i += 1) {
      PromiseFn.resolve(iterable[i]).then(resolve, reject);
    }
  });
};

var p = PromiseFn.prototype;

p.resolve = function resolve(x) {
  var promise = this;

  if (promise.state === PENDING) {
    if (x === promise) {
      throw new TypeError('Promise settled with itself.');
    }

    var called = false;

    try {
      var then = x && x.then;

      if (x !== null && isObject(x) && isFunction(then)) {
        then.call(x, function (x) {
          if (!called) {
            promise.resolve(x);
          }

          called = true;
        }, function (r) {
          if (!called) {
            promise.reject(r);
          }

          called = true;
        });
        return;
      }
    } catch (e) {
      if (!called) {
        promise.reject(e);
      }

      return;
    }

    promise.state = RESOLVED;
    promise.value = x;
    promise.notify();
  }
};

p.reject = function reject(reason) {
  var promise = this;

  if (promise.state === PENDING) {
    if (reason === promise) {
      throw new TypeError('Promise settled with itself.');
    }

    promise.state = REJECTED;
    promise.value = reason;
    promise.notify();
  }
};

p.notify = function notify() {
  var _this2 = this;

  promise_async(function () {
    if (_this2.state !== PENDING) {
      while (_this2.deferred.length) {
        var _this2$deferred$shift = _this2.deferred.shift(),
            _this2$deferred$shift2 = promise_slicedToArray(_this2$deferred$shift, 4),
            onResolved = _this2$deferred$shift2[0],
            onRejected = _this2$deferred$shift2[1],
            resolve = _this2$deferred$shift2[2],
            reject = _this2$deferred$shift2[3];

        try {
          if (_this2.state === RESOLVED) {
            if (isFunction(onResolved)) {
              resolve(onResolved.call(undefined, _this2.value));
            } else {
              resolve(_this2.value);
            }
          } else if (_this2.state === REJECTED) {
            if (isFunction(onRejected)) {
              resolve(onRejected.call(undefined, _this2.value));
            } else {
              reject(_this2.value);
            }
          }
        } catch (e) {
          reject(e);
        }
      }
    }
  });
};

p.then = function then(onResolved, onRejected) {
  var _this3 = this;

  return new PromiseFn(function (resolve, reject) {
    _this3.deferred.push([onResolved, onRejected, resolve, reject]);

    _this3.notify();
  });
};

p.catch = function (onRejected) {
  return this.then(undefined, onRejected);
};
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/util/fastdom.js


/*
    Based on:
    Copyright (c) 2016 Wilson Page wilsonpage@me.com
    https://github.com/wilsonpage/fastdom
*/

var fastdom = {
  reads: [],
  writes: [],
  read: function read(task) {
    this.reads.push(task);
    scheduleFlush();
    return task;
  },
  write: function write(task) {
    this.writes.push(task);
    scheduleFlush();
    return task;
  },
  clear: function clear(task) {
    remove(this.reads, task);
    remove(this.writes, task);
  },
  flush: flush
};

function flush() {
  var recursion = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
  runTasks(fastdom.reads);
  runTasks(fastdom.writes.splice(0));
  fastdom.scheduled = false;

  if (fastdom.reads.length || fastdom.writes.length) {
    scheduleFlush(recursion + 1);
  }
}

var RECURSION_LIMIT = 4;

function scheduleFlush(recursion) {
  if (fastdom.scheduled) {
    return;
  }

  fastdom.scheduled = true;

  if (recursion && recursion < RECURSION_LIMIT) {
    Promise.resolve().then(function () {
      return flush(recursion);
    });
  } else {
    requestAnimationFrame(function () {
      return flush();
    });
  }
}

function runTasks(tasks) {
  var task;

  while (task = tasks.shift()) {
    try {
      task();
    } catch (e) {
      console.error(e);
    }
  }
}

function remove(array, item) {
  var index = array.indexOf(item);
  return ~index && array.splice(index, 1);
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/api/component.js







/* harmony default export */ function component(UIkit) {
  var DATA = UIkit.data;
  var components = {};

  UIkit.component = function (name, options) {
    var id = hyphenate(name);
    name = camelize(id);

    if (!options) {
      if (isPlainObject(components[name])) {
        components[name] = UIkit.extend(components[name]);
      }

      return components[name];
    }

    UIkit[name] = function (element, data) {
      var component = UIkit.component(name);
      return component.options.functional ? new component({
        data: isPlainObject(element) ? element : Array.prototype.slice.call(arguments)
      }) : !element ? init(element) : $$(element).map(init)[0];

      function init(element) {
        var instance = UIkit.getComponent(element, name);

        if (instance) {
          if (!data) {
            return instance;
          } else {
            instance.$destroy();
          }
        }

        return new component({
          el: element,
          data: data
        });
      }
    };

    var opt = isPlainObject(options) ? lang_assign({}, options) : options.options;
    opt.name = name;

    if (opt.install) {
      opt.install(UIkit, opt, name);
    }

    if (UIkit._initialized && !opt.functional) {
      fastdom.read(function () {
        return UIkit[name]("[uk-".concat(id, "],[data-uk-").concat(id, "]"));
      });
    }

    return components[name] = isPlainObject(options) ? opt : options;
  };

  UIkit.getComponents = function (element) {
    return element && element[DATA] || {};
  };

  UIkit.getComponent = function (element, name) {
    return UIkit.getComponents(element)[name];
  };

  UIkit.connect = function (node) {
    if (node[DATA]) {
      for (var name in node[DATA]) {
        node[DATA][name]._callConnected();
      }
    }

    for (var i = 0; i < node.attributes.length; i++) {
      var _name = getComponentName(node.attributes[i].name);

      if (_name && _name in components) {
        UIkit[_name](node);
      }
    }
  };

  UIkit.disconnect = function (node) {
    for (var name in node[DATA]) {
      node[DATA][name]._callDisconnected();
    }
  };
}
var getComponentName = memoize(function (attribute) {
  return startsWith(attribute, 'uk-') || startsWith(attribute, 'data-uk-') ? camelize(attribute.replace('data-uk-', '').replace('uk-', '')) : false;
});
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/api/boot.js



/* harmony default export */ function boot(UIkit) {
  var connect = UIkit.connect,
      disconnect = UIkit.disconnect;

  if (!inBrowser || !window.MutationObserver) {
    return;
  }

  fastdom.read(function () {
    if (document.body) {
      apply(document.body, connect);
    }

    new MutationObserver(function (records) {
      return records.forEach(applyChildListMutation);
    }).observe(document, {
      childList: true,
      subtree: true
    });
    new MutationObserver(function (records) {
      return records.forEach(applyAttributeMutation);
    }).observe(document, {
      attributes: true,
      subtree: true
    });
    UIkit._initialized = true;
  });

  function applyChildListMutation(_ref) {
    var addedNodes = _ref.addedNodes,
        removedNodes = _ref.removedNodes;

    for (var i = 0; i < addedNodes.length; i++) {
      apply(addedNodes[i], connect);
    }

    for (var _i = 0; _i < removedNodes.length; _i++) {
      apply(removedNodes[_i], disconnect);
    }
  }

  function applyAttributeMutation(_ref2) {
    var target = _ref2.target,
        attributeName = _ref2.attributeName;
    var name = getComponentName(attributeName);

    if (!name || !(name in UIkit)) {
      return;
    }

    if (hasAttr(target, attributeName)) {
      UIkit[name](target);
      return;
    }

    var component = UIkit.getComponent(target, name);

    if (component) {
      component.$destroy();
    }
  }
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/util/class.js
function class_toConsumableArray(arr) { return class_arrayWithoutHoles(arr) || class_iterableToArray(arr) || class_unsupportedIterableToArray(arr) || class_nonIterableSpread(); }

function class_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function class_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function class_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return class_arrayLikeToArray(arr); }

function class_slicedToArray(arr, i) { return class_arrayWithHoles(arr) || class_iterableToArrayLimit(arr, i) || class_unsupportedIterableToArray(arr, i) || class_nonIterableRest(); }

function class_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function class_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return class_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return class_arrayLikeToArray(o, minLen); }

function class_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function class_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function class_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }





















function addClass(element) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  class_apply(element, args, 'add');
}
function removeClass(element) {
  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }

  class_apply(element, args, 'remove');
}
function removeClasses(element, cls) {
  attr(element, 'class', function (value) {
    return (value || '').replace(new RegExp("\\b".concat(cls, "\\b"), 'g'), '');
  });
}
function replaceClass(element) {
  (arguments.length <= 1 ? undefined : arguments[1]) && removeClass(element, arguments.length <= 1 ? undefined : arguments[1]);
  (arguments.length <= 2 ? undefined : arguments[2]) && addClass(element, arguments.length <= 2 ? undefined : arguments[2]);
}
function hasClass(element, cls) {
  var _getClasses = getClasses(cls);

  var _getClasses2 = class_slicedToArray(_getClasses, 1);

  cls = _getClasses2[0];
  var nodes = toNodes(element);

  for (var n = 0; n < nodes.length; n++) {
    if (cls && nodes[n].classList.contains(cls)) {
      return true;
    }
  }

  return false;
}
function toggleClass(element, cls, force) {
  cls = getClasses(cls);
  var nodes = toNodes(element);

  for (var n = 0; n < nodes.length; n++) {
    var list = nodes[n].classList;

    for (var i = 0; i < cls.length; i++) {
      if (isUndefined(force)) {
        list.toggle(cls[i]);
      } else if (supports.Force) {
        list.toggle(cls[i], !!force);
      } else {
        list[force ? 'add' : 'remove'](cls[i]);
      }
    }
  }
}

function class_apply(element, args, fn) {
  args = args.reduce(function (args, arg) {
    return args.concat(getClasses(arg));
  }, []);
  var nodes = toNodes(element);

  var _loop = function _loop(n) {
    if (supports.Multiple) {
      var _nodes$n$classList;

      (_nodes$n$classList = nodes[n].classList)[fn].apply(_nodes$n$classList, class_toConsumableArray(args));
    } else {
      args.forEach(function (cls) {
        return nodes[n].classList[fn](cls);
      });
    }
  };

  for (var n = 0; n < nodes.length; n++) {
    _loop(n);
  }
}

function getClasses(str) {
  return String(str).split(/\s|,/).filter(Boolean);
} // IE 11


var supports = {
  get Multiple() {
    return this.get('Multiple');
  },

  get Force() {
    return this.get('Force');
  },

  get: function get(key) {
    var _document$createEleme = document.createElement('_'),
        classList = _document$createEleme.classList;

    classList.add('a', 'b');
    classList.toggle('c', false);
    supports = {
      Multiple: classList.contains('b'),
      Force: !classList.contains('c')
    };
    return supports[key];
  }
};
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/mixin/class.js

/* harmony default export */ var mixin_class = ({
  connected: function connected() {
    !hasClass(this.$el, this.$name) && addClass(this.$el, this.$name);
  }
});
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/components/countdown.js









/* harmony default export */ var countdown = ({
  mixins: [mixin_class],
  props: {
    date: String,
    clsWrapper: String
  },
  data: {
    date: '',
    clsWrapper: '.uk-countdown-%unit%'
  },
  computed: {
    date: function date(_ref) {
      var date = _ref.date;
      return Date.parse(date);
    },
    days: function days(_ref2, $el) {
      var clsWrapper = _ref2.clsWrapper;
      return $(clsWrapper.replace('%unit%', 'days'), $el);
    },
    hours: function hours(_ref3, $el) {
      var clsWrapper = _ref3.clsWrapper;
      return $(clsWrapper.replace('%unit%', 'hours'), $el);
    },
    minutes: function minutes(_ref4, $el) {
      var clsWrapper = _ref4.clsWrapper;
      return $(clsWrapper.replace('%unit%', 'minutes'), $el);
    },
    seconds: function seconds(_ref5, $el) {
      var clsWrapper = _ref5.clsWrapper;
      return $(clsWrapper.replace('%unit%', 'seconds'), $el);
    },
    units: function units() {
      var _this = this;

      return ['days', 'hours', 'minutes', 'seconds'].filter(function (unit) {
        return _this[unit];
      });
    }
  },
  connected: function connected() {
    this.start();
  },
  disconnected: function disconnected() {
    var _this2 = this;

    this.stop();
    this.units.forEach(function (unit) {
      return empty(_this2[unit]);
    });
  },
  events: [{
    name: 'visibilitychange',
    el: function el() {
      return document;
    },
    handler: function handler() {
      if (document.hidden) {
        this.stop();
      } else {
        this.start();
      }
    }
  }],
  update: {
    write: function write() {
      var _this3 = this;

      var timespan = getTimeSpan(this.date);

      if (timespan.total <= 0) {
        this.stop();
        timespan.days = timespan.hours = timespan.minutes = timespan.seconds = 0;
      }

      this.units.forEach(function (unit) {
        var digits = String(Math.floor(timespan[unit]));
        digits = digits.length < 2 ? "0".concat(digits) : digits;
        var el = _this3[unit];

        if (el.textContent !== digits) {
          digits = digits.split('');

          if (digits.length !== el.children.length) {
            html(el, digits.map(function () {
              return '<span></span>';
            }).join(''));
          }

          digits.forEach(function (digit, i) {
            return el.children[i].textContent = digit;
          });
        }
      });
    }
  },
  methods: {
    start: function start() {
      this.stop();

      if (this.date && this.units.length) {
        this.$update();
        this.timer = setInterval(this.$update, 1000);
      }
    },
    stop: function stop() {
      if (this.timer) {
        clearInterval(this.timer);
        this.timer = null;
      }
    }
  }
});

function getTimeSpan(date) {
  var total = date - Date.now();
  return {
    total: total,
    seconds: total / 1000 % 60,
    minutes: total / 1000 / 60 % 60,
    hours: total / 1000 / 60 / 60 % 24,
    days: total / 1000 / 60 / 60 / 24
  };
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/util/style.js








var cssNumber = {
  'animation-iteration-count': true,
  'column-count': true,
  'fill-opacity': true,
  'flex-grow': true,
  'flex-shrink': true,
  'font-weight': true,
  'line-height': true,
  'opacity': true,
  'order': true,
  'orphans': true,
  'stroke-dasharray': true,
  'stroke-dashoffset': true,
  'widows': true,
  'z-index': true,
  'zoom': true
};
function css(element, property, value) {
  var priority = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
  return toNodes(element).map(function (element) {
    if (isString(property)) {
      property = propName(property);

      if (isUndefined(value)) {
        return getStyle(element, property);
      } else if (!value && !isNumber(value)) {
        element.style.removeProperty(property);
      } else {
        element.style.setProperty(property, isNumeric(value) && !cssNumber[property] ? "".concat(value, "px") : value, priority);
      }
    } else if (isArray(property)) {
      var styles = getStyles(element);
      return property.reduce(function (props, property) {
        props[property] = styles[propName(property)];
        return props;
      }, {});
    } else if (isObject(property)) {
      priority = value;
      each(property, function (value, property) {
        return css(element, property, value, priority);
      });
    }

    return element;
  })[0];
}

function getStyles(element, pseudoElt) {
  return toWindow(element).getComputedStyle(element, pseudoElt);
}

function getStyle(element, property, pseudoElt) {
  return getStyles(element, pseudoElt)[property];
}

var parseCssVar = memoize(function (name) {
  /* usage in css: .uk-name:before { content:"xyz" } */
  var element = append(document.documentElement, document.createElement('div'));
  addClass(element, "uk-".concat(name));
  name = getStyle(element, 'content', ':before').replace(/^["'](.*)["']$/, '$1');
  dom_remove(element);
  return name;
});
function getCssVar(name) {
  return !isIE ? getStyles(document.documentElement).getPropertyValue("--uk-".concat(name)) : parseCssVar(name);
} // https://drafts.csswg.org/cssom/#dom-cssstyledeclaration-setproperty

var propName = memoize(function (name) {
  return vendorPropName(name);
});
var cssPrefixes = ['webkit', 'moz', 'ms'];

function vendorPropName(name) {
  name = hyphenate(name);
  var style = document.documentElement.style;

  if (name in style) {
    return name;
  }

  var i = cssPrefixes.length,
      prefixedName;

  while (i--) {
    prefixedName = "-".concat(cssPrefixes[i], "-").concat(name);

    if (prefixedName in style) {
      return prefixedName;
    }
  }
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/util/dimensions.js



var dirs = {
  width: ['left', 'right'],
  height: ['top', 'bottom']
};
function dimensions(element) {
  var rect = isElement(element) ? toNode(element).getBoundingClientRect() : {
    height: dimensions_height(element),
    width: width(element),
    top: 0,
    left: 0
  };
  return {
    height: rect.height,
    width: rect.width,
    top: rect.top,
    left: rect.left,
    bottom: rect.top + rect.height,
    right: rect.left + rect.width
  };
}
function dimensions_offset(element, coordinates) {
  var currentOffset = dimensions(element);

  var _toWindow = toWindow(element),
      pageYOffset = _toWindow.pageYOffset,
      pageXOffset = _toWindow.pageXOffset;

  var offsetBy = {
    height: pageYOffset,
    width: pageXOffset
  };

  for (var dir in dirs) {
    for (var i in dirs[dir]) {
      currentOffset[dirs[dir][i]] += offsetBy[dir];
    }
  }

  if (!coordinates) {
    return currentOffset;
  }

  var pos = css(element, 'position');
  each(css(element, ['left', 'top']), function (value, prop) {
    return css(element, prop, coordinates[prop] - currentOffset[prop] + toFloat(pos === 'absolute' && value === 'auto' ? position(element)[prop] : value));
  });
}
function position(element) {
  var _offset = dimensions_offset(element),
      top = _offset.top,
      left = _offset.left;

  var _toNode = toNode(element),
      _toNode$ownerDocument = _toNode.ownerDocument,
      body = _toNode$ownerDocument.body,
      documentElement = _toNode$ownerDocument.documentElement,
      offsetParent = _toNode.offsetParent;

  var parent = offsetParent || documentElement;

  while (parent && (parent === body || parent === documentElement) && css(parent, 'position') === 'static') {
    parent = parent.parentNode;
  }

  if (isElement(parent)) {
    var parentOffset = dimensions_offset(parent);
    top -= parentOffset.top + toFloat(css(parent, 'borderTopWidth'));
    left -= parentOffset.left + toFloat(css(parent, 'borderLeftWidth'));
  }

  return {
    top: top - toFloat(css(element, 'marginTop')),
    left: left - toFloat(css(element, 'marginLeft'))
  };
}
function offsetPosition(element) {
  var offset = [0, 0];
  element = toNode(element);

  do {
    offset[0] += element.offsetTop;
    offset[1] += element.offsetLeft;

    if (css(element, 'position') === 'fixed') {
      var win = toWindow(element);
      offset[0] += win.pageYOffset;
      offset[1] += win.pageXOffset;
      return offset;
    }
  } while (element = element.offsetParent);

  return offset;
}
var dimensions_height = dimension('height');
var width = dimension('width');

function dimension(prop) {
  var propName = ucfirst(prop);
  return function (element, value) {
    if (isUndefined(value)) {
      if (isWindow(element)) {
        return element["inner".concat(propName)];
      }

      if (isDocument(element)) {
        var doc = element.documentElement;
        return Math.max(doc["offset".concat(propName)], doc["scroll".concat(propName)]);
      }

      element = toNode(element);
      value = css(element, prop);
      value = value === 'auto' ? element["offset".concat(propName)] : toFloat(value) || 0;
      return value - boxModelAdjust(element, prop);
    } else {
      return css(element, prop, !value && value !== 0 ? '' : +value + boxModelAdjust(element, prop) + 'px');
    }
  };
}

function boxModelAdjust(element, prop) {
  var sizing = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'border-box';
  return css(element, 'boxSizing') === sizing ? dirs[prop].map(ucfirst).reduce(function (value, prop) {
    return value + toFloat(css(element, "padding".concat(prop))) + toFloat(css(element, "border".concat(prop, "Width")));
  }, 0) : 0;
}
function flipPosition(pos) {
  for (var dir in dirs) {
    for (var i in dirs[dir]) {
      if (dirs[dir][i] === pos) {
        return dirs[dir][1 - i];
      }
    }
  }

  return pos;
}
function toPx(value) {
  var property = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'width';
  var element = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : window;
  return isNumeric(value) ? +value : endsWith(value, 'vh') ? percent(dimensions_height(toWindow(element)), value) : endsWith(value, 'vw') ? percent(width(toWindow(element)), value) : endsWith(value, '%') ? percent(dimensions(element)[property], value) : toFloat(value);
}

function percent(base, value) {
  return base * toFloat(value) / 100;
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/core/margin.js
function margin_slicedToArray(arr, i) { return margin_arrayWithHoles(arr) || margin_iterableToArrayLimit(arr, i) || margin_unsupportedIterableToArray(arr, i) || margin_nonIterableRest(); }

function margin_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function margin_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return margin_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return margin_arrayLikeToArray(o, minLen); }

function margin_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function margin_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function margin_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }













/* harmony default export */ var margin = ({
  props: {
    margin: String,
    firstColumn: Boolean
  },
  data: {
    margin: 'uk-margin-small-top',
    firstColumn: 'uk-first-column'
  },
  update: {
    read: function read() {
      var rows = getRows(this.$el.children);
      return {
        rows: rows,
        columns: getColumns(rows)
      };
    },
    write: function write(_ref) {
      var columns = _ref.columns,
          rows = _ref.rows;

      for (var i = 0; i < rows.length; i++) {
        for (var j = 0; j < rows[i].length; j++) {
          toggleClass(rows[i][j], this.margin, i !== 0);
          toggleClass(rows[i][j], this.firstColumn, !!~columns[0].indexOf(rows[i][j]));
        }
      }
    },
    events: ['resize']
  }
});
function getRows(items) {
  return margin_sortBy(items, 'top', 'bottom');
}

function getColumns(rows) {
  var columns = [];

  for (var i = 0; i < rows.length; i++) {
    var sorted = margin_sortBy(rows[i], 'left', 'right');

    for (var j = 0; j < sorted.length; j++) {
      columns[j] = !columns[j] ? sorted[j] : columns[j].concat(sorted[j]);
    }
  }

  return isRtl ? columns.reverse() : columns;
}

function margin_sortBy(items, startProp, endProp) {
  var sorted = [[]];

  for (var i = 0; i < items.length; i++) {
    var el = items[i];

    if (!isVisible(el)) {
      continue;
    }

    var dim = getOffset(el);

    for (var j = sorted.length - 1; j >= 0; j--) {
      var current = sorted[j];

      if (!current[0]) {
        current.push(el);
        break;
      }

      var startDim = void 0;

      if (current[0].offsetParent === el.offsetParent) {
        startDim = getOffset(current[0]);
      } else {
        dim = getOffset(el, true);
        startDim = getOffset(current[0], true);
      }

      if (dim[startProp] >= startDim[endProp] - 1 && dim[startProp] !== startDim[startProp]) {
        sorted.push([el]);
        break;
      }

      if (dim[endProp] - 1 > startDim[startProp] || dim[startProp] === startDim[startProp]) {
        current.push(el);
        break;
      }

      if (j === 0) {
        sorted.unshift([el]);
        break;
      }
    }
  }

  return sorted;
}

function getOffset(element) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var offsetTop = element.offsetTop,
      offsetLeft = element.offsetLeft,
      offsetHeight = element.offsetHeight,
      offsetWidth = element.offsetWidth;

  if (offset) {
    var _offsetPosition = offsetPosition(element);

    var _offsetPosition2 = margin_slicedToArray(_offsetPosition, 2);

    offsetTop = _offsetPosition2[0];
    offsetLeft = _offsetPosition2[1];
  }

  return {
    top: offsetTop,
    left: offsetLeft,
    bottom: offsetTop + offsetHeight,
    right: offsetLeft + offsetWidth
  };
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/util/animation.js

















function transition(element, props) {
  var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 400;
  var timing = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'linear';
  return Promise.all(toNodes(element).map(function (element) {
    return new Promise(function (resolve, reject) {
      for (var name in props) {
        var value = css(element, name);

        if (value === '') {
          css(element, name, value);
        }
      }

      var timer = setTimeout(function () {
        return trigger(element, 'transitionend');
      }, duration);
      once(element, 'transitionend transitioncanceled', function (_ref) {
        var type = _ref.type;
        clearTimeout(timer);
        removeClass(element, 'uk-transition');
        css(element, {
          transitionProperty: '',
          transitionDuration: '',
          transitionTimingFunction: ''
        });
        type === 'transitioncanceled' ? reject() : resolve(element);
      }, {
        self: true
      });
      addClass(element, 'uk-transition');
      css(element, lang_assign({
        transitionProperty: Object.keys(props).map(propName).join(','),
        transitionDuration: "".concat(duration, "ms"),
        transitionTimingFunction: timing
      }, props));
    });
  }));
}
var Transition = {
  start: transition,
  stop: function stop(element) {
    trigger(element, 'transitionend');
    return Promise.resolve();
  },
  cancel: function cancel(element) {
    trigger(element, 'transitioncanceled');
  },
  inProgress: function inProgress(element) {
    return hasClass(element, 'uk-transition');
  }
};
var animationPrefix = 'uk-animation-';
function animate(element, animation) {
  var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 200;
  var origin = arguments.length > 3 ? arguments[3] : undefined;
  var out = arguments.length > 4 ? arguments[4] : undefined;
  return Promise.all(toNodes(element).map(function (element) {
    return new Promise(function (resolve, reject) {
      trigger(element, 'animationcanceled');
      var timer = setTimeout(function () {
        return trigger(element, 'animationend');
      }, duration);
      once(element, 'animationend animationcanceled', function (_ref2) {
        var type = _ref2.type;
        clearTimeout(timer);
        type === 'animationcanceled' ? reject() : resolve(element);
        css(element, 'animationDuration', '');
        removeClasses(element, "".concat(animationPrefix, "\\S*"));
      }, {
        self: true
      });
      css(element, 'animationDuration', "".concat(duration, "ms"));
      addClass(element, animation, animationPrefix + (out ? 'leave' : 'enter'));

      if (startsWith(animation, animationPrefix)) {
        origin && addClass(element, "uk-transform-origin-".concat(origin));
        out && addClass(element, "".concat(animationPrefix, "reverse"));
      }
    });
  }));
}

var _inProgress = new RegExp("".concat(animationPrefix, "(enter|leave)"));

var Animation = {
  in: animate,
  out: function out(element, animation, duration, origin) {
    return animate(element, animation, duration, origin, true);
  },
  inProgress: function inProgress(element) {
    return _inProgress.test(attr(element, 'class'));
  },
  cancel: function cancel(element) {
    trigger(element, 'animationcanceled');
  }
};
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/util/viewport.js
function viewport_slicedToArray(arr, i) { return viewport_arrayWithHoles(arr) || viewport_iterableToArrayLimit(arr, i) || viewport_unsupportedIterableToArray(arr, i) || viewport_nonIterableRest(); }

function viewport_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function viewport_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function viewport_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }















function viewport_toConsumableArray(arr) { return viewport_arrayWithoutHoles(arr) || viewport_iterableToArray(arr) || viewport_unsupportedIterableToArray(arr) || viewport_nonIterableSpread(); }

function viewport_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function viewport_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return viewport_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return viewport_arrayLikeToArray(o, minLen); }

function viewport_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function viewport_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return viewport_arrayLikeToArray(arr); }

function viewport_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }






function isInView(element) {
  var offsetTop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var offsetLeft = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

  if (!isVisible(element)) {
    return false;
  }

  return intersectRect.apply(void 0, viewport_toConsumableArray(scrollParents(element).map(function (parent) {
    var _offset = dimensions_offset(getViewport(parent)),
        top = _offset.top,
        left = _offset.left,
        bottom = _offset.bottom,
        right = _offset.right;

    return {
      top: top - offsetTop,
      left: left - offsetLeft,
      bottom: bottom + offsetTop,
      right: right + offsetLeft
    };
  }).concat(dimensions_offset(element))));
}
function scrollTop(element, top) {
  if (isWindow(element) || isDocument(element)) {
    element = getScrollingElement(element);
  } else {
    element = toNode(element);
  }

  element.scrollTop = top;
}
function scrollIntoView(element) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$offset = _ref.offset,
      offsetBy = _ref$offset === void 0 ? 0 : _ref$offset;

  var parents = isVisible(element) ? scrollParents(element) : [];
  var diff = 0;
  return parents.reduce(function (fn, scrollElement, i) {
    var scrollTop = scrollElement.scrollTop,
        scrollHeight = scrollElement.scrollHeight;
    var maxScroll = scrollHeight - getViewportClientHeight(scrollElement);
    var top = Math.ceil(dimensions_offset(parents[i - 1] || element).top - dimensions_offset(getViewport(scrollElement)).top - offsetBy + diff + scrollTop);

    if (top > maxScroll) {
      diff = top - maxScroll;
      top = maxScroll;
    } else {
      diff = 0;
    }

    return function () {
      return scrollTo(scrollElement, top - scrollTop).then(fn);
    };
  }, function () {
    return Promise.resolve();
  })();

  function scrollTo(element, top) {
    return new Promise(function (resolve) {
      var scroll = element.scrollTop;
      var duration = getDuration(Math.abs(top));
      var start = Date.now();

      (function step() {
        var percent = ease(clamp((Date.now() - start) / duration));
        scrollTop(element, scroll + top * percent); // scroll more if we have not reached our destination

        if (percent !== 1) {
          requestAnimationFrame(step);
        } else {
          resolve();
        }
      })();
    });
  }

  function getDuration(dist) {
    return 40 * Math.pow(dist, .375);
  }

  function ease(k) {
    return 0.5 * (1 - Math.cos(Math.PI * k));
  }
}
function scrolledOver(element) {
  var heightOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

  if (!isVisible(element)) {
    return 0;
  }

  var _scrollParents = scrollParents(element, /auto|scroll/, true),
      _scrollParents2 = viewport_slicedToArray(_scrollParents, 1),
      scrollElement = _scrollParents2[0];

  var scrollHeight = scrollElement.scrollHeight,
      scrollTop = scrollElement.scrollTop;
  var clientHeight = getViewportClientHeight(scrollElement);
  var viewportTop = offsetPosition(element)[0] - scrollTop - offsetPosition(scrollElement)[0];
  var viewportDist = Math.min(clientHeight, viewportTop + scrollTop);
  var top = viewportTop - viewportDist;
  var dist = Math.min(element.offsetHeight + heightOffset + viewportDist, scrollHeight - (viewportTop + scrollTop), scrollHeight - clientHeight);
  return clamp(-1 * top / dist);
}
function scrollParents(element) {
  var overflowRe = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : /auto|scroll|hidden/;
  var scrollable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var scrollEl = getScrollingElement(element);
  var ancestors = parents(element).reverse();
  ancestors = ancestors.slice(ancestors.indexOf(scrollEl) + 1);
  var fixedIndex = findIndex(ancestors, function (el) {
    return css(el, 'position') === 'fixed';
  });

  if (~fixedIndex) {
    ancestors = ancestors.slice(fixedIndex);
  }

  return [scrollEl].concat(ancestors.filter(function (parent) {
    return overflowRe.test(css(parent, 'overflow')) && (!scrollable || parent.scrollHeight > getViewportClientHeight(parent));
  })).reverse();
}
function getViewport(scrollElement) {
  return scrollElement === getScrollingElement(scrollElement) ? window : scrollElement;
} // iOS 12 returns <body> as scrollingElement

function getViewportClientHeight(scrollElement) {
  return (scrollElement === getScrollingElement(scrollElement) ? document.documentElement : scrollElement).clientHeight;
}

function getScrollingElement(element) {
  var _toWindow = toWindow(element),
      document = _toWindow.document;

  return document.scrollingElement || document.documentElement;
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/mixin/internal/animate-fade.js










var clsLeave = 'uk-transition-leave';
var clsEnter = 'uk-transition-enter';
function fade(action, target, duration) {
  var stagger = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  var index = transitionIndex(target, true);
  var propsIn = {
    opacity: 1
  };
  var propsOut = {
    opacity: 0
  };

  var wrapIndexFn = function wrapIndexFn(fn) {
    return function () {
      return index === transitionIndex(target) ? fn() : Promise.reject();
    };
  };

  var leaveFn = wrapIndexFn(function () {
    addClass(target, clsLeave);
    return Promise.all(getTransitionNodes(target).map(function (child, i) {
      return new Promise(function (resolve) {
        return setTimeout(function () {
          return Transition.start(child, propsOut, duration / 2, 'ease').then(resolve);
        }, i * stagger);
      });
    })).then(function () {
      return removeClass(target, clsLeave);
    });
  });
  var enterFn = wrapIndexFn(function () {
    var oldHeight = dimensions_height(target);
    addClass(target, clsEnter);
    action();
    css(filter_children(target), {
      opacity: 0
    }); // Ensure UIkit updates have propagated

    return new Promise(function (resolve) {
      return requestAnimationFrame(function () {
        var nodes = filter_children(target);
        var newHeight = dimensions_height(target); // Ensure Grid cells do not stretch when height is applied

        css(target, 'alignContent', 'flex-start');
        dimensions_height(target, oldHeight);
        var transitionNodes = getTransitionNodes(target);
        css(nodes, propsOut);
        var transitions = transitionNodes.map(function (child, i) {
          return new Promise(function (resolve) {
            return setTimeout(function () {
              return Transition.start(child, propsIn, duration / 2, 'ease').then(resolve);
            }, i * stagger);
          });
        });

        if (oldHeight !== newHeight) {
          transitions.push(Transition.start(target, {
            height: newHeight
          }, duration / 2 + transitionNodes.length * stagger, 'ease'));
        }

        Promise.all(transitions).then(function () {
          removeClass(target, clsEnter);

          if (index === transitionIndex(target)) {
            css(target, {
              height: '',
              alignContent: ''
            });
            css(nodes, {
              opacity: ''
            });
            delete target.dataset.transition;
          }

          resolve();
        });
      });
    });
  });
  return hasClass(target, clsLeave) ? waitTransitionend(target).then(enterFn) : hasClass(target, clsEnter) ? waitTransitionend(target).then(leaveFn).then(enterFn) : leaveFn().then(enterFn);
}

function transitionIndex(target, next) {
  if (next) {
    target.dataset.transition = 1 + transitionIndex(target);
  }

  return toNumber(target.dataset.transition) || 0;
}

function waitTransitionend(target) {
  return Promise.all(filter_children(target).filter(Transition.inProgress).map(function (el) {
    return new Promise(function (resolve) {
      return once(el, 'transitionend transitioncanceled', resolve);
    });
  }));
}

function getTransitionNodes(target) {
  return getRows(filter_children(target)).reduce(function (nodes, row) {
    return nodes.concat(sortBy(row.filter(function (el) {
      return isInView(el);
    }), 'offsetLeft'));
  }, []);
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/mixin/internal/animate-slide.js
function animate_slide_slicedToArray(arr, i) { return animate_slide_arrayWithHoles(arr) || animate_slide_iterableToArrayLimit(arr, i) || animate_slide_unsupportedIterableToArray(arr, i) || animate_slide_nonIterableRest(); }

function animate_slide_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function animate_slide_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return animate_slide_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return animate_slide_arrayLikeToArray(o, minLen); }

function animate_slide_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function animate_slide_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function animate_slide_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

















/* harmony default export */ function animate_slide(action, target, duration) {
  return new Promise(function (resolve) {
    return requestAnimationFrame(function () {
      var nodes = filter_children(target); // Get current state

      var currentProps = nodes.map(function (el) {
        return getProps(el, true);
      });
      var targetProps = css(target, ['height', 'padding']); // Cancel previous animations

      Transition.cancel(target);
      nodes.forEach(Transition.cancel);
      animate_slide_reset(target); // Adding, sorting, removing nodes

      action(); // Find new nodes

      nodes = nodes.concat(filter_children(target).filter(function (el) {
        return !includes(nodes, el);
      })); // Wait for update to propagate

      Promise.resolve().then(function () {
        // Force update
        fastdom.flush(); // Get new state

        var targetPropsTo = css(target, ['height', 'padding']);

        var _getTransitionProps = getTransitionProps(target, nodes, currentProps),
            _getTransitionProps2 = animate_slide_slicedToArray(_getTransitionProps, 2),
            propsTo = _getTransitionProps2[0],
            propsFrom = _getTransitionProps2[1]; // Reset to previous state


        nodes.forEach(function (el, i) {
          return propsFrom[i] && css(el, propsFrom[i]);
        });
        css(target, lang_assign({
          display: 'block'
        }, targetProps)); // Start transitions on next frame

        requestAnimationFrame(function () {
          var transitions = nodes.map(function (el, i) {
            return filter_parent(el) === target && Transition.start(el, propsTo[i], duration, 'ease');
          }).concat(Transition.start(target, targetPropsTo, duration, 'ease'));
          Promise.all(transitions).then(function () {
            nodes.forEach(function (el, i) {
              return filter_parent(el) === target && css(el, 'display', propsTo[i].opacity === 0 ? 'none' : '');
            });
            animate_slide_reset(target);
          }, noop).then(resolve);
        });
      });
    });
  });
}

function getProps(el, opacity) {
  var zIndex = css(el, 'zIndex');
  return isVisible(el) ? lang_assign({
    display: '',
    opacity: opacity ? css(el, 'opacity') : '0',
    pointerEvents: 'none',
    position: 'absolute',
    zIndex: zIndex === 'auto' ? index(el) : zIndex
  }, getPositionWithMargin(el)) : false;
}

function getTransitionProps(target, nodes, currentProps) {
  var propsTo = nodes.map(function (el, i) {
    return filter_parent(el) && i in currentProps ? currentProps[i] ? isVisible(el) ? getPositionWithMargin(el) : {
      opacity: 0
    } : {
      opacity: isVisible(el) ? 1 : 0
    } : false;
  });
  var propsFrom = propsTo.map(function (props, i) {
    var from = filter_parent(nodes[i]) === target && (currentProps[i] || getProps(nodes[i]));

    if (!from) {
      return false;
    }

    if (!props) {
      delete from.opacity;
    } else if (!('opacity' in props)) {
      var opacity = from.opacity;

      if (opacity % 1) {
        props.opacity = 1;
      } else {
        delete from.opacity;
      }
    }

    return from;
  });
  return [propsTo, propsFrom];
}

function animate_slide_reset(el) {
  css(el.children, {
    height: '',
    left: '',
    opacity: '',
    pointerEvents: '',
    position: '',
    top: '',
    marginTop: '',
    marginLeft: '',
    transform: '',
    width: '',
    zIndex: ''
  });
  css(el, {
    height: '',
    display: '',
    padding: ''
  });
}

function getPositionWithMargin(el) {
  var _offset = dimensions_offset(el),
      height = _offset.height,
      width = _offset.width;

  var _position = position(el),
      top = _position.top,
      left = _position.left;

  var _css = css(el, ['marginTop', 'marginLeft']),
      marginLeft = _css.marginLeft,
      marginTop = _css.marginTop;

  return {
    top: top,
    left: left,
    height: height,
    width: width,
    marginLeft: marginLeft,
    marginTop: marginTop,
    transform: ''
  };
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/mixin/animate.js





/* harmony default export */ var mixin_animate = ({
  props: {
    duration: Number,
    animation: Boolean
  },
  data: {
    duration: 150,
    animation: 'slide'
  },
  methods: {
    animate: function animate(action) {
      var _this = this;

      var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.$el;
      var name = this.animation;
      var animationFn = name === 'fade' ? fade : name === 'delayed-fade' ? function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return fade.apply(void 0, args.concat([40]));
      } : !name ? function () {
        action();
        return Promise.resolve();
      } : animate_slide;
      return animationFn(action, target, this.duration).then(function () {
        return _this.$update(target, 'resize');
      }, noop);
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/util/options.js
function options_slicedToArray(arr, i) { return options_arrayWithHoles(arr) || options_iterableToArrayLimit(arr, i) || options_unsupportedIterableToArray(arr, i) || options_nonIterableRest(); }

function options_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function options_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return options_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return options_arrayLikeToArray(o, minLen); }

function options_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function options_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function options_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function options_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
















var strats = {};
strats.events = strats.created = strats.beforeConnect = strats.connected = strats.beforeDisconnect = strats.disconnected = strats.destroy = concatStrat; // args strategy

strats.args = function (parentVal, childVal) {
  return childVal !== false && concatStrat(childVal || parentVal);
}; // update strategy


strats.update = function (parentVal, childVal) {
  return sortBy(concatStrat(parentVal, isFunction(childVal) ? {
    read: childVal
  } : childVal), 'order');
}; // property strategy


strats.props = function (parentVal, childVal) {
  if (isArray(childVal)) {
    childVal = childVal.reduce(function (value, key) {
      value[key] = String;
      return value;
    }, {});
  }

  return strats.methods(parentVal, childVal);
}; // extend strategy


strats.computed = strats.methods = function (parentVal, childVal) {
  return childVal ? parentVal ? lang_assign({}, parentVal, childVal) : childVal : parentVal;
}; // data strategy


strats.data = function (parentVal, childVal, vm) {
  if (!vm) {
    if (!childVal) {
      return parentVal;
    }

    if (!parentVal) {
      return childVal;
    }

    return function (vm) {
      return mergeFnData(parentVal, childVal, vm);
    };
  }

  return mergeFnData(parentVal, childVal, vm);
};

function mergeFnData(parentVal, childVal, vm) {
  return strats.computed(isFunction(parentVal) ? parentVal.call(vm, vm) : parentVal, isFunction(childVal) ? childVal.call(vm, vm) : childVal);
} // concat strategy


function concatStrat(parentVal, childVal) {
  parentVal = parentVal && !isArray(parentVal) ? [parentVal] : parentVal;
  return childVal ? parentVal ? parentVal.concat(childVal) : isArray(childVal) ? childVal : [childVal] : parentVal;
} // default strategy


function defaultStrat(parentVal, childVal) {
  return isUndefined(childVal) ? parentVal : childVal;
}

function mergeOptions(parent, child, vm) {
  var options = {};

  if (isFunction(child)) {
    child = child.options;
  }

  if (child.extends) {
    parent = mergeOptions(parent, child.extends, vm);
  }

  if (child.mixins) {
    for (var i = 0, l = child.mixins.length; i < l; i++) {
      parent = mergeOptions(parent, child.mixins[i], vm);
    }
  }

  for (var key in parent) {
    mergeKey(key);
  }

  for (var _key in child) {
    if (!hasOwn(parent, _key)) {
      mergeKey(_key);
    }
  }

  function mergeKey(key) {
    options[key] = (strats[key] || defaultStrat)(parent[key], child[key], vm);
  }

  return options;
}
function parseOptions(options) {
  var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  try {
    return !options ? {} : startsWith(options, '{') ? JSON.parse(options) : args.length && !includes(options, ':') ? options_defineProperty({}, args[0], options) : options.split(';').reduce(function (options, option) {
      var _option$split = option.split(/:(.*)/),
          _option$split2 = options_slicedToArray(_option$split, 2),
          key = _option$split2[0],
          value = _option$split2[1];

      if (key && !isUndefined(value)) {
        options[key.trim()] = value.trim();
      }

      return options;
    }, {});
  } catch (e) {
    return {};
  }
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/components/filter.js
function filter_slicedToArray(arr, i) { return filter_arrayWithHoles(arr) || filter_iterableToArrayLimit(arr, i) || filter_unsupportedIterableToArray(arr, i) || filter_nonIterableRest(); }

function filter_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function filter_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return filter_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return filter_arrayLikeToArray(o, minLen); }

function filter_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function filter_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function filter_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }



















/* harmony default export */ var components_filter = ({
  mixins: [mixin_animate],
  args: 'target',
  props: {
    target: Boolean,
    selActive: Boolean
  },
  data: {
    target: null,
    selActive: false,
    attrItem: 'uk-filter-control',
    cls: 'uk-active',
    duration: 250
  },
  computed: {
    toggles: {
      get: function get(_ref, $el) {
        var attrItem = _ref.attrItem;
        return $$("[".concat(attrItem, "],[data-").concat(attrItem, "]"), $el);
      },
      watch: function watch() {
        var _this = this;

        this.updateState();

        if (this.selActive !== false) {
          var actives = $$(this.selActive, this.$el);
          this.toggles.forEach(function (el) {
            return toggleClass(el, _this.cls, includes(actives, el));
          });
        }
      },
      immediate: true
    },
    children: {
      get: function get(_ref2, $el) {
        var target = _ref2.target;
        return $$("".concat(target, " > *"), $el);
      },
      watch: function watch(list, old) {
        if (old && !isEqualList(list, old)) {
          this.updateState();
        }
      },
      immediate: true
    }
  },
  events: [{
    name: 'click',
    delegate: function delegate() {
      return "[".concat(this.attrItem, "],[data-").concat(this.attrItem, "]");
    },
    handler: function handler(e) {
      e.preventDefault();
      this.apply(e.current);
    }
  }],
  methods: {
    apply: function apply(el) {
      var prevState = this.getState();
      var newState = mergeState(el, this.attrItem, this.getState());

      if (!isEqualState(prevState, newState)) {
        this.setState(newState);
      }
    },
    getState: function getState() {
      var _this2 = this;

      return this.toggles.filter(function (item) {
        return hasClass(item, _this2.cls);
      }).reduce(function (state, el) {
        return mergeState(el, _this2.attrItem, state);
      }, {
        filter: {
          '': ''
        },
        sort: []
      });
    },
    setState: function setState(state) {
      var _this3 = this;

      var animate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      state = lang_assign({
        filter: {
          '': ''
        },
        sort: []
      }, state);
      trigger(this.$el, 'beforeFilter', [this, state]);
      this.toggles.forEach(function (el) {
        return toggleClass(el, _this3.cls, !!matchFilter(el, _this3.attrItem, state));
      });
      Promise.all($$(this.target, this.$el).map(function (target) {
        var filterFn = function filterFn() {
          applyState(state, target, filter_children(target));

          _this3.$update(_this3.$el);
        };

        return animate ? _this3.animate(filterFn, target) : filterFn();
      })).then(function () {
        return trigger(_this3.$el, 'afterFilter', [_this3]);
      });
    },
    updateState: function updateState() {
      var _this4 = this;

      fastdom.write(function () {
        return _this4.setState(_this4.getState(), false);
      });
    }
  }
});

function getFilter(el, attr) {
  return parseOptions(attr_data(el, attr), ['filter']);
}

function isEqualState(stateA, stateB) {
  return ['filter', 'sort'].every(function (prop) {
    return isEqual(stateA[prop], stateB[prop]);
  });
}

function applyState(state, target, children) {
  var selector = getSelector(state);
  children.forEach(function (el) {
    return css(el, 'display', selector && !matches(el, selector) ? 'none' : '');
  });

  var _state$sort = filter_slicedToArray(state.sort, 2),
      sort = _state$sort[0],
      order = _state$sort[1];

  if (sort) {
    var sorted = sortItems(children, sort, order);

    if (!isEqual(sorted, children)) {
      append(target, sorted);
    }
  }
}

function mergeState(el, attr, state) {
  var filterBy = getFilter(el, attr);
  var filter = filterBy.filter,
      group = filterBy.group,
      sort = filterBy.sort,
      _filterBy$order = filterBy.order,
      order = _filterBy$order === void 0 ? 'asc' : _filterBy$order;

  if (filter || isUndefined(sort)) {
    if (group) {
      if (filter) {
        delete state.filter[''];
        state.filter[group] = filter;
      } else {
        delete state.filter[group];

        if (isEmpty(state.filter) || '' in state.filter) {
          state.filter = {
            '': filter || ''
          };
        }
      }
    } else {
      state.filter = {
        '': filter || ''
      };
    }
  }

  if (!isUndefined(sort)) {
    state.sort = [sort, order];
  }

  return state;
}

function matchFilter(el, attr, _ref3) {
  var _ref3$filter = _ref3.filter,
      stateFilter = _ref3$filter === void 0 ? {
    '': ''
  } : _ref3$filter,
      _ref3$sort = filter_slicedToArray(_ref3.sort, 2),
      stateSort = _ref3$sort[0],
      stateOrder = _ref3$sort[1];

  var _getFilter = getFilter(el, attr),
      _getFilter$filter = _getFilter.filter,
      filter = _getFilter$filter === void 0 ? '' : _getFilter$filter,
      _getFilter$group = _getFilter.group,
      group = _getFilter$group === void 0 ? '' : _getFilter$group,
      sort = _getFilter.sort,
      _getFilter$order = _getFilter.order,
      order = _getFilter$order === void 0 ? 'asc' : _getFilter$order;

  return isUndefined(sort) ? group in stateFilter && filter === stateFilter[group] || !filter && group && !(group in stateFilter) && !stateFilter[''] : stateSort === sort && stateOrder === order;
}

function isEqualList(listA, listB) {
  return listA.length === listB.length && listA.every(function (el) {
    return ~listB.indexOf(el);
  });
}

function getSelector(_ref4) {
  var filter = _ref4.filter;
  var selector = '';
  each(filter, function (value) {
    return selector += value || '';
  });
  return selector;
}

function sortItems(nodes, sort, order) {
  return lang_assign([], nodes).sort(function (a, b) {
    return attr_data(a, sort).localeCompare(attr_data(b, sort), undefined, {
      numeric: true
    }) * (order === 'asc' || -1);
  });
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/mixin/internal/slideshow-animations.js




/* harmony default export */ var slideshow_animations = ({
  slide: {
    show: function show(dir) {
      return [{
        transform: _translate(dir * -100)
      }, {
        transform: _translate()
      }];
    },
    percent: function percent(current) {
      return translated(current);
    },
    translate: function translate(percent, dir) {
      return [{
        transform: _translate(dir * -100 * percent)
      }, {
        transform: _translate(dir * 100 * (1 - percent))
      }];
    }
  }
});
function translated(el) {
  return Math.abs(css(el, 'transform').split(',')[4] / el.offsetWidth) || 0;
}

function _translate() {
  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var unit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '%';
  value += value ? unit : '';
  return isIE ? "translateX(".concat(value, ")") : "translate3d(".concat(value, ", 0, 0)"); // currently not translate3d in IE, translate3d within translate3d does not work while transitioning
}


function scale3d(value) {
  return "scale3d(".concat(value, ", ").concat(value, ", 1)");
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/components/internal/lightbox-animations.js


/* harmony default export */ var lightbox_animations = (lang_assign({}, slideshow_animations, {
  fade: {
    show: function show() {
      return [{
        opacity: 0
      }, {
        opacity: 1
      }];
    },
    percent: function percent(current) {
      return 1 - css(current, 'opacity');
    },
    translate: function translate(percent) {
      return [{
        opacity: 1 - percent
      }, {
        opacity: percent
      }];
    }
  },
  scale: {
    show: function show() {
      return [{
        opacity: 0,
        transform: scale3d(1 - .2)
      }, {
        opacity: 1,
        transform: scale3d(1)
      }];
    },
    percent: function percent(current) {
      return 1 - css(current, 'opacity');
    },
    translate: function translate(percent) {
      return [{
        opacity: 1 - percent,
        transform: scale3d(1 - .2 * percent)
      }, {
        opacity: percent,
        transform: scale3d(1 - .2 + .2 * percent)
      }];
    }
  }
}));
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/mixin/container.js

/* harmony default export */ var container = ({
  props: {
    container: Boolean
  },
  data: {
    container: true
  },
  computed: {
    container: function container(_ref) {
      var container = _ref.container;
      return container === true && this.$container || container && $(container);
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/mixin/togglable.js










/* harmony default export */ var togglable = ({
  props: {
    cls: Boolean,
    animation: 'list',
    duration: Number,
    origin: String,
    transition: String
  },
  data: {
    cls: false,
    animation: [false],
    duration: 200,
    origin: false,
    transition: 'linear',
    clsEnter: 'uk-togglabe-enter',
    clsLeave: 'uk-togglabe-leave',
    initProps: {
      overflow: '',
      height: '',
      paddingTop: '',
      paddingBottom: '',
      marginTop: '',
      marginBottom: ''
    },
    hideProps: {
      overflow: 'hidden',
      height: 0,
      paddingTop: 0,
      paddingBottom: 0,
      marginTop: 0,
      marginBottom: 0
    }
  },
  computed: {
    hasAnimation: function hasAnimation(_ref) {
      var animation = _ref.animation;
      return !!animation[0];
    },
    hasTransition: function hasTransition(_ref2) {
      var animation = _ref2.animation;
      return this.hasAnimation && animation[0] === true;
    }
  },
  methods: {
    toggleElement: function toggleElement(targets, toggle, animate) {
      var _this = this;

      return new Promise(function (resolve) {
        return Promise.all(toNodes(targets).map(function (el) {
          var show = isBoolean(toggle) ? toggle : !_this.isToggled(el);

          if (!trigger(el, "before".concat(show ? 'show' : 'hide'), [_this])) {
            return Promise.reject();
          }

          var promise = (isFunction(animate) ? animate : animate === false || !_this.hasAnimation ? _this._toggle : _this.hasTransition ? toggleHeight(_this) : toggleAnimation(_this))(el, show);
          var cls = show ? _this.clsEnter : _this.clsLeave;
          addClass(el, cls);
          trigger(el, show ? 'show' : 'hide', [_this]);

          var done = function done() {
            removeClass(el, cls);
            trigger(el, show ? 'shown' : 'hidden', [_this]);

            _this.$update(el);
          };

          return promise ? promise.then(done, function () {
            removeClass(el, cls);
            return Promise.reject();
          }) : done();
        })).then(resolve, noop);
      });
    },
    isToggled: function isToggled() {
      var el = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.$el;
      el = toNodes(el)[0];
      return hasClass(el, this.clsEnter) ? true : hasClass(el, this.clsLeave) ? false : this.cls ? hasClass(el, this.cls.split(' ')[0]) : isVisible(el);
    },
    _toggle: function _toggle(el, toggled) {
      if (!el) {
        return;
      }

      toggled = Boolean(toggled);
      var changed;

      if (this.cls) {
        changed = includes(this.cls, ' ') || toggled !== hasClass(el, this.cls);
        changed && toggleClass(el, this.cls, includes(this.cls, ' ') ? undefined : toggled);
      } else {
        changed = toggled === el.hidden;
        changed && (el.hidden = !toggled);
      }

      $$('[autofocus]', el).some(function (el) {
        return isVisible(el) ? el.focus() || true : el.blur();
      });

      if (changed) {
        trigger(el, 'toggled', [toggled, this]);
        this.$update(el);
      }
    }
  }
});
function toggleHeight(_ref3) {
  var isToggled = _ref3.isToggled,
      duration = _ref3.duration,
      initProps = _ref3.initProps,
      hideProps = _ref3.hideProps,
      transition = _ref3.transition,
      _toggle = _ref3._toggle;
  return function (el, show) {
    var inProgress = Transition.inProgress(el);
    var inner = el.hasChildNodes ? toFloat(css(el.firstElementChild, 'marginTop')) + toFloat(css(el.lastElementChild, 'marginBottom')) : 0;
    var currentHeight = isVisible(el) ? dimensions_height(el) + (inProgress ? 0 : inner) : 0;
    Transition.cancel(el);

    if (!isToggled(el)) {
      _toggle(el, true);
    }

    dimensions_height(el, ''); // Update child components first

    fastdom.flush();
    var endHeight = dimensions_height(el) + (inProgress ? 0 : inner);
    dimensions_height(el, currentHeight);
    return (show ? Transition.start(el, lang_assign({}, initProps, {
      overflow: 'hidden',
      height: endHeight
    }), Math.round(duration * (1 - currentHeight / endHeight)), transition) : Transition.start(el, hideProps, Math.round(duration * (currentHeight / endHeight)), transition).then(function () {
      return _toggle(el, false);
    })).then(function () {
      return css(el, initProps);
    });
  };
}

function toggleAnimation(cmp) {
  return function (el, show) {
    Animation.cancel(el);
    var animation = cmp.animation,
        duration = cmp.duration,
        _toggle = cmp._toggle;

    if (show) {
      _toggle(el, true);

      return Animation["in"](el, animation[0], duration, cmp.origin);
    }

    return Animation.out(el, animation[1] || animation[0], duration, cmp.origin).then(function () {
      return _toggle(el, false);
    });
  };
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/mixin/modal.js












var active = [];
/* harmony default export */ var modal = ({
  mixins: [mixin_class, container, togglable],
  props: {
    selPanel: String,
    selClose: String,
    escClose: Boolean,
    bgClose: Boolean,
    stack: Boolean
  },
  data: {
    cls: 'uk-open',
    escClose: true,
    bgClose: true,
    overlay: true,
    stack: false
  },
  computed: {
    panel: function panel(_ref, $el) {
      var selPanel = _ref.selPanel;
      return $(selPanel, $el);
    },
    transitionElement: function transitionElement() {
      return this.panel;
    },
    bgClose: function bgClose(_ref2) {
      var bgClose = _ref2.bgClose;
      return bgClose && this.panel;
    }
  },
  beforeDisconnect: function beforeDisconnect() {
    if (this.isToggled()) {
      this.toggleElement(this.$el, false, false);
    }
  },
  events: [{
    name: 'click',
    delegate: function delegate() {
      return this.selClose;
    },
    handler: function handler(e) {
      e.preventDefault();
      this.hide();
    }
  }, {
    name: 'toggle',
    self: true,
    handler: function handler(e, toggle) {
      if (e.defaultPrevented) {
        return;
      }

      e.preventDefault();
      this.target = toggle.$el;

      if (this.isToggled() === includes(active, this)) {
        this.toggle();
      }
    }
  }, {
    name: 'beforeshow',
    self: true,
    handler: function handler(e) {
      if (includes(active, this)) {
        return false;
      }

      if (!this.stack && active.length) {
        Promise.all(active.map(function (modal) {
          return modal.hide();
        })).then(this.show);
        e.preventDefault();
      } else {
        active.push(this);
      }
    }
  }, {
    name: 'show',
    self: true,
    handler: function handler() {
      var _this = this;

      var docEl = document.documentElement;

      if (width(window) > docEl.clientWidth && this.overlay) {
        css(document.body, 'overflowY', 'scroll');
      }

      if (this.stack) {
        css(this.$el, 'zIndex', toFloat(css(this.$el, 'zIndex')) + active.length);
      }

      addClass(docEl, this.clsPage);

      if (this.bgClose) {
        once(this.$el, 'hide', on(document, pointerDown, function (_ref3) {
          var target = _ref3.target;

          if (last(active) !== _this || _this.overlay && !within(target, _this.$el) || within(target, _this.panel)) {
            return;
          }

          once(document, "".concat(pointerUp, " ").concat(pointerCancel, " scroll"), function (_ref4) {
            var defaultPrevented = _ref4.defaultPrevented,
                type = _ref4.type,
                newTarget = _ref4.target;

            if (!defaultPrevented && type === pointerUp && target === newTarget) {
              _this.hide();
            }
          }, true);
        }), {
          self: true
        });
      }

      if (this.escClose) {
        once(this.$el, 'hide', on(document, 'keydown', function (e) {
          if (e.keyCode === 27 && last(active) === _this) {
            _this.hide();
          }
        }), {
          self: true
        });
      }
    }
  }, {
    name: 'shown',
    self: true,
    handler: function handler() {
      if (!isFocusable(this.$el)) {
        attr(this.$el, 'tabindex', '0');
      }

      if (!$(':focus', this.$el)) {
        this.$el.focus();
      }
    }
  }, {
    name: 'hide',
    self: true,
    handler: function handler() {
      if (isFocusable(this.target)) {
        this.target.focus();
        this.target = null;
      }
    }
  }, {
    name: 'hidden',
    self: true,
    handler: function handler() {
      var _this2 = this;

      if (includes(active, this)) {
        active.splice(active.indexOf(this), 1);
      }

      if (!active.length) {
        css(document.body, 'overflowY', '');
      }

      css(this.$el, 'zIndex', '');

      if (!active.some(function (modal) {
        return modal.clsPage === _this2.clsPage;
      })) {
        removeClass(document.documentElement, this.clsPage);
      }
    }
  }],
  methods: {
    toggle: function toggle() {
      return this.isToggled() ? this.hide() : this.show();
    },
    show: function show() {
      var _this3 = this;

      if (this.container && filter_parent(this.$el) !== this.container) {
        append(this.container, this.$el);
        return new Promise(function (resolve) {
          return requestAnimationFrame(function () {
            return _this3.show().then(resolve);
          });
        });
      }

      return this.toggleElement(this.$el, true, modal_animate(this));
    },
    hide: function hide() {
      return this.toggleElement(this.$el, false, modal_animate(this));
    }
  }
});

function modal_animate(_ref5) {
  var transitionElement = _ref5.transitionElement,
      _toggle = _ref5._toggle;
  return function (el, show) {
    return new Promise(function (resolve, reject) {
      return once(el, 'show hide', function () {
        el._reject && el._reject();
        el._reject = reject;

        _toggle(el, show);

        var off = once(transitionElement, 'transitionstart', function () {
          once(transitionElement, 'transitionend transitioncancel', resolve, {
            self: true
          });
          clearTimeout(timer);
        }, {
          self: true
        });
        var timer = setTimeout(function () {
          off();
          resolve();
        }, toMs(css(transitionElement, 'transitionDuration')));
      });
    }).then(function () {
      return delete el._reject;
    });
  };
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/mixin/internal/slideshow-transitioner.js






function Transitioner(prev, next, dir, _ref) {
  var animation = _ref.animation,
      easing = _ref.easing;
  var _percent = animation.percent,
      _translate = animation.translate,
      _animation$show = animation.show,
      show = _animation$show === void 0 ? noop : _animation$show;
  var props = show(dir);
  var deferred = new Deferred();
  return {
    dir: dir,
    show: function show(duration) {
      var _this = this;

      var percent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var linear = arguments.length > 2 ? arguments[2] : undefined;
      var timing = linear ? 'linear' : easing;
      duration -= Math.round(duration * clamp(percent, -1, 1));
      this.translate(percent);
      triggerUpdate(next, 'itemin', {
        percent: percent,
        duration: duration,
        timing: timing,
        dir: dir
      });
      triggerUpdate(prev, 'itemout', {
        percent: 1 - percent,
        duration: duration,
        timing: timing,
        dir: dir
      });
      Promise.all([Transition.start(next, props[1], duration, timing), Transition.start(prev, props[0], duration, timing)]).then(function () {
        _this.reset();

        deferred.resolve();
      }, noop);
      return deferred.promise;
    },
    cancel: function cancel() {
      Transition.cancel([next, prev]);
    },
    reset: function reset() {
      for (var prop in props[0]) {
        css([next, prev], prop, '');
      }
    },
    forward: function forward(duration) {
      var percent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.percent();
      Transition.cancel([next, prev]);
      return this.show(duration, percent, true);
    },
    translate: function translate(percent) {
      this.reset();

      var props = _translate(percent, dir);

      css(next, props[1]);
      css(prev, props[0]);
      triggerUpdate(next, 'itemtranslatein', {
        percent: percent,
        dir: dir
      });
      triggerUpdate(prev, 'itemtranslateout', {
        percent: 1 - percent,
        dir: dir
      });
    },
    percent: function percent() {
      return _percent(prev || next, next, dir);
    },
    getDistance: function getDistance() {
      return prev && prev.offsetWidth;
    }
  };
}

function triggerUpdate(el, type, data) {
  trigger(el, createEvent(type, false, false, data));
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/mixin/slider-autoplay.js


/* harmony default export */ var slider_autoplay = ({
  props: {
    autoplay: Boolean,
    autoplayInterval: Number,
    pauseOnHover: Boolean
  },
  data: {
    autoplay: false,
    autoplayInterval: 7000,
    pauseOnHover: true
  },
  connected: function connected() {
    this.autoplay && this.startAutoplay();
  },
  disconnected: function disconnected() {
    this.stopAutoplay();
  },
  update: function update() {
    attr(this.slides, 'tabindex', '-1');
  },
  events: [{
    name: 'visibilitychange',
    el: function el() {
      return document;
    },
    filter: function filter() {
      return this.autoplay;
    },
    handler: function handler() {
      if (document.hidden) {
        this.stopAutoplay();
      } else {
        this.startAutoplay();
      }
    }
  }],
  methods: {
    startAutoplay: function startAutoplay() {
      var _this = this;

      this.stopAutoplay();
      this.interval = setInterval(function () {
        return (!_this.draggable || !$(':focus', _this.$el)) && (!_this.pauseOnHover || !matches(_this.$el, ':hover')) && !_this.stack.length && _this.show('next');
      }, this.autoplayInterval);
    },
    stopAutoplay: function stopAutoplay() {
      this.interval && clearInterval(this.interval);
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/mixin/slider-drag.js




/* harmony default export */ var slider_drag = ({
  props: {
    draggable: Boolean
  },
  data: {
    draggable: true,
    threshold: 10
  },
  created: function created() {
    var _this = this;

    ['start', 'move', 'end'].forEach(function (key) {
      var fn = _this[key];

      _this[key] = function (e) {
        var pos = getEventPos(e).x * (isRtl ? -1 : 1);
        _this.prevPos = pos !== _this.pos ? _this.pos : _this.prevPos;
        _this.pos = pos;
        fn(e);
      };
    });
  },
  events: [{
    name: pointerDown,
    delegate: function delegate() {
      return this.selSlides;
    },
    handler: function handler(e) {
      if (!this.draggable || !isTouch(e) && hasTextNodesOnly(e.target) || closest(e.target, selInput) || e.button > 0 || this.length < 2) {
        return;
      }

      this.start(e);
    }
  }, {
    name: 'dragstart',
    handler: function handler(e) {
      e.preventDefault();
    }
  }],
  methods: {
    start: function start() {
      this.drag = this.pos;

      if (this._transitioner) {
        this.percent = this._transitioner.percent();
        this.drag += this._transitioner.getDistance() * this.percent * this.dir;

        this._transitioner.cancel();

        this._transitioner.translate(this.percent);

        this.dragging = true;
        this.stack = [];
      } else {
        this.prevIndex = this.index;
      }

      on(document, pointerMove, this.move, {
        passive: false
      }); // 'input' event is triggered by video controls

      on(document, "".concat(pointerUp, " ").concat(pointerCancel, " input"), this.end, true);
      css(this.list, 'userSelect', 'none');
    },
    move: function move(e) {
      var _this2 = this;

      var distance = this.pos - this.drag;

      if (distance === 0 || this.prevPos === this.pos || !this.dragging && Math.abs(distance) < this.threshold) {
        return;
      } // prevent click event


      css(this.list, 'pointerEvents', 'none');
      e.cancelable && e.preventDefault();
      this.dragging = true;
      this.dir = distance < 0 ? 1 : -1;
      var slides = this.slides;
      var prevIndex = this.prevIndex;
      var dis = Math.abs(distance);
      var nextIndex = this.getIndex(prevIndex + this.dir, prevIndex);
      var width = this._getDistance(prevIndex, nextIndex) || slides[prevIndex].offsetWidth;

      while (nextIndex !== prevIndex && dis > width) {
        this.drag -= width * this.dir;
        prevIndex = nextIndex;
        dis -= width;
        nextIndex = this.getIndex(prevIndex + this.dir, prevIndex);
        width = this._getDistance(prevIndex, nextIndex) || slides[prevIndex].offsetWidth;
      }

      this.percent = dis / width;
      var prev = slides[prevIndex];
      var next = slides[nextIndex];
      var changed = this.index !== nextIndex;
      var edge = prevIndex === nextIndex;
      var itemShown;
      [this.index, this.prevIndex].filter(function (i) {
        return !includes([nextIndex, prevIndex], i);
      }).forEach(function (i) {
        trigger(slides[i], 'itemhidden', [_this2]);

        if (edge) {
          itemShown = true;
          _this2.prevIndex = prevIndex;
        }
      });

      if (this.index === prevIndex && this.prevIndex !== prevIndex || itemShown) {
        trigger(slides[this.index], 'itemshown', [this]);
      }

      if (changed) {
        this.prevIndex = prevIndex;
        this.index = nextIndex;
        !edge && trigger(prev, 'beforeitemhide', [this]);
        trigger(next, 'beforeitemshow', [this]);
      }

      this._transitioner = this._translate(Math.abs(this.percent), prev, !edge && next);

      if (changed) {
        !edge && trigger(prev, 'itemhide', [this]);
        trigger(next, 'itemshow', [this]);
      }
    },
    end: function end() {
      off(document, pointerMove, this.move, {
        passive: false
      });
      off(document, "".concat(pointerUp, " ").concat(pointerCancel, " input"), this.end, true);

      if (this.dragging) {
        this.dragging = null;

        if (this.index === this.prevIndex) {
          this.percent = 1 - this.percent;
          this.dir *= -1;

          this._show(false, this.index, true);

          this._transitioner = null;
        } else {
          var dirChange = (isRtl ? this.dir * (isRtl ? 1 : -1) : this.dir) < 0 === this.prevPos > this.pos;
          this.index = dirChange ? this.index : this.prevIndex;

          if (dirChange) {
            this.percent = 1 - this.percent;
          }

          this.show(this.dir > 0 && !dirChange || this.dir < 0 && dirChange ? 'next' : 'previous', true);
        }
      }

      css(this.list, {
        userSelect: '',
        pointerEvents: ''
      });
      this.drag = this.percent = null;
    }
  }
});

function hasTextNodesOnly(el) {
  return !el.children.length && el.childNodes.length;
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/mixin/slider-nav.js





/* harmony default export */ var slider_nav = ({
  data: {
    selNav: false
  },
  computed: {
    nav: function nav(_ref, $el) {
      var selNav = _ref.selNav;
      return $(selNav, $el);
    },
    selNavItem: function selNavItem(_ref2) {
      var attrItem = _ref2.attrItem;
      return "[".concat(attrItem, "],[data-").concat(attrItem, "]");
    },
    navItems: function navItems(_, $el) {
      return $$(this.selNavItem, $el);
    }
  },
  update: {
    write: function write() {
      var _this = this;

      if (this.nav && this.length !== this.nav.children.length) {
        html(this.nav, this.slides.map(function (_, i) {
          return "<li ".concat(_this.attrItem, "=\"").concat(i, "\"><a href></a></li>");
        }).join(''));
      }

      this.navItems.concat(this.nav).forEach(function (el) {
        return el && (el.hidden = !_this.maxIndex);
      });
      this.updateNav();
    },
    events: ['resize']
  },
  events: [{
    name: 'click',
    delegate: function delegate() {
      return this.selNavItem;
    },
    handler: function handler(e) {
      e.preventDefault();
      this.show(attr_data(e.current, this.attrItem));
    }
  }, {
    name: 'itemshow',
    handler: 'updateNav'
  }],
  methods: {
    updateNav: function updateNav() {
      var _this2 = this;

      var i = this.getValidIndex();
      this.navItems.forEach(function (el) {
        var cmd = attr_data(el, _this2.attrItem);
        toggleClass(el, _this2.clsActive, toNumber(cmd) === i);
        toggleClass(el, 'uk-invisible', _this2.finite && (cmd === 'previous' && i === 0 || cmd === 'next' && i >= _this2.maxIndex));
      });
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/mixin/slider.js







/* harmony default export */ var slider = ({
  mixins: [slider_autoplay, slider_drag, slider_nav],
  props: {
    clsActivated: Boolean,
    easing: String,
    index: Number,
    finite: Boolean,
    velocity: Number,
    selSlides: String
  },
  data: function data() {
    return {
      easing: 'ease',
      finite: false,
      velocity: 1,
      index: 0,
      prevIndex: -1,
      stack: [],
      percent: 0,
      clsActive: 'uk-active',
      clsActivated: false,
      Transitioner: false,
      transitionOptions: {}
    };
  },
  connected: function connected() {
    this.prevIndex = -1;
    this.index = this.getValidIndex(this.$props.index);
    this.stack = [];
  },
  disconnected: function disconnected() {
    removeClass(this.slides, this.clsActive);
  },
  computed: {
    duration: function duration(_ref, $el) {
      var velocity = _ref.velocity;
      return speedUp($el.offsetWidth / velocity);
    },
    list: function list(_ref2, $el) {
      var selList = _ref2.selList;
      return $(selList, $el);
    },
    maxIndex: function maxIndex() {
      return this.length - 1;
    },
    selSlides: function selSlides(_ref3) {
      var selList = _ref3.selList,
          selSlides = _ref3.selSlides;
      return "".concat(selList, " ").concat(selSlides || '> *');
    },
    slides: {
      get: function get() {
        return $$(this.selSlides, this.$el);
      },
      watch: function watch() {
        this.$reset();
      }
    },
    length: function length() {
      return this.slides.length;
    }
  },
  events: {
    itemshown: function itemshown() {
      this.$update(this.list);
    }
  },
  methods: {
    show: function show(index) {
      var _this = this;

      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (this.dragging || !this.length) {
        return;
      }

      var stack = this.stack;
      var queueIndex = force ? 0 : stack.length;

      var reset = function reset() {
        stack.splice(queueIndex, 1);

        if (stack.length) {
          _this.show(stack.shift(), true);
        }
      };

      stack[force ? 'unshift' : 'push'](index);

      if (!force && stack.length > 1) {
        if (stack.length === 2) {
          this._transitioner.forward(Math.min(this.duration, 200));
        }

        return;
      }

      var prevIndex = this.getIndex(this.index);
      var prev = hasClass(this.slides, this.clsActive) && this.slides[prevIndex];
      var nextIndex = this.getIndex(index, this.index);
      var next = this.slides[nextIndex];

      if (prev === next) {
        reset();
        return;
      }

      this.dir = getDirection(index, prevIndex);
      this.prevIndex = prevIndex;
      this.index = nextIndex;

      if (prev && !trigger(prev, 'beforeitemhide', [this]) || !trigger(next, 'beforeitemshow', [this, prev])) {
        this.index = this.prevIndex;
        reset();
        return;
      }

      var promise = this._show(prev, next, force).then(function () {
        prev && trigger(prev, 'itemhidden', [_this]);
        trigger(next, 'itemshown', [_this]);
        return new Promise(function (resolve) {
          fastdom.write(function () {
            stack.shift();

            if (stack.length) {
              _this.show(stack.shift(), true);
            } else {
              _this._transitioner = null;
            }

            resolve();
          });
        });
      });

      prev && trigger(prev, 'itemhide', [this]);
      trigger(next, 'itemshow', [this]);
      return promise;
    },
    getIndex: function getIndex() {
      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.index;
      var prev = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.index;
      return clamp(lang_getIndex(index, this.slides, prev, this.finite), 0, this.maxIndex);
    },
    getValidIndex: function getValidIndex() {
      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.index;
      var prevIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.prevIndex;
      return this.getIndex(index, prevIndex);
    },
    _show: function _show(prev, next, force) {
      this._transitioner = this._getTransitioner(prev, next, this.dir, lang_assign({
        easing: force ? next.offsetWidth < 600 ? 'cubic-bezier(0.25, 0.46, 0.45, 0.94)'
        /* easeOutQuad */
        : 'cubic-bezier(0.165, 0.84, 0.44, 1)'
        /* easeOutQuart */
        : this.easing
      }, this.transitionOptions));

      if (!force && !prev) {
        this._translate(1);

        return Promise.resolve();
      }

      var length = this.stack.length;
      return this._transitioner[length > 1 ? 'forward' : 'show'](length > 1 ? Math.min(this.duration, 75 + 75 / (length - 1)) : this.duration, this.percent);
    },
    _getDistance: function _getDistance(prev, next) {
      return this._getTransitioner(prev, prev !== next && next).getDistance();
    },
    _translate: function _translate(percent) {
      var prev = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.prevIndex;
      var next = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.index;

      var transitioner = this._getTransitioner(prev !== next ? prev : false, next);

      transitioner.translate(percent);
      return transitioner;
    },
    _getTransitioner: function _getTransitioner() {
      var prev = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.prevIndex;
      var next = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.index;
      var dir = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.dir || 1;
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.transitionOptions;
      return new this.Transitioner(isNumber(prev) ? this.slides[prev] : prev, isNumber(next) ? this.slides[next] : next, dir * (isRtl ? -1 : 1), options);
    }
  }
});

function getDirection(index, prevIndex) {
  return index === 'next' ? 1 : index === 'previous' ? -1 : index < prevIndex ? -1 : 1;
}

function speedUp(x) {
  return .5 * x + 300; // parabola through (400,500; 600,600; 1800,1200)
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/mixin/slideshow.js




/* harmony default export */ var slideshow = ({
  mixins: [slider],
  props: {
    animation: String
  },
  data: {
    animation: 'slide',
    clsActivated: 'uk-transition-active',
    Animations: slideshow_animations,
    Transitioner: Transitioner
  },
  computed: {
    animation: function animation(_ref) {
      var animation = _ref.animation,
          Animations = _ref.Animations;
      return lang_assign(Animations[animation] || Animations.slide, {
        name: animation
      });
    },
    transitionOptions: function transitionOptions() {
      return {
        animation: this.animation
      };
    }
  },
  events: {
    'itemshow itemhide itemshown itemhidden': function itemshowItemhideItemshownItemhidden(_ref2) {
      var target = _ref2.target;
      this.$update(target);
    },
    beforeitemshow: function beforeitemshow(_ref3) {
      var target = _ref3.target;
      addClass(target, this.clsActive);
    },
    itemshown: function itemshown(_ref4) {
      var target = _ref4.target;
      addClass(target, this.clsActivated);
    },
    itemhidden: function itemhidden(_ref5) {
      var target = _ref5.target;
      removeClass(target, this.clsActive, this.clsActivated);
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/util/ajax.js



function ajax(url, options) {
  var env = lang_assign({
    data: null,
    method: 'GET',
    headers: {},
    xhr: new XMLHttpRequest(),
    beforeSend: noop,
    responseType: ''
  }, options);
  return Promise.resolve().then(function () {
    return env.beforeSend(env);
  }).then(function () {
    return send(url, env);
  });
}

function send(url, env) {
  return new Promise(function (resolve, reject) {
    var xhr = env.xhr;

    for (var prop in env) {
      if (prop in xhr) {
        try {
          xhr[prop] = env[prop];
        } catch (e) {}
      }
    }

    xhr.open(env.method.toUpperCase(), url);

    for (var header in env.headers) {
      xhr.setRequestHeader(header, env.headers[header]);
    }

    on(xhr, 'load', function () {
      if (xhr.status === 0 || xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {
        // IE 11 does not support responseType 'json'
        if (env.responseType === 'json' && isString(xhr.response)) {
          xhr = lang_assign(copyXhr(xhr), {
            response: JSON.parse(xhr.response)
          });
        }

        resolve(xhr);
      } else {
        reject(lang_assign(Error(xhr.statusText), {
          xhr: xhr,
          status: xhr.status
        }));
      }
    });
    on(xhr, 'error', function () {
      return reject(lang_assign(Error('Network Error'), {
        xhr: xhr
      }));
    });
    on(xhr, 'timeout', function () {
      return reject(lang_assign(Error('Network Timeout'), {
        xhr: xhr
      }));
    });
    xhr.send(env.data);
  });
}

function getImage(src, srcset, sizes) {
  return new Promise(function (resolve, reject) {
    var img = new Image();

    img.onerror = function (e) {
      return reject(e);
    };

    img.onload = function () {
      return resolve(img);
    };

    sizes && (img.sizes = sizes);
    srcset && (img.srcset = srcset);
    img.src = src;
  });
}

function copyXhr(source) {
  var target = {};

  for (var key in source) {
    target[key] = source[key];
  }

  return target;
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/components/lightbox-panel.js












/* harmony default export */ var lightbox_panel = ({
  mixins: [container, modal, togglable, slideshow],
  functional: true,
  props: {
    delayControls: Number,
    preload: Number,
    videoAutoplay: Boolean,
    template: String
  },
  data: function data() {
    return {
      preload: 1,
      videoAutoplay: false,
      delayControls: 3000,
      items: [],
      cls: 'uk-open',
      clsPage: 'uk-lightbox-page',
      selList: '.uk-lightbox-items',
      attrItem: 'uk-lightbox-item',
      selClose: '.uk-close-large',
      selCaption: '.uk-lightbox-caption',
      pauseOnHover: false,
      velocity: 2,
      Animations: lightbox_animations,
      template: "<div class=\"uk-lightbox uk-overflow-hidden\">\n                        <ul class=\"uk-lightbox-items\"></ul>\n                        <div class=\"uk-lightbox-toolbar uk-position-top uk-text-right uk-transition-slide-top uk-transition-opaque\">\n                            <button class=\"uk-lightbox-toolbar-icon uk-close-large\" type=\"button\" uk-close></button>\n                         </div>\n                        <a class=\"uk-lightbox-button uk-position-center-left uk-position-medium uk-transition-fade\" href uk-slidenav-previous uk-lightbox-item=\"previous\"></a>\n                        <a class=\"uk-lightbox-button uk-position-center-right uk-position-medium uk-transition-fade\" href uk-slidenav-next uk-lightbox-item=\"next\"></a>\n                        <div class=\"uk-lightbox-toolbar uk-lightbox-caption uk-position-bottom uk-text-center uk-transition-slide-bottom uk-transition-opaque\"></div>\n                    </div>"
    };
  },
  created: function created() {
    var $el = $(this.template);
    var list = $(this.selList, $el);
    this.items.forEach(function () {
      return append(list, '<li>');
    });
    this.$mount(append(this.container, $el));
  },
  computed: {
    caption: function caption(_ref, $el) {
      var selCaption = _ref.selCaption;
      return $(selCaption, $el);
    }
  },
  events: [{
    name: "".concat(pointerMove, " ").concat(pointerDown, " keydown"),
    handler: 'showControls'
  }, {
    name: 'click',
    self: true,
    delegate: function delegate() {
      return this.selSlides;
    },
    handler: function handler(e) {
      if (e.defaultPrevented) {
        return;
      }

      this.hide();
    }
  }, {
    name: 'shown',
    self: true,
    handler: function handler() {
      this.showControls();
    }
  }, {
    name: 'hide',
    self: true,
    handler: function handler() {
      this.hideControls();
      removeClass(this.slides, this.clsActive);
      Transition.stop(this.slides);
    }
  }, {
    name: 'hidden',
    self: true,
    handler: function handler() {
      this.$destroy(true);
    }
  }, {
    name: 'keyup',
    el: function el() {
      return document;
    },
    handler: function handler(e) {
      if (!this.isToggled(this.$el) || !this.draggable) {
        return;
      }

      switch (e.keyCode) {
        case 37:
          this.show('previous');
          break;

        case 39:
          this.show('next');
          break;
      }
    }
  }, {
    name: 'beforeitemshow',
    handler: function handler(e) {
      if (this.isToggled()) {
        return;
      }

      this.draggable = false;
      e.preventDefault();
      this.toggleElement(this.$el, true, false);
      this.animation = lightbox_animations.scale;
      removeClass(e.target, this.clsActive);
      this.stack.splice(1, 0, this.index);
    }
  }, {
    name: 'itemshow',
    handler: function handler() {
      html(this.caption, this.getItem().caption || '');

      for (var j = -this.preload; j <= this.preload; j++) {
        this.loadItem(this.index + j);
      }
    }
  }, {
    name: 'itemshown',
    handler: function handler() {
      this.draggable = this.$props.draggable;
    }
  }, {
    name: 'itemload',
    handler: function handler(_, item) {
      var _this = this;

      var src = item.source,
          type = item.type,
          _item$alt = item.alt,
          alt = _item$alt === void 0 ? '' : _item$alt,
          poster = item.poster,
          _item$attrs = item.attrs,
          attrs = _item$attrs === void 0 ? {} : _item$attrs;
      this.setItem(item, '<span uk-spinner></span>');

      if (!src) {
        return;
      }

      var matches;
      var iframeAttrs = {
        frameborder: '0',
        allow: 'autoplay',
        allowfullscreen: '',
        style: 'max-width: 100%; box-sizing: border-box;',
        'uk-responsive': '',
        'uk-video': "".concat(this.videoAutoplay)
      }; // Image

      if (type === 'image' || src.match(/\.(avif|jpe?g|a?png|gif|svg|webp)($|\?)/i)) {
        getImage(src, attrs.srcset, attrs.size).then(function (_ref2) {
          var width = _ref2.width,
              height = _ref2.height;
          return _this.setItem(item, createEl('img', lang_assign({
            src: src,
            width: width,
            height: height,
            alt: alt
          }, attrs)));
        }, function () {
          return _this.setError(item);
        }); // Video
      } else if (type === 'video' || src.match(/\.(mp4|webm|ogv)($|\?)/i)) {
        var video = createEl('video', lang_assign({
          src: src,
          poster: poster,
          controls: '',
          playsinline: '',
          'uk-video': "".concat(this.videoAutoplay)
        }, attrs));
        on(video, 'loadedmetadata', function () {
          attr(video, {
            width: video.videoWidth,
            height: video.videoHeight
          });

          _this.setItem(item, video);
        });
        on(video, 'error', function () {
          return _this.setError(item);
        }); // Iframe
      } else if (type === 'iframe' || src.match(/\.(html|php)($|\?)/i)) {
        this.setItem(item, createEl('iframe', lang_assign({
          src: src,
          frameborder: '0',
          allowfullscreen: '',
          class: 'uk-lightbox-iframe'
        }, attrs))); // YouTube
      } else if (matches = src.match(/\/\/(?:.*?youtube(-nocookie)?\..*?[?&]v=|youtu\.be\/)([\w-]{11})[&?]?(.*)?/)) {
        this.setItem(item, createEl('iframe', lang_assign({
          src: "https://www.youtube".concat(matches[1] || '', ".com/embed/").concat(matches[2]).concat(matches[3] ? "?".concat(matches[3]) : ''),
          width: 1920,
          height: 1080
        }, iframeAttrs, attrs))); // Vimeo
      } else if (matches = src.match(/\/\/.*?vimeo\.[a-z]+\/(\d+)[&?]?(.*)?/)) {
        ajax("https://vimeo.com/api/oembed.json?maxwidth=1920&url=".concat(encodeURI(src)), {
          responseType: 'json',
          withCredentials: false
        }).then(function (_ref3) {
          var _ref3$response = _ref3.response,
              height = _ref3$response.height,
              width = _ref3$response.width;
          return _this.setItem(item, createEl('iframe', lang_assign({
            src: "https://player.vimeo.com/video/".concat(matches[1]).concat(matches[2] ? "?".concat(matches[2]) : ''),
            width: width,
            height: height
          }, iframeAttrs, attrs)));
        }, function () {
          return _this.setError(item);
        });
      }
    }
  }],
  methods: {
    loadItem: function loadItem() {
      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.index;
      var item = this.getItem(index);

      if (!this.getSlide(item).childElementCount) {
        trigger(this.$el, 'itemload', [item]);
      }
    },
    getItem: function getItem() {
      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.index;
      return this.items[lang_getIndex(index, this.slides)];
    },
    setItem: function setItem(item, content) {
      trigger(this.$el, 'itemloaded', [this, html(this.getSlide(item), content)]);
    },
    getSlide: function getSlide(item) {
      return this.slides[this.items.indexOf(item)];
    },
    setError: function setError(item) {
      this.setItem(item, '<span uk-icon="icon: bolt; ratio: 2"></span>');
    },
    showControls: function showControls() {
      clearTimeout(this.controlsTimer);
      this.controlsTimer = setTimeout(this.hideControls, this.delayControls);
      addClass(this.$el, 'uk-active', 'uk-transition-active');
    },
    hideControls: function hideControls() {
      removeClass(this.$el, 'uk-active', 'uk-transition-active');
    }
  }
});

function createEl(tag, attrs) {
  var el = fragment("<".concat(tag, ">"));
  attr(el, attrs);
  return el;
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/components/lightbox.js



/* harmony default export */ var lightbox = ({
  install: install,
  props: {
    toggle: String
  },
  data: {
    toggle: 'a'
  },
  computed: {
    toggles: {
      get: function get(_ref, $el) {
        var toggle = _ref.toggle;
        return $$(toggle, $el);
      },
      watch: function watch() {
        this.hide();
      }
    }
  },
  disconnected: function disconnected() {
    this.hide();
  },
  events: [{
    name: 'click',
    delegate: function delegate() {
      return "".concat(this.toggle, ":not(.uk-disabled)");
    },
    handler: function handler(e) {
      e.preventDefault();
      this.show(e.current);
    }
  }],
  methods: {
    show: function show(index) {
      var _this = this;

      var items = uniqueBy(this.toggles.map(toItem), 'source');

      if (isElement(index)) {
        var _toItem = toItem(index),
            source = _toItem.source;

        index = findIndex(items, function (_ref2) {
          var src = _ref2.source;
          return source === src;
        });
      }

      this.panel = this.panel || this.$create('lightboxPanel', lang_assign({}, this.$props, {
        items: items
      }));
      on(this.panel.$el, 'hidden', function () {
        return _this.panel = false;
      });
      return this.panel.show(index);
    },
    hide: function hide() {
      return this.panel && this.panel.hide();
    }
  }
});

function install(UIkit, Lightbox) {
  if (!UIkit.lightboxPanel) {
    UIkit.component('lightboxPanel', lightbox_panel);
  }

  lang_assign(Lightbox.props, UIkit.component('lightboxPanel').options.props);
}

function toItem(el) {
  var item = {};
  ['href', 'caption', 'type', 'poster', 'alt', 'attrs'].forEach(function (attr) {
    item[attr === 'href' ? 'source' : attr] = attr_data(el, attr);
  });
  item.attrs = parseOptions(item.attrs);
  return item;
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/components/notification.js
var _events;



function notification_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



/* harmony default export */ var notification = ({
  mixins: [container],
  functional: true,
  args: ['message', 'status'],
  data: {
    message: '',
    status: '',
    timeout: 5000,
    group: null,
    pos: 'top-center',
    clsContainer: 'uk-notification',
    clsClose: 'uk-notification-close',
    clsMsg: 'uk-notification-message'
  },
  install: notification_install,
  computed: {
    marginProp: function marginProp(_ref) {
      var pos = _ref.pos;
      return "margin".concat(startsWith(pos, 'top') ? 'Top' : 'Bottom');
    },
    startProps: function startProps() {
      return notification_defineProperty({
        opacity: 0
      }, this.marginProp, -this.$el.offsetHeight);
    }
  },
  created: function created() {
    var container = $(".".concat(this.clsContainer, "-").concat(this.pos), this.container) || append(this.container, "<div class=\"".concat(this.clsContainer, " ").concat(this.clsContainer, "-").concat(this.pos, "\" style=\"display: block\"></div>"));
    this.$mount(append(container, "<div class=\"".concat(this.clsMsg).concat(this.status ? " ".concat(this.clsMsg, "-").concat(this.status) : '', "\">\n                <a href class=\"").concat(this.clsClose, "\" data-uk-close></a>\n                <div>").concat(this.message, "</div>\n            </div>")));
  },
  connected: function connected() {
    var _this = this;

    var margin = toFloat(css(this.$el, this.marginProp));
    Transition.start(css(this.$el, this.startProps), notification_defineProperty({
      opacity: 1
    }, this.marginProp, margin)).then(function () {
      if (_this.timeout) {
        _this.timer = setTimeout(_this.close, _this.timeout);
      }
    });
  },
  events: (_events = {
    click: function click(e) {
      if (closest(e.target, 'a[href="#"],a[href=""]')) {
        e.preventDefault();
      }

      this.close();
    }
  }, notification_defineProperty(_events, pointerEnter, function () {
    if (this.timer) {
      clearTimeout(this.timer);
    }
  }), notification_defineProperty(_events, pointerLeave, function () {
    if (this.timeout) {
      this.timer = setTimeout(this.close, this.timeout);
    }
  }), _events),
  methods: {
    close: function close(immediate) {
      var _this2 = this;

      var removeFn = function removeFn(el) {
        var container = filter_parent(el);
        trigger(el, 'close', [_this2]);
        dom_remove(el);

        if (container && !container.hasChildNodes()) {
          dom_remove(container);
        }
      };

      if (this.timer) {
        clearTimeout(this.timer);
      }

      if (immediate) {
        removeFn(this.$el);
      } else {
        Transition.start(this.$el, this.startProps).then(removeFn);
      }
    }
  }
});

function notification_install(UIkit) {
  UIkit.notification.closeAll = function (group, immediate) {
    apply(document.body, function (el) {
      var notification = UIkit.getComponent(el, 'notification');

      if (notification && (!group || group === notification.group)) {
        notification.close(immediate);
      }
    });
  };
}
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.number.to-fixed.js
var es_number_to_fixed = __webpack_require__("./node_modules/core-js/modules/es.number.to-fixed.js");
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/mixin/media.js

/* harmony default export */ var media = ({
  props: {
    media: Boolean
  },
  data: {
    media: false
  },
  computed: {
    matchMedia: function matchMedia() {
      var media = toMedia(this.media);
      return !media || window.matchMedia(media).matches;
    }
  }
});

function toMedia(value) {
  if (isString(value)) {
    if (value[0] === '@') {
      var name = "breakpoint-".concat(value.substr(1));
      value = toFloat(getCssVar(name));
    } else if (isNaN(value)) {
      return value;
    }
  }

  return value && !isNaN(value) ? "(min-width: ".concat(value, "px)") : false;
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/core/svg.js
function svg_toConsumableArray(arr) { return svg_arrayWithoutHoles(arr) || svg_iterableToArray(arr) || svg_unsupportedIterableToArray(arr) || svg_nonIterableSpread(); }

function svg_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function svg_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function svg_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return svg_arrayLikeToArray(arr); }

function svg_slicedToArray(arr, i) { return svg_arrayWithHoles(arr) || svg_iterableToArrayLimit(arr, i) || svg_unsupportedIterableToArray(arr, i) || svg_nonIterableRest(); }

function svg_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function svg_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return svg_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return svg_arrayLikeToArray(o, minLen); }

function svg_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function svg_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function svg_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }



















/* harmony default export */ var svg = ({
  args: 'src',
  props: {
    id: Boolean,
    icon: String,
    src: String,
    style: String,
    width: Number,
    height: Number,
    ratio: Number,
    class: String,
    strokeAnimation: Boolean,
    focusable: Boolean,
    // IE 11
    attributes: 'list'
  },
  data: {
    ratio: 1,
    include: ['style', 'class', 'focusable'],
    class: '',
    strokeAnimation: false
  },
  beforeConnect: function beforeConnect() {
    this.class += ' uk-svg';
  },
  connected: function connected() {
    var _this = this;

    if (!this.icon && includes(this.src, '#')) {
      var _this$src$split = this.src.split('#');

      var _this$src$split2 = svg_slicedToArray(_this$src$split, 2);

      this.src = _this$src$split2[0];
      this.icon = _this$src$split2[1];
    }

    this.svg = this.getSvg().then(function (el) {
      if (_this._connected) {
        var svg = insertSVG(el, _this.$el);

        if (_this.svgEl && svg !== _this.svgEl) {
          dom_remove(_this.svgEl);
        }

        _this.applyAttributes(svg, el);

        _this.$emit();

        return _this.svgEl = svg;
      }
    }, noop);
  },
  disconnected: function disconnected() {
    var _this2 = this;

    this.svg.then(function (svg) {
      if (!_this2._connected) {
        if (isVoidElement(_this2.$el)) {
          _this2.$el.hidden = false;
        }

        dom_remove(svg);
        _this2.svgEl = null;
      }
    });
    this.svg = null;
  },
  update: {
    read: function read() {
      return !!(this.strokeAnimation && this.svgEl && isVisible(this.svgEl));
    },
    write: function write() {
      applyAnimation(this.svgEl);
    },
    type: ['resize']
  },
  methods: {
    getSvg: function getSvg() {
      var _this3 = this;

      return loadSVG(this.src).then(function (svg) {
        return parseSVG(svg, _this3.icon) || Promise.reject('SVG not found.');
      });
    },
    applyAttributes: function applyAttributes(el, ref) {
      var _this4 = this;

      for (var prop in this.$options.props) {
        if (includes(this.include, prop) && prop in this) {
          attr(el, prop, this[prop]);
        }
      }

      for (var attribute in this.attributes) {
        var _this$attributes$attr = this.attributes[attribute].split(':', 2),
            _this$attributes$attr2 = svg_slicedToArray(_this$attributes$attr, 2),
            _prop = _this$attributes$attr2[0],
            value = _this$attributes$attr2[1];

        attr(el, _prop, value);
      }

      if (!this.id) {
        removeAttr(el, 'id');
      }

      var props = ['width', 'height'];
      var dimensions = props.map(function (prop) {
        return _this4[prop];
      });

      if (!dimensions.some(function (val) {
        return val;
      })) {
        dimensions = props.map(function (prop) {
          return attr(ref, prop);
        });
      }

      var viewBox = attr(ref, 'viewBox');

      if (viewBox && !dimensions.some(function (val) {
        return val;
      })) {
        dimensions = viewBox.split(' ').slice(2);
      }

      dimensions.forEach(function (val, i) {
        return attr(el, props[i], toFloat(val) * _this4.ratio || null);
      });
    }
  }
});
var loadSVG = memoize(function (src) {
  return new Promise(function (resolve, reject) {
    if (!src) {
      reject();
      return;
    }

    if (startsWith(src, 'data:')) {
      resolve(decodeURIComponent(src.split(',')[1]));
    } else {
      ajax(src).then(function (xhr) {
        return resolve(xhr.response);
      }, function () {
        return reject('SVG not found.');
      });
    }
  });
});

function parseSVG(svg, icon) {
  if (icon && includes(svg, '<symbol')) {
    svg = parseSymbols(svg, icon) || svg;
  }

  svg = $(svg.substr(svg.indexOf('<svg')));
  return svg && svg.hasChildNodes() && svg;
}

var symbolRe = /<symbol([^]*?id=(['"])(.+?)\2[^]*?<\/)symbol>/g;
var symbols = {};

function parseSymbols(svg, icon) {
  if (!symbols[svg]) {
    symbols[svg] = {};
    symbolRe.lastIndex = 0;
    var match;

    while (match = symbolRe.exec(svg)) {
      symbols[svg][match[3]] = "<svg xmlns=\"http://www.w3.org/2000/svg\"".concat(match[1], "svg>");
    }
  }

  return symbols[svg][icon];
}

function applyAnimation(el) {
  var length = getMaxPathLength(el);

  if (length) {
    el.style.setProperty('--uk-animation-stroke', length);
  }
}

function getMaxPathLength(el) {
  return Math.ceil(Math.max.apply(Math, [0].concat(svg_toConsumableArray($$('[stroke]', el).map(function (stroke) {
    try {
      return stroke.getTotalLength();
    } catch (e) {
      return 0;
    }
  })))));
}

function insertSVG(el, root) {
  if (isVoidElement(root) || root.tagName === 'CANVAS') {
    root.hidden = true;
    var next = root.nextElementSibling;
    return equals(el, next) ? next : after(root, el);
  }

  var last = root.lastElementChild;
  return equals(el, last) ? last : append(root, el);
}

function equals(el, other) {
  return isSVG(el) && isSVG(other) && innerHTML(el) === innerHTML(other);
}

function isSVG(el) {
  return el && el.tagName === 'svg';
}

function innerHTML(el) {
  return (el.innerHTML || new XMLSerializer().serializeToString(el).replace(/<svg.*?>(.*?)<\/svg>/g, '$1')).replace(/\s/g, '');
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/mixin/parallax.js
function parallax_slicedToArray(arr, i) { return parallax_arrayWithHoles(arr) || parallax_iterableToArrayLimit(arr, i) || parallax_unsupportedIterableToArray(arr, i) || parallax_nonIterableRest(); }

function parallax_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function parallax_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function parallax_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function parallax_toConsumableArray(arr) { return parallax_arrayWithoutHoles(arr) || parallax_iterableToArray(arr) || parallax_unsupportedIterableToArray(arr) || parallax_nonIterableSpread(); }

function parallax_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function parallax_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return parallax_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return parallax_arrayLikeToArray(o, minLen); }

function parallax_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function parallax_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return parallax_arrayLikeToArray(arr); }

function parallax_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }


























var _props = ['x', 'y', 'bgx', 'bgy', 'rotate', 'scale', 'color', 'backgroundColor', 'borderColor', 'opacity', 'blur', 'hue', 'grayscale', 'invert', 'saturate', 'sepia', 'fopacity', 'stroke'];
/* harmony default export */ var parallax = ({
  mixins: [media],
  props: _props.reduce(function (props, prop) {
    props[prop] = 'list';
    return props;
  }, {}),
  data: _props.reduce(function (data, prop) {
    data[prop] = undefined;
    return data;
  }, {}),
  computed: {
    props: function props(properties, $el) {
      var _this = this;

      return _props.reduce(function (props, prop) {
        if (isUndefined(properties[prop])) {
          return props;
        }

        var isColor = prop.match(/color/i);
        var isCssProp = isColor || prop === 'opacity';
        var pos, bgPos, diff;
        var steps = properties[prop].slice();

        if (isCssProp) {
          css($el, prop, '');
        }

        if (steps.length < 2) {
          steps.unshift((prop === 'scale' ? 1 : isCssProp ? css($el, prop) : 0) || 0);
        }

        var unit = getUnit(steps, prop);

        if (isColor) {
          var color = $el.style.color;
          steps = steps.map(function (step) {
            return parseColor($el, step);
          });
          $el.style.color = color;
        } else if (startsWith(prop, 'bg')) {
          var attr = prop === 'bgy' ? 'height' : 'width';
          steps = steps.map(function (step) {
            return toPx(step, attr, _this.$el);
          });
          css($el, "background-position-".concat(prop[2]), '');
          bgPos = css($el, 'backgroundPosition').split(' ')[prop[2] === 'x' ? 0 : 1]; // IE 11 can't read background-position-[x|y]

          if (_this.covers) {
            var min = Math.min.apply(Math, parallax_toConsumableArray(steps));
            var max = Math.max.apply(Math, parallax_toConsumableArray(steps));
            var down = steps.indexOf(min) < steps.indexOf(max);
            diff = max - min;
            steps = steps.map(function (step) {
              return step - (down ? min : max);
            });
            pos = "".concat(down ? -diff : 0, "px");
          } else {
            pos = bgPos;
          }
        } else {
          steps = steps.map(toFloat);
        }

        if (prop === 'stroke') {
          if (!steps.some(function (step) {
            return step;
          })) {
            return props;
          }

          var length = getMaxPathLength(_this.$el);
          css($el, 'strokeDasharray', length);

          if (unit === '%') {
            steps = steps.map(function (step) {
              return step * length / 100;
            });
          }

          steps = steps.reverse();
          prop = 'strokeDashoffset';
        }

        props[prop] = {
          steps: steps,
          unit: unit,
          pos: pos,
          bgPos: bgPos,
          diff: diff
        };
        return props;
      }, {});
    },
    bgProps: function bgProps() {
      var _this2 = this;

      return ['bgx', 'bgy'].filter(function (bg) {
        return bg in _this2.props;
      });
    },
    covers: function covers(_, $el) {
      return _covers($el);
    }
  },
  disconnected: function disconnected() {
    delete this._image;
  },
  update: {
    read: function read(data) {
      var _this3 = this;

      if (!this.matchMedia) {
        return;
      }

      if (!data.image && this.covers && this.bgProps.length) {
        var src = css(this.$el, 'backgroundImage').replace(/^none|url\(["']?(.+?)["']?\)$/, '$1');

        if (src) {
          var img = new Image();
          img.src = src;
          data.image = img;

          if (!img.naturalWidth) {
            img.onload = function () {
              return _this3.$update();
            };
          }
        }
      }

      var image = data.image;

      if (!image || !image.naturalWidth) {
        return;
      }

      var dimEl = {
        width: this.$el.offsetWidth,
        height: this.$el.offsetHeight
      };
      var dimImage = {
        width: image.naturalWidth,
        height: image.naturalHeight
      };
      var dim = Dimensions.cover(dimImage, dimEl);
      this.bgProps.forEach(function (prop) {
        var _this3$props$prop = _this3.props[prop],
            diff = _this3$props$prop.diff,
            bgPos = _this3$props$prop.bgPos,
            steps = _this3$props$prop.steps;
        var attr = prop === 'bgy' ? 'height' : 'width';
        var span = dim[attr] - dimEl[attr];

        if (span < diff) {
          dimEl[attr] = dim[attr] + diff - span;
        } else if (span > diff) {
          var posPercentage = dimEl[attr] / toPx(bgPos, attr, _this3.$el);

          if (posPercentage) {
            _this3.props[prop].steps = steps.map(function (step) {
              return step - (span - diff) / posPercentage;
            });
          }
        }

        dim = Dimensions.cover(dimImage, dimEl);
      });
      data.dim = dim;
    },
    write: function write(_ref) {
      var dim = _ref.dim;

      if (!this.matchMedia) {
        css(this.$el, {
          backgroundSize: '',
          backgroundRepeat: ''
        });
        return;
      }

      dim && css(this.$el, {
        backgroundSize: "".concat(dim.width, "px ").concat(dim.height, "px"),
        backgroundRepeat: 'no-repeat'
      });
    },
    events: ['resize']
  },
  methods: {
    reset: function reset() {
      var _this4 = this;

      each(this.getCss(0), function (_, prop) {
        return css(_this4.$el, prop, '');
      });
    },
    getCss: function getCss(percent) {
      var props = this.props;
      return Object.keys(props).reduce(function (css, prop) {
        var _props$prop = props[prop],
            steps = _props$prop.steps,
            unit = _props$prop.unit,
            pos = _props$prop.pos;
        var value = getValue(steps, percent);

        switch (prop) {
          // transforms
          case 'x':
          case 'y':
            {
              unit = unit || 'px';
              css.transform += " translate".concat(ucfirst(prop), "(").concat(toFloat(value).toFixed(unit === 'px' ? 0 : 2)).concat(unit, ")");
              break;
            }

          case 'rotate':
            unit = unit || 'deg';
            css.transform += " rotate(".concat(value + unit, ")");
            break;

          case 'scale':
            css.transform += " scale(".concat(value, ")");
            break;
          // bg image

          case 'bgy':
          case 'bgx':
            css["background-position-".concat(prop[2])] = "calc(".concat(pos, " + ").concat(value, "px)");
            break;
          // color

          case 'color':
          case 'backgroundColor':
          case 'borderColor':
            {
              var _getStep = getStep(steps, percent),
                  _getStep2 = parallax_slicedToArray(_getStep, 3),
                  start = _getStep2[0],
                  end = _getStep2[1],
                  p = _getStep2[2];

              css[prop] = "rgba(".concat(start.map(function (value, i) {
                value = value + p * (end[i] - value);
                return i === 3 ? toFloat(value) : parseInt(value, 10);
              }).join(','), ")");
              break;
            }
          // CSS Filter

          case 'blur':
            unit = unit || 'px';
            css.filter += " blur(".concat(value + unit, ")");
            break;

          case 'hue':
            unit = unit || 'deg';
            css.filter += " hue-rotate(".concat(value + unit, ")");
            break;

          case 'fopacity':
            unit = unit || '%';
            css.filter += " opacity(".concat(value + unit, ")");
            break;

          case 'grayscale':
          case 'invert':
          case 'saturate':
          case 'sepia':
            unit = unit || '%';
            css.filter += " ".concat(prop, "(").concat(value + unit, ")");
            break;

          default:
            css[prop] = value;
        }

        return css;
      }, {
        transform: '',
        filter: ''
      });
    }
  }
});

function parseColor(el, color) {
  return css(css(el, 'color', color), 'color').split(/[(),]/g).slice(1, -1).concat(1).slice(0, 4).map(toFloat);
}

function getStep(steps, percent) {
  var count = steps.length - 1;
  var index = Math.min(Math.floor(count * percent), count - 1);
  var step = steps.slice(index, index + 2);
  step.push(percent === 1 ? 1 : percent % (1 / count) * count);
  return step;
}

function getValue(steps, percent) {
  var digits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;

  var _getStep3 = getStep(steps, percent),
      _getStep4 = parallax_slicedToArray(_getStep3, 3),
      start = _getStep4[0],
      end = _getStep4[1],
      p = _getStep4[2];

  return (isNumber(start) ? start + Math.abs(start - end) * p * (start < end ? 1 : -1) : +end).toFixed(digits);
}

function getUnit(steps) {
  return steps.reduce(function (unit, step) {
    return isString(step) && step.replace(/-|\d/g, '').trim() || unit;
  }, '');
}

function _covers(el) {
  var backgroundSize = el.style.backgroundSize;
  var covers = css(css(el, 'backgroundSize', ''), 'backgroundSize') === 'cover';
  el.style.backgroundSize = backgroundSize;
  return covers;
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/components/parallax.js



/* harmony default export */ var components_parallax = ({
  mixins: [parallax],
  props: {
    target: String,
    viewport: Number,
    easing: Number
  },
  data: {
    target: false,
    viewport: 1,
    easing: 1
  },
  computed: {
    target: function target(_ref, $el) {
      var target = _ref.target;
      return getOffsetElement(target && query(target, $el) || $el);
    }
  },
  update: {
    read: function read(_ref2, types) {
      var percent = _ref2.percent;

      if (!types.has('scroll')) {
        percent = false;
      }

      if (!this.matchMedia) {
        return;
      }

      var prev = percent;
      percent = ease(scrolledOver(this.target) / (this.viewport || 1), this.easing);
      return {
        percent: percent,
        style: prev !== percent ? this.getCss(percent) : false
      };
    },
    write: function write(_ref3) {
      var style = _ref3.style;

      if (!this.matchMedia) {
        this.reset();
        return;
      }

      style && css(this.$el, style);
    },
    events: ['scroll', 'resize']
  }
});

function ease(percent, easing) {
  return clamp(percent * (1 - (easing - easing * percent)));
} // SVG elements do not inherit from HTMLElement


function getOffsetElement(el) {
  return el ? 'offsetTop' in el ? el : getOffsetElement(filter_parent(el)) : document.body;
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/mixin/slider-reactive.js
/* harmony default export */ var slider_reactive = ({
  update: {
    write: function write() {
      if (this.stack.length || this.dragging) {
        return;
      }

      var index = this.getValidIndex(this.index);

      if (!~this.prevIndex || this.index !== index) {
        this.show(index);
      }
    },
    events: ['resize']
  }
});
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/components/internal/slider-transitioner.js






/* harmony default export */ function slider_transitioner(prev, next, dir, _ref) {
  var center = _ref.center,
      easing = _ref.easing,
      list = _ref.list;
  var deferred = new Deferred();
  var from = prev ? getLeft(prev, list, center) : getLeft(next, list, center) + dimensions(next).width * dir;
  var to = next ? getLeft(next, list, center) : from + dimensions(prev).width * dir * (isRtl ? -1 : 1);
  return {
    dir: dir,
    show: function show(duration) {
      var percent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var linear = arguments.length > 2 ? arguments[2] : undefined;
      var timing = linear ? 'linear' : easing;
      duration -= Math.round(duration * clamp(percent, -1, 1));
      this.translate(percent);
      percent = prev ? percent : clamp(percent, 0, 1);
      slider_transitioner_triggerUpdate(this.getItemIn(), 'itemin', {
        percent: percent,
        duration: duration,
        timing: timing,
        dir: dir
      });
      prev && slider_transitioner_triggerUpdate(this.getItemIn(true), 'itemout', {
        percent: 1 - percent,
        duration: duration,
        timing: timing,
        dir: dir
      });
      Transition.start(list, {
        transform: _translate(-to * (isRtl ? -1 : 1), 'px')
      }, duration, timing).then(deferred.resolve, noop);
      return deferred.promise;
    },
    cancel: function cancel() {
      Transition.cancel(list);
    },
    reset: function reset() {
      css(list, 'transform', '');
    },
    forward: function forward(duration) {
      var percent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.percent();
      Transition.cancel(list);
      return this.show(duration, percent, true);
    },
    translate: function translate(percent) {
      var distance = this.getDistance() * dir * (isRtl ? -1 : 1);
      css(list, 'transform', _translate(clamp(-to + (distance - distance * percent), -getWidth(list), dimensions(list).width) * (isRtl ? -1 : 1), 'px'));
      var actives = this.getActives();
      var itemIn = this.getItemIn();
      var itemOut = this.getItemIn(true);
      percent = prev ? clamp(percent, -1, 1) : 0;
      filter_children(list).forEach(function (slide) {
        var isActive = includes(actives, slide);
        var isIn = slide === itemIn;
        var isOut = slide === itemOut;
        var translateIn = isIn || !isOut && (isActive || dir * (isRtl ? -1 : 1) === -1 ^ getElLeft(slide, list) > getElLeft(prev || next));
        slider_transitioner_triggerUpdate(slide, "itemtranslate".concat(translateIn ? 'in' : 'out'), {
          dir: dir,
          percent: isOut ? 1 - percent : isIn ? percent : isActive ? 1 : 0
        });
      });
    },
    percent: function percent() {
      return Math.abs((css(list, 'transform').split(',')[4] * (isRtl ? -1 : 1) + from) / (to - from));
    },
    getDistance: function getDistance() {
      return Math.abs(to - from);
    },
    getItemIn: function getItemIn() {
      var out = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var actives = this.getActives();
      var nextActives = inView(list, getLeft(next || prev, list, center));

      if (out) {
        var temp = actives;
        actives = nextActives;
        nextActives = temp;
      }

      return nextActives[findIndex(nextActives, function (el) {
        return !includes(actives, el);
      })];
    },
    getActives: function getActives() {
      return inView(list, getLeft(prev || next, list, center));
    }
  };
}

function getLeft(el, list, center) {
  var left = getElLeft(el, list);
  return center ? left - centerEl(el, list) : Math.min(left, getMax(list));
}

function getMax(list) {
  return Math.max(0, getWidth(list) - dimensions(list).width);
}
function getWidth(list) {
  return filter_children(list).reduce(function (right, el) {
    return dimensions(el).width + right;
  }, 0);
}

function centerEl(el, list) {
  return dimensions(list).width / 2 - dimensions(el).width / 2;
}

function getElLeft(el, list) {
  return el && (position(el).left + (isRtl ? dimensions(el).width - dimensions(list).width : 0)) * (isRtl ? -1 : 1) || 0;
}

function inView(list, listLeft) {
  listLeft -= 1;
  var listRight = listLeft + dimensions(list).width + 2;
  return filter_children(list).filter(function (slide) {
    var slideLeft = getElLeft(slide, list);
    var slideRight = slideLeft + dimensions(slide).width;
    return slideLeft >= listLeft && slideRight <= listRight;
  });
}

function slider_transitioner_triggerUpdate(el, type, data) {
  trigger(el, createEvent(type, false, false, data));
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/components/slider.js
function slider_toConsumableArray(arr) { return slider_arrayWithoutHoles(arr) || slider_iterableToArray(arr) || slider_unsupportedIterableToArray(arr) || slider_nonIterableSpread(); }

function slider_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function slider_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return slider_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return slider_arrayLikeToArray(o, minLen); }

function slider_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function slider_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return slider_arrayLikeToArray(arr); }

function slider_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }




















/* harmony default export */ var components_slider = ({
  mixins: [mixin_class, slider, slider_reactive],
  props: {
    center: Boolean,
    sets: Boolean
  },
  data: {
    center: false,
    sets: false,
    attrItem: 'uk-slider-item',
    selList: '.uk-slider-items',
    selNav: '.uk-slider-nav',
    clsContainer: 'uk-slider-container',
    Transitioner: slider_transitioner
  },
  computed: {
    avgWidth: function avgWidth() {
      return getWidth(this.list) / this.length;
    },
    finite: function finite(_ref) {
      var finite = _ref.finite;
      return finite || Math.ceil(getWidth(this.list)) < dimensions(this.list).width + getMaxElWidth(this.list) + this.center;
    },
    maxIndex: function maxIndex() {
      if (!this.finite || this.center && !this.sets) {
        return this.length - 1;
      }

      if (this.center) {
        return last(this.sets);
      }

      var lft = 0;
      var max = getMax(this.list);
      var index = findIndex(this.slides, function (el) {
        if (lft >= max) {
          return true;
        }

        lft += dimensions(el).width;
      });
      return ~index ? index : this.length - 1;
    },
    sets: function sets(_ref2) {
      var _this = this;

      var sets = _ref2.sets;

      if (!sets) {
        return;
      }

      var width = dimensions(this.list).width / (this.center ? 2 : 1);
      var left = 0;
      var leftCenter = width;
      var slideLeft = 0;
      sets = sortBy(this.slides, 'offsetLeft').reduce(function (sets, slide, i) {
        var slideWidth = dimensions(slide).width;
        var slideRight = slideLeft + slideWidth;

        if (slideRight > left) {
          if (!_this.center && i > _this.maxIndex) {
            i = _this.maxIndex;
          }

          if (!includes(sets, i)) {
            var cmp = _this.slides[i + 1];

            if (_this.center && cmp && slideWidth < leftCenter - dimensions(cmp).width / 2) {
              leftCenter -= slideWidth;
            } else {
              leftCenter = width;
              sets.push(i);
              left = slideLeft + width + (_this.center ? slideWidth / 2 : 0);
            }
          }
        }

        slideLeft += slideWidth;
        return sets;
      }, []);
      return !isEmpty(sets) && sets;
    },
    transitionOptions: function transitionOptions() {
      return {
        center: this.center,
        list: this.list
      };
    }
  },
  connected: function connected() {
    toggleClass(this.$el, this.clsContainer, !$(".".concat(this.clsContainer), this.$el));
  },
  update: {
    write: function write() {
      var _this2 = this;

      this.navItems.forEach(function (el) {
        var index = toNumber(attr_data(el, _this2.attrItem));

        if (index !== false) {
          el.hidden = !_this2.maxIndex || index > _this2.maxIndex || _this2.sets && !includes(_this2.sets, index);
        }
      });

      if (this.length && !this.dragging && !this.stack.length) {
        this.reorder();

        this._translate(1);
      }

      var actives = this._getTransitioner(this.index).getActives();

      this.slides.forEach(function (slide) {
        return toggleClass(slide, _this2.clsActive, includes(actives, slide));
      });

      if (this.clsActivated && (!this.sets || includes(this.sets, toFloat(this.index)))) {
        this.slides.forEach(function (slide) {
          return toggleClass(slide, _this2.clsActivated || '', includes(actives, slide));
        });
      }
    },
    events: ['resize']
  },
  events: {
    beforeitemshow: function beforeitemshow(e) {
      if (!this.dragging && this.sets && this.stack.length < 2 && !includes(this.sets, this.index)) {
        this.index = this.getValidIndex();
      }

      var diff = Math.abs(this.index - this.prevIndex + (this.dir > 0 && this.index < this.prevIndex || this.dir < 0 && this.index > this.prevIndex ? (this.maxIndex + 1) * this.dir : 0));

      if (!this.dragging && diff > 1) {
        for (var i = 0; i < diff; i++) {
          this.stack.splice(1, 0, this.dir > 0 ? 'next' : 'previous');
        }

        e.preventDefault();
        return;
      }

      var index = this.dir < 0 || !this.slides[this.prevIndex] ? this.index : this.prevIndex;
      this.duration = speedUp(this.avgWidth / this.velocity) * (dimensions(this.slides[index]).width / this.avgWidth);
      this.reorder();
    },
    itemshow: function itemshow() {
      if (~this.prevIndex) {
        addClass(this._getTransitioner().getItemIn(), this.clsActive);
      }
    }
  },
  methods: {
    reorder: function reorder() {
      var _this3 = this;

      if (this.finite) {
        css(this.slides, 'order', '');
        return;
      }

      var index = this.dir > 0 && this.slides[this.prevIndex] ? this.prevIndex : this.index;
      this.slides.forEach(function (slide, i) {
        return css(slide, 'order', _this3.dir > 0 && i < index ? 1 : _this3.dir < 0 && i >= _this3.index ? -1 : '');
      });

      if (!this.center) {
        return;
      }

      var next = this.slides[index];
      var width = dimensions(this.list).width / 2 - dimensions(next).width / 2;
      var j = 0;

      while (width > 0) {
        var slideIndex = this.getIndex(--j + index, index);
        var slide = this.slides[slideIndex];
        css(slide, 'order', slideIndex > index ? -2 : -1);
        width -= dimensions(slide).width;
      }
    },
    getValidIndex: function getValidIndex() {
      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.index;
      var prevIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.prevIndex;
      index = this.getIndex(index, prevIndex);

      if (!this.sets) {
        return index;
      }

      var prev;

      do {
        if (includes(this.sets, index)) {
          return index;
        }

        prev = index;
        index = this.getIndex(index + this.dir, prevIndex);
      } while (index !== prev);

      return index;
    }
  }
});

function getMaxElWidth(list) {
  return Math.max.apply(Math, [0].concat(slider_toConsumableArray(filter_children(list).map(function (el) {
    return dimensions(el).width;
  }))));
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/components/slider-parallax.js


/* harmony default export */ var slider_parallax = ({
  mixins: [parallax],
  data: {
    selItem: '!li'
  },
  computed: {
    item: function item(_ref, $el) {
      var selItem = _ref.selItem;
      return query(selItem, $el);
    }
  },
  events: [{
    name: 'itemin itemout',
    self: true,
    el: function el() {
      return this.item;
    },
    handler: function handler(_ref2) {
      var _this = this;

      var type = _ref2.type,
          _ref2$detail = _ref2.detail,
          percent = _ref2$detail.percent,
          duration = _ref2$detail.duration,
          timing = _ref2$detail.timing,
          dir = _ref2$detail.dir;
      fastdom.read(function () {
        var propsFrom = _this.getCss(getCurrentPercent(type, dir, percent));

        var propsTo = _this.getCss(isIn(type) ? .5 : dir > 0 ? 1 : 0);

        fastdom.write(function () {
          css(_this.$el, propsFrom);
          Transition.start(_this.$el, propsTo, duration, timing).catch(noop);
        });
      });
    }
  }, {
    name: 'transitioncanceled transitionend',
    self: true,
    el: function el() {
      return this.item;
    },
    handler: function handler() {
      Transition.cancel(this.$el);
    }
  }, {
    name: 'itemtranslatein itemtranslateout',
    self: true,
    el: function el() {
      return this.item;
    },
    handler: function handler(_ref3) {
      var _this2 = this;

      var type = _ref3.type,
          _ref3$detail = _ref3.detail,
          percent = _ref3$detail.percent,
          dir = _ref3$detail.dir;
      fastdom.read(function () {
        var props = _this2.getCss(getCurrentPercent(type, dir, percent));

        fastdom.write(function () {
          return css(_this2.$el, props);
        });
      });
    }
  }]
});

function isIn(type) {
  return endsWith(type, 'in');
}

function getCurrentPercent(type, dir, percent) {
  percent /= 2;
  return !isIn(type) ? dir < 0 ? percent : 1 - percent : dir < 0 ? 1 - percent : percent;
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/components/internal/slideshow-animations.js


/* harmony default export */ var internal_slideshow_animations = (lang_assign({}, slideshow_animations, {
  fade: {
    show: function show() {
      return [{
        opacity: 0,
        zIndex: 0
      }, {
        zIndex: -1
      }];
    },
    percent: function percent(current) {
      return 1 - css(current, 'opacity');
    },
    translate: function translate(percent) {
      return [{
        opacity: 1 - percent,
        zIndex: 0
      }, {
        zIndex: -1
      }];
    }
  },
  scale: {
    show: function show() {
      return [{
        opacity: 0,
        transform: scale3d(1 + .5),
        zIndex: 0
      }, {
        zIndex: -1
      }];
    },
    percent: function percent(current) {
      return 1 - css(current, 'opacity');
    },
    translate: function translate(percent) {
      return [{
        opacity: 1 - percent,
        transform: scale3d(1 + .5 * percent),
        zIndex: 0
      }, {
        zIndex: -1
      }];
    }
  },
  pull: {
    show: function show(dir) {
      return dir < 0 ? [{
        transform: _translate(30),
        zIndex: -1
      }, {
        transform: _translate(),
        zIndex: 0
      }] : [{
        transform: _translate(-100),
        zIndex: 0
      }, {
        transform: _translate(),
        zIndex: -1
      }];
    },
    percent: function percent(current, next, dir) {
      return dir < 0 ? 1 - translated(next) : translated(current);
    },
    translate: function translate(percent, dir) {
      return dir < 0 ? [{
        transform: _translate(30 * percent),
        zIndex: -1
      }, {
        transform: _translate(-100 * (1 - percent)),
        zIndex: 0
      }] : [{
        transform: _translate(-percent * 100),
        zIndex: 0
      }, {
        transform: _translate(30 * (1 - percent)),
        zIndex: -1
      }];
    }
  },
  push: {
    show: function show(dir) {
      return dir < 0 ? [{
        transform: _translate(100),
        zIndex: 0
      }, {
        transform: _translate(),
        zIndex: -1
      }] : [{
        transform: _translate(-30),
        zIndex: -1
      }, {
        transform: _translate(),
        zIndex: 0
      }];
    },
    percent: function percent(current, next, dir) {
      return dir > 0 ? 1 - translated(next) : translated(current);
    },
    translate: function translate(percent, dir) {
      return dir < 0 ? [{
        transform: _translate(percent * 100),
        zIndex: 0
      }, {
        transform: _translate(-30 * (1 - percent)),
        zIndex: -1
      }] : [{
        transform: _translate(-30 * percent),
        zIndex: -1
      }, {
        transform: _translate(100 * (1 - percent)),
        zIndex: 0
      }];
    }
  }
}));
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/components/slideshow.js
function slideshow_slicedToArray(arr, i) { return slideshow_arrayWithHoles(arr) || slideshow_iterableToArrayLimit(arr, i) || slideshow_unsupportedIterableToArray(arr, i) || slideshow_nonIterableRest(); }

function slideshow_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function slideshow_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return slideshow_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return slideshow_arrayLikeToArray(o, minLen); }

function slideshow_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function slideshow_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function slideshow_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }




















/* harmony default export */ var components_slideshow = ({
  mixins: [mixin_class, slideshow, slider_reactive],
  props: {
    ratio: String,
    minHeight: Number,
    maxHeight: Number
  },
  data: {
    ratio: '16:9',
    minHeight: false,
    maxHeight: false,
    selList: '.uk-slideshow-items',
    attrItem: 'uk-slideshow-item',
    selNav: '.uk-slideshow-nav',
    Animations: internal_slideshow_animations
  },
  update: {
    read: function read() {
      var _this$ratio$split$map = this.ratio.split(':').map(Number),
          _this$ratio$split$map2 = slideshow_slicedToArray(_this$ratio$split$map, 2),
          width = _this$ratio$split$map2[0],
          height = _this$ratio$split$map2[1];

      height = height * this.list.offsetWidth / width || 0;

      if (this.minHeight) {
        height = Math.max(this.minHeight, height);
      }

      if (this.maxHeight) {
        height = Math.min(this.maxHeight, height);
      }

      return {
        height: height - boxModelAdjust(this.list, 'height', 'content-box')
      };
    },
    write: function write(_ref) {
      var height = _ref.height;
      height > 0 && css(this.list, 'minHeight', height);
    },
    events: ['resize']
  }
});
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/components/sortable.js
function sortable_slicedToArray(arr, i) { return sortable_arrayWithHoles(arr) || sortable_iterableToArrayLimit(arr, i) || sortable_unsupportedIterableToArray(arr, i) || sortable_nonIterableRest(); }

function sortable_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function sortable_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return sortable_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return sortable_arrayLikeToArray(o, minLen); }

function sortable_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function sortable_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function sortable_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }




















/* harmony default export */ var sortable = ({
  mixins: [mixin_class, mixin_animate],
  props: {
    group: String,
    threshold: Number,
    clsItem: String,
    clsPlaceholder: String,
    clsDrag: String,
    clsDragState: String,
    clsBase: String,
    clsNoDrag: String,
    clsEmpty: String,
    clsCustom: String,
    handle: String
  },
  data: {
    group: false,
    threshold: 5,
    clsItem: 'uk-sortable-item',
    clsPlaceholder: 'uk-sortable-placeholder',
    clsDrag: 'uk-sortable-drag',
    clsDragState: 'uk-drag',
    clsBase: 'uk-sortable',
    clsNoDrag: 'uk-sortable-nodrag',
    clsEmpty: 'uk-sortable-empty',
    clsCustom: '',
    handle: false,
    pos: {}
  },
  created: function created() {
    var _this = this;

    ['init', 'start', 'move', 'end'].forEach(function (key) {
      var fn = _this[key];

      _this[key] = function (e) {
        lang_assign(_this.pos, getEventPos(e));
        fn(e);
      };
    });
  },
  events: {
    name: pointerDown,
    passive: false,
    handler: 'init'
  },
  computed: {
    target: function target() {
      return (this.$el.tBodies || [this.$el])[0];
    },
    items: function items() {
      return filter_children(this.target);
    },
    isEmpty: {
      get: function get() {
        return isEmpty(this.items);
      },
      watch: function watch(empty) {
        toggleClass(this.target, this.clsEmpty, empty);
      },
      immediate: true
    },
    handles: {
      get: function get(_ref, el) {
        var handle = _ref.handle;
        return handle ? $$(handle, el) : this.items;
      },
      watch: function watch(handles, prev) {
        css(prev, {
          touchAction: '',
          userSelect: ''
        });
        css(handles, {
          touchAction: hasTouch ? 'none' : '',
          userSelect: 'none'
        }); // touchAction set to 'none' causes a performance drop in Chrome 80
      },
      immediate: true
    }
  },
  update: {
    write: function write(data) {
      if (!this.drag || !filter_parent(this.placeholder)) {
        return;
      }

      var _this$pos = this.pos,
          x = _this$pos.x,
          y = _this$pos.y,
          _this$origin = this.origin,
          offsetTop = _this$origin.offsetTop,
          offsetLeft = _this$origin.offsetLeft,
          placeholder = this.placeholder;
      css(this.drag, {
        top: y - offsetTop,
        left: x - offsetLeft
      });
      var sortable = this.getSortable(document.elementFromPoint(x, y));

      if (!sortable) {
        return;
      }

      var items = sortable.items;

      if (items.some(Transition.inProgress)) {
        return;
      }

      var target = findTarget(items, {
        x: x,
        y: y
      });

      if (items.length && (!target || target === placeholder)) {
        return;
      }

      var previous = this.getSortable(placeholder);
      var insertTarget = findInsertTarget(sortable.target, target, placeholder, x, y, sortable === previous && data.moved !== target);

      if (insertTarget === false) {
        return;
      }

      if (insertTarget && placeholder === insertTarget) {
        return;
      }

      if (sortable !== previous) {
        previous.remove(placeholder);
        data.moved = target;
      } else {
        delete data.moved;
      }

      sortable.insert(placeholder, insertTarget);
      this.touched.add(sortable);
    },
    events: ['move']
  },
  methods: {
    init: function init(e) {
      var target = e.target,
          button = e.button,
          defaultPrevented = e.defaultPrevented;

      var _this$items$filter = this.items.filter(function (el) {
        return within(target, el);
      }),
          _this$items$filter2 = sortable_slicedToArray(_this$items$filter, 1),
          placeholder = _this$items$filter2[0];

      if (!placeholder || defaultPrevented || button > 0 || isInput(target) || within(target, ".".concat(this.clsNoDrag)) || this.handle && !within(target, this.handle)) {
        return;
      }

      e.preventDefault();
      this.touched = new Set([this]);
      this.placeholder = placeholder;
      this.origin = lang_assign({
        target: target,
        index: index(placeholder)
      }, this.pos);
      on(document, pointerMove, this.move);
      on(document, pointerUp, this.end);

      if (!this.threshold) {
        this.start(e);
      }
    },
    start: function start(e) {
      this.drag = appendDrag(this.$container, this.placeholder);

      var _this$placeholder$get = this.placeholder.getBoundingClientRect(),
          left = _this$placeholder$get.left,
          top = _this$placeholder$get.top;

      lang_assign(this.origin, {
        offsetLeft: this.pos.x - left,
        offsetTop: this.pos.y - top
      });
      addClass(this.drag, this.clsDrag, this.clsCustom);
      addClass(this.placeholder, this.clsPlaceholder);
      addClass(this.items, this.clsItem);
      addClass(document.documentElement, this.clsDragState);
      trigger(this.$el, 'start', [this, this.placeholder]);
      trackScroll(this.pos);
      this.move(e);
    },
    move: function move(e) {
      if (this.drag) {
        this.$emit('move');
      } else if (Math.abs(this.pos.x - this.origin.x) > this.threshold || Math.abs(this.pos.y - this.origin.y) > this.threshold) {
        this.start(e);
      }
    },
    end: function end() {
      var _this2 = this;

      off(document, pointerMove, this.move);
      off(document, pointerUp, this.end);
      off(window, 'scroll', this.scroll);

      if (!this.drag) {
        return;
      }

      untrackScroll();
      var sortable = this.getSortable(this.placeholder);

      if (this === sortable) {
        if (this.origin.index !== index(this.placeholder)) {
          trigger(this.$el, 'moved', [this, this.placeholder]);
        }
      } else {
        trigger(sortable.$el, 'added', [sortable, this.placeholder]);
        trigger(this.$el, 'removed', [this, this.placeholder]);
      }

      trigger(this.$el, 'stop', [this, this.placeholder]);

      dom_remove(this.drag);

      this.drag = null;
      this.touched.forEach(function (_ref2) {
        var clsPlaceholder = _ref2.clsPlaceholder,
            clsItem = _ref2.clsItem;
        return _this2.touched.forEach(function (sortable) {
          return removeClass(sortable.items, clsPlaceholder, clsItem);
        });
      });
      this.touched = null;
      removeClass(document.documentElement, this.clsDragState);
    },
    insert: function insert(element, target) {
      var _this3 = this;

      addClass(this.items, this.clsItem);

      var insert = function insert() {
        return target ? before(target, element) : append(_this3.target, element);
      };

      this.animate(insert);
    },
    remove: function remove(element) {
      if (!within(element, this.target)) {
        return;
      }

      this.animate(function () {
        return dom_remove(element);
      });
    },
    getSortable: function getSortable(element) {
      do {
        var sortable = this.$getComponent(element, 'sortable');

        if (sortable && (sortable === this || this.group !== false && sortable.group === this.group)) {
          return sortable;
        }
      } while (element = filter_parent(element));
    }
  }
});
var trackTimer;

function trackScroll(pos) {
  var last = Date.now();
  trackTimer = setInterval(function () {
    var x = pos.x,
        y = pos.y;
    y += window.pageYOffset;
    var dist = (Date.now() - last) * .3;
    last = Date.now();
    scrollParents(document.elementFromPoint(x, pos.y)).reverse().some(function (scrollEl) {
      var scroll = scrollEl.scrollTop,
          scrollHeight = scrollEl.scrollHeight;

      var _offset = dimensions_offset(getViewport(scrollEl)),
          top = _offset.top,
          bottom = _offset.bottom,
          height = _offset.height;

      if (top < y && top + 35 > y) {
        scroll -= dist;
      } else if (bottom > y && bottom - 35 < y) {
        scroll += dist;
      } else {
        return;
      }

      if (scroll > 0 && scroll < scrollHeight - height) {
        scrollTop(scrollEl, scroll);
        return true;
      }
    });
  }, 15);
}

function untrackScroll() {
  clearInterval(trackTimer);
}

function appendDrag(container, element) {
  var clone = append(container, element.outerHTML.replace(/(^<)(?:li|tr)|(?:li|tr)(\/>$)/g, '$1div$2'));
  css(clone, 'margin', '0', 'important');
  css(clone, lang_assign({
    boxSizing: 'border-box',
    width: element.offsetWidth,
    height: element.offsetHeight
  }, css(element, ['paddingLeft', 'paddingRight', 'paddingTop', 'paddingBottom'])));
  dimensions_height(clone.firstElementChild, dimensions_height(element.firstElementChild));
  return clone;
}

function findTarget(items, point) {
  return items[findIndex(items, function (item) {
    return pointInRect(point, item.getBoundingClientRect());
  })];
}

function findInsertTarget(list, target, placeholder, x, y, sameList) {
  if (!filter_children(list).length) {
    return;
  }

  var rect = target.getBoundingClientRect();

  if (!sameList) {
    if (!isHorizontal(list, placeholder)) {
      return y < rect.top + rect.height / 2 ? target : target.nextElementSibling;
    }

    return target;
  }

  var placeholderRect = placeholder.getBoundingClientRect();
  var sameRow = linesIntersect([rect.top, rect.bottom], [placeholderRect.top, placeholderRect.bottom]);
  var pointerPos = sameRow ? x : y;
  var lengthProp = sameRow ? 'width' : 'height';
  var startProp = sameRow ? 'left' : 'top';
  var endProp = sameRow ? 'right' : 'bottom';
  var diff = placeholderRect[lengthProp] < rect[lengthProp] ? rect[lengthProp] - placeholderRect[lengthProp] : 0;

  if (placeholderRect[startProp] < rect[startProp]) {
    if (diff && pointerPos < rect[startProp] + diff) {
      return false;
    }

    return target.nextElementSibling;
  }

  if (diff && pointerPos > rect[endProp] - diff) {
    return false;
  }

  return target;
}

function isHorizontal(list, placeholder) {
  var single = filter_children(list).length === 1;

  if (single) {
    append(list, placeholder);
  }

  var items = filter_children(list);
  var isHorizontal = items.some(function (el, i) {
    var rectA = el.getBoundingClientRect();
    return items.slice(i + 1).some(function (el) {
      var rectB = el.getBoundingClientRect();
      return !linesIntersect([rectA.left, rectA.right], [rectB.left, rectB.right]);
    });
  });

  if (single) {
    dom_remove(placeholder);
  }

  return isHorizontal;
}

function linesIntersect(lineA, lineB) {
  return lineA[1] > lineB[0] && lineB[1] > lineA[0];
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/util/position.js
function position_slicedToArray(arr, i) { return position_arrayWithHoles(arr) || position_iterableToArrayLimit(arr, i) || position_unsupportedIterableToArray(arr, i) || position_nonIterableRest(); }

function position_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function position_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return position_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return position_arrayLikeToArray(o, minLen); }

function position_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function position_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function position_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }



















var position_dirs = {
  width: ['x', 'left', 'right'],
  height: ['y', 'top', 'bottom']
};
function position_positionAt(element, target, elAttach, targetAttach, elOffset, targetOffset, flip, boundary) {
  elAttach = getPos(elAttach);
  targetAttach = getPos(targetAttach);
  var flipped = {
    element: elAttach,
    target: targetAttach
  };

  if (!element || !target) {
    return flipped;
  }

  var dim = dimensions_offset(element);
  var targetDim = dimensions_offset(target);
  var position = targetDim;
  moveTo(position, elAttach, dim, -1);
  moveTo(position, targetAttach, targetDim, 1);
  elOffset = getOffsets(elOffset, dim.width, dim.height);
  targetOffset = getOffsets(targetOffset, targetDim.width, targetDim.height);
  elOffset['x'] += targetOffset['x'];
  elOffset['y'] += targetOffset['y'];
  position.left += elOffset['x'];
  position.top += elOffset['y'];

  if (flip) {
    var boundaries = scrollParents(element).map(getViewport);

    if (boundary && !includes(boundaries, boundary)) {
      boundaries.unshift(boundary);
    }

    boundaries = boundaries.map(function (el) {
      return dimensions_offset(el);
    });
    each(position_dirs, function (_ref, prop) {
      var _ref2 = position_slicedToArray(_ref, 3),
          dir = _ref2[0],
          align = _ref2[1],
          alignFlip = _ref2[2];

      if (!(flip === true || includes(flip, dir))) {
        return;
      }

      boundaries.some(function (boundary) {
        var elemOffset = elAttach[dir] === align ? -dim[prop] : elAttach[dir] === alignFlip ? dim[prop] : 0;
        var targetOffset = targetAttach[dir] === align ? targetDim[prop] : targetAttach[dir] === alignFlip ? -targetDim[prop] : 0;

        if (position[align] < boundary[align] || position[align] + dim[prop] > boundary[alignFlip]) {
          var centerOffset = dim[prop] / 2;
          var centerTargetOffset = targetAttach[dir] === 'center' ? -targetDim[prop] / 2 : 0;
          return elAttach[dir] === 'center' && (apply(centerOffset, centerTargetOffset) || apply(-centerOffset, -centerTargetOffset)) || apply(elemOffset, targetOffset);
        }

        function apply(elemOffset, targetOffset) {
          var newVal = toFloat((position[align] + elemOffset + targetOffset - elOffset[dir] * 2).toFixed(4));

          if (newVal >= boundary[align] && newVal + dim[prop] <= boundary[alignFlip]) {
            position[align] = newVal;
            ['element', 'target'].forEach(function (el) {
              flipped[el][dir] = !elemOffset ? flipped[el][dir] : flipped[el][dir] === position_dirs[prop][1] ? position_dirs[prop][2] : position_dirs[prop][1];
            });
            return true;
          }
        }
      });
    });
  }

  dimensions_offset(element, position);
  return flipped;
}

function moveTo(position, attach, dim, factor) {
  each(position_dirs, function (_ref3, prop) {
    var _ref4 = position_slicedToArray(_ref3, 3),
        dir = _ref4[0],
        align = _ref4[1],
        alignFlip = _ref4[2];

    if (attach[dir] === alignFlip) {
      position[align] += dim[prop] * factor;
    } else if (attach[dir] === 'center') {
      position[align] += dim[prop] * factor / 2;
    }
  });
}

function getPos(pos) {
  var x = /left|center|right/;
  var y = /top|center|bottom/;
  pos = (pos || '').split(' ');

  if (pos.length === 1) {
    pos = x.test(pos[0]) ? pos.concat('center') : y.test(pos[0]) ? ['center'].concat(pos) : ['center', 'center'];
  }

  return {
    x: x.test(pos[0]) ? pos[0] : 'center',
    y: y.test(pos[1]) ? pos[1] : 'center'
  };
}

function getOffsets(offsets, width, height) {
  var _split = (offsets || '').split(' '),
      _split2 = position_slicedToArray(_split, 2),
      x = _split2[0],
      y = _split2[1];

  return {
    x: x ? toFloat(x) * (endsWith(x, '%') ? width / 100 : 1) : 0,
    y: y ? toFloat(y) * (endsWith(y, '%') ? height / 100 : 1) : 0
  };
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/mixin/position.js




/* harmony default export */ var mixin_position = ({
  props: {
    pos: String,
    offset: null,
    flip: Boolean,
    clsPos: String
  },
  data: {
    pos: "bottom-".concat(!isRtl ? 'left' : 'right'),
    flip: true,
    offset: false,
    clsPos: ''
  },
  computed: {
    pos: function pos(_ref) {
      var pos = _ref.pos;
      return (pos + (!includes(pos, '-') ? '-center' : '')).split('-');
    },
    dir: function dir() {
      return this.pos[0];
    },
    align: function align() {
      return this.pos[1];
    }
  },
  methods: {
    positionAt: function positionAt(element, target, boundary) {
      removeClasses(element, "".concat(this.clsPos, "-(top|bottom|left|right)(-[a-z]+)?"));
      var offset = this.offset;
      var axis = this.getAxis();

      if (!isNumeric(offset)) {
        var node = $(offset);
        offset = node ? dimensions_offset(node)[axis === 'x' ? 'left' : 'top'] - dimensions_offset(target)[axis === 'x' ? 'right' : 'bottom'] : 0;
      }

      var _positionAt$target = position_positionAt(element, target, axis === 'x' ? "".concat(flipPosition(this.dir), " ").concat(this.align) : "".concat(this.align, " ").concat(flipPosition(this.dir)), axis === 'x' ? "".concat(this.dir, " ").concat(this.align) : "".concat(this.align, " ").concat(this.dir), axis === 'x' ? "".concat(this.dir === 'left' ? -offset : offset) : " ".concat(this.dir === 'top' ? -offset : offset), null, this.flip, boundary).target,
          x = _positionAt$target.x,
          y = _positionAt$target.y;

      this.dir = axis === 'x' ? x : y;
      this.align = axis === 'x' ? y : x;
      toggleClass(element, "".concat(this.clsPos, "-").concat(this.dir, "-").concat(this.align), this.offset === false);
    },
    getAxis: function getAxis() {
      return this.dir === 'top' || this.dir === 'bottom' ? 'y' : 'x';
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/components/tooltip.js
var tooltip_events;

function tooltip_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }







/* harmony default export */ var tooltip = ({
  mixins: [container, togglable, mixin_position],
  args: 'title',
  props: {
    delay: Number,
    title: String
  },
  data: {
    pos: 'top',
    title: '',
    delay: 0,
    animation: ['uk-animation-scale-up'],
    duration: 100,
    cls: 'uk-active',
    clsPos: 'uk-tooltip'
  },
  beforeConnect: function beforeConnect() {
    this._hasTitle = hasAttr(this.$el, 'title');
    attr(this.$el, 'title', '');
    this.updateAria(false);
    makeFocusable(this.$el);
  },
  disconnected: function disconnected() {
    this.hide();
    attr(this.$el, 'title', this._hasTitle ? this.title : null);
  },
  methods: {
    show: function show() {
      var _this = this;

      if (this.isToggled(this.tooltip || null) || !this.title) {
        return;
      }

      this._unbind = once(document, "show keydown ".concat(pointerDown), this.hide, false, function (e) {
        return e.type === pointerDown && !within(e.target, _this.$el) || e.type === 'keydown' && e.keyCode === 27 || e.type === 'show' && e.detail[0] !== _this && e.detail[0].$name === _this.$name;
      });
      clearTimeout(this.showTimer);
      this.showTimer = setTimeout(this._show, this.delay);
    },
    hide: function hide() {
      var _this2 = this;

      if (matches(this.$el, 'input:focus')) {
        return;
      }

      clearTimeout(this.showTimer);

      if (!this.isToggled(this.tooltip || null)) {
        return;
      }

      this.toggleElement(this.tooltip, false, false).then(function () {
        _this2.tooltip = dom_remove(_this2.tooltip);

        _this2._unbind();
      });
    },
    _show: function _show() {
      var _this3 = this;

      this.tooltip = append(this.container, "<div class=\"".concat(this.clsPos, "\">\n                    <div class=\"").concat(this.clsPos, "-inner\">").concat(this.title, "</div>\n                 </div>"));
      on(this.tooltip, 'toggled', function (e, toggled) {
        _this3.updateAria(toggled);

        if (!toggled) {
          return;
        }

        _this3.positionAt(_this3.tooltip, _this3.$el);

        _this3.origin = _this3.getAxis() === 'y' ? "".concat(flipPosition(_this3.dir), "-").concat(_this3.align) : "".concat(_this3.align, "-").concat(flipPosition(_this3.dir));
      });
      this.toggleElement(this.tooltip, true);
    },
    updateAria: function updateAria(toggled) {
      attr(this.$el, 'aria-expanded', toggled);
    }
  },
  events: (tooltip_events = {
    focus: 'show',
    blur: 'hide'
  }, tooltip_defineProperty(tooltip_events, "".concat(pointerEnter, " ").concat(pointerLeave), function _(e) {
    if (!isTouch(e)) {
      this[e.type === pointerEnter ? 'show' : 'hide']();
    }
  }), tooltip_defineProperty(tooltip_events, pointerDown, function (e) {
    if (isTouch(e)) {
      this.show();
    }
  }), tooltip_events)
});

function makeFocusable(el) {
  if (!isFocusable(el)) {
    attr(el, 'tabindex', '0');
  }
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/components/upload.js









/* harmony default export */ var upload = ({
  props: {
    allow: String,
    clsDragover: String,
    concurrent: Number,
    maxSize: Number,
    method: String,
    mime: String,
    msgInvalidMime: String,
    msgInvalidName: String,
    msgInvalidSize: String,
    multiple: Boolean,
    name: String,
    params: Object,
    type: String,
    url: String
  },
  data: {
    allow: false,
    clsDragover: 'uk-dragover',
    concurrent: 1,
    maxSize: 0,
    method: 'POST',
    mime: false,
    msgInvalidMime: 'Invalid File Type: %s',
    msgInvalidName: 'Invalid File Name: %s',
    msgInvalidSize: 'Invalid File Size: %s Kilobytes Max',
    multiple: false,
    name: 'files[]',
    params: {},
    type: '',
    url: '',
    abort: noop,
    beforeAll: noop,
    beforeSend: noop,
    complete: noop,
    completeAll: noop,
    error: noop,
    fail: noop,
    load: noop,
    loadEnd: noop,
    loadStart: noop,
    progress: noop
  },
  events: {
    change: function change(e) {
      if (!matches(e.target, 'input[type="file"]')) {
        return;
      }

      e.preventDefault();

      if (e.target.files) {
        this.upload(e.target.files);
      }

      e.target.value = '';
    },
    drop: function drop(e) {
      stop(e);
      var transfer = e.dataTransfer;

      if (!transfer || !transfer.files) {
        return;
      }

      removeClass(this.$el, this.clsDragover);
      this.upload(transfer.files);
    },
    dragenter: function dragenter(e) {
      stop(e);
    },
    dragover: function dragover(e) {
      stop(e);
      addClass(this.$el, this.clsDragover);
    },
    dragleave: function dragleave(e) {
      stop(e);
      removeClass(this.$el, this.clsDragover);
    }
  },
  methods: {
    upload: function upload(files) {
      var _this = this;

      if (!files.length) {
        return;
      }

      trigger(this.$el, 'upload', [files]);

      for (var i = 0; i < files.length; i++) {
        if (this.maxSize && this.maxSize * 1000 < files[i].size) {
          this.fail(this.msgInvalidSize.replace('%s', this.maxSize));
          return;
        }

        if (this.allow && !match(this.allow, files[i].name)) {
          this.fail(this.msgInvalidName.replace('%s', this.allow));
          return;
        }

        if (this.mime && !match(this.mime, files[i].type)) {
          this.fail(this.msgInvalidMime.replace('%s', this.mime));
          return;
        }
      }

      if (!this.multiple) {
        files = [files[0]];
      }

      this.beforeAll(this, files);
      var chunks = chunk(files, this.concurrent);

      var upload = function upload(files) {
        var data = new FormData();
        files.forEach(function (file) {
          return data.append(_this.name, file);
        });

        for (var key in _this.params) {
          data.append(key, _this.params[key]);
        }

        ajax(_this.url, {
          data: data,
          method: _this.method,
          responseType: _this.type,
          beforeSend: function beforeSend(env) {
            var xhr = env.xhr;
            xhr.upload && on(xhr.upload, 'progress', _this.progress);
            ['loadStart', 'load', 'loadEnd', 'abort'].forEach(function (type) {
              return on(xhr, type.toLowerCase(), _this[type]);
            });
            return _this.beforeSend(env);
          }
        }).then(function (xhr) {
          _this.complete(xhr);

          if (chunks.length) {
            upload(chunks.shift());
          } else {
            _this.completeAll(xhr);
          }
        }, function (e) {
          return _this.error(e);
        });
      };

      upload(chunks.shift());
    }
  }
});

function match(pattern, path) {
  return path.match(new RegExp("^".concat(pattern.replace(/\//g, '\\/').replace(/\*\*/g, '(\\/[^\\/]+)*').replace(/\*/g, '[^\\/]+').replace(/((?!\\))\?/g, '$1.'), "$"), 'i'));
}

function chunk(files, size) {
  var chunks = [];

  for (var i = 0; i < files.length; i += size) {
    var _chunk = [];

    for (var j = 0; j < size; j++) {
      _chunk.push(files[i + j]);
    }

    chunks.push(_chunk);
  }

  return chunks;
}

function stop(e) {
  e.preventDefault();
  e.stopPropagation();
}
// EXTERNAL MODULE: ./node_modules/uikit/dist/js/uikit-icons.js
var uikit_icons = __webpack_require__("./node_modules/uikit/dist/js/uikit-icons.js");
var uikit_icons_default = /*#__PURE__*/__webpack_require__.n(uikit_icons);
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/api/global.js


/* harmony default export */ function global(UIkit) {
  var DATA = UIkit.data;

  UIkit.use = function (plugin) {
    if (plugin.installed) {
      return;
    }

    plugin.call(null, this);
    plugin.installed = true;
    return this;
  };

  UIkit.mixin = function (mixin, component) {
    component = (isString(component) ? UIkit.component(component) : component) || this;
    component.options = mergeOptions(component.options, mixin);
  };

  UIkit.extend = function (options) {
    options = options || {};
    var Super = this;

    var Sub = function UIkitComponent(options) {
      this._init(options);
    };

    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.options = mergeOptions(Super.options, options);
    Sub.super = Super;
    Sub.extend = Super.extend;
    return Sub;
  };

  UIkit.update = function (element, e) {
    element = element ? toNode(element) : document.body;
    parents(element).reverse().forEach(function (element) {
      return update(element[DATA], e);
    });
    apply(element, function (element) {
      return update(element[DATA], e);
    });
  };

  var container;
  Object.defineProperty(UIkit, 'container', {
    get: function get() {
      return container || document.body;
    },
    set: function set(element) {
      container = $(element);
    }
  });

  function update(data, e) {
    if (!data) {
      return;
    }

    for (var name in data) {
      if (data[name]._connected) {
        data[name]._callUpdate(e);
      }
    }
  }
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/api/hooks.js







/* harmony default export */ function hooks(UIkit) {
  UIkit.prototype._callHook = function (hook) {
    var _this = this;

    var handlers = this.$options[hook];

    if (handlers) {
      handlers.forEach(function (handler) {
        return handler.call(_this);
      });
    }
  };

  UIkit.prototype._callConnected = function () {
    if (this._connected) {
      return;
    }

    this._data = {};
    this._computeds = {};

    this._initProps();

    this._callHook('beforeConnect');

    this._connected = true;

    this._initEvents();

    this._initObservers();

    this._callHook('connected');

    this._callUpdate();
  };

  UIkit.prototype._callDisconnected = function () {
    if (!this._connected) {
      return;
    }

    this._callHook('beforeDisconnect');

    this._disconnectObservers();

    this._unbindEvents();

    this._callHook('disconnected');

    this._connected = false;
    delete this._watch;
  };

  UIkit.prototype._callUpdate = function () {
    var _this2 = this;

    var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'update';

    if (!this._connected) {
      return;
    }

    if (e === 'update' || e === 'resize') {
      this._callWatches();
    }

    if (!this.$options.update) {
      return;
    }

    if (!this._updates) {
      this._updates = new Set();
      fastdom.read(function () {
        if (_this2._connected) {
          runUpdates.call(_this2, _this2._updates);
        }

        delete _this2._updates;
      });
    }

    this._updates.add(e.type || e);
  };

  UIkit.prototype._callWatches = function () {
    var _this3 = this;

    if (this._watch) {
      return;
    }

    var initial = !hasOwn(this, '_watch');
    this._watch = fastdom.read(function () {
      if (_this3._connected) {
        runWatches.call(_this3, initial);
      }

      _this3._watch = null;
    });
  };

  function runUpdates(types) {
    var _this4 = this;

    var updates = this.$options.update;

    var _loop = function _loop(i) {
      var _updates$i = updates[i],
          read = _updates$i.read,
          write = _updates$i.write,
          events = _updates$i.events;

      if (!types.has('update') && (!events || !events.some(function (type) {
        return types.has(type);
      }))) {
        return "continue";
      }

      var result = void 0;

      if (read) {
        result = read.call(_this4, _this4._data, types);

        if (result && isPlainObject(result)) {
          lang_assign(_this4._data, result);
        }
      }

      if (write && result !== false) {
        fastdom.write(function () {
          return write.call(_this4, _this4._data, types);
        });
      }
    };

    for (var i = 0; i < updates.length; i++) {
      var _ret = _loop(i);

      if (_ret === "continue") continue;
    }
  }

  function runWatches(initial) {
    var computed = this.$options.computed,
        _computeds = this._computeds;

    for (var key in computed) {
      var hasPrev = hasOwn(_computeds, key);
      var prev = _computeds[key];
      delete _computeds[key];
      var _computed$key = computed[key],
          watch = _computed$key.watch,
          immediate = _computed$key.immediate;

      if (watch && (initial && immediate || hasPrev && !isEqual(prev, this[key]))) {
        watch.call(this, this[key], prev);
      }
    }
  }
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/api/state.js













/* harmony default export */ function state(UIkit) {
  var uid = 0;

  UIkit.prototype._init = function (options) {
    options = options || {};
    options.data = normalizeData(options, this.constructor.options);
    this.$options = mergeOptions(this.constructor.options, options, this);
    this.$el = null;
    this.$props = {};
    this._uid = uid++;

    this._initData();

    this._initMethods();

    this._initComputeds();

    this._callHook('created');

    if (options.el) {
      this.$mount(options.el);
    }
  };

  UIkit.prototype._initData = function () {
    var _this$$options$data = this.$options.data,
        data = _this$$options$data === void 0 ? {} : _this$$options$data;

    for (var key in data) {
      this.$props[key] = this[key] = data[key];
    }
  };

  UIkit.prototype._initMethods = function () {
    var methods = this.$options.methods;

    if (methods) {
      for (var key in methods) {
        this[key] = methods[key].bind(this);
      }
    }
  };

  UIkit.prototype._initComputeds = function () {
    var computed = this.$options.computed;
    this._computeds = {};

    if (computed) {
      for (var key in computed) {
        registerComputed(this, key, computed[key]);
      }
    }
  };

  UIkit.prototype._initProps = function (props) {
    var key;
    props = props || getProps(this.$options, this.$name);

    for (key in props) {
      if (!isUndefined(props[key])) {
        this.$props[key] = props[key];
      }
    }

    var exclude = [this.$options.computed, this.$options.methods];

    for (key in this.$props) {
      if (key in props && notIn(exclude, key)) {
        this[key] = this.$props[key];
      }
    }
  };

  UIkit.prototype._initEvents = function () {
    var _this = this;

    this._events = [];
    var events = this.$options.events;

    if (events) {
      events.forEach(function (event) {
        if (!hasOwn(event, 'handler')) {
          for (var key in event) {
            registerEvent(_this, event[key], key);
          }
        } else {
          registerEvent(_this, event);
        }
      });
    }
  };

  UIkit.prototype._unbindEvents = function () {
    this._events.forEach(function (unbind) {
      return unbind();
    });

    delete this._events;
  };

  UIkit.prototype._initObservers = function () {
    this._observers = [initChildListObserver(this), initPropsObserver(this)];
  };

  UIkit.prototype._disconnectObservers = function () {
    this._observers.forEach(function (observer) {
      return observer && observer.disconnect();
    });
  };

  function getProps(opts, name) {
    var data = {};
    var _opts$args = opts.args,
        args = _opts$args === void 0 ? [] : _opts$args,
        _opts$props = opts.props,
        props = _opts$props === void 0 ? {} : _opts$props,
        el = opts.el;

    if (!props) {
      return data;
    }

    for (var key in props) {
      var prop = hyphenate(key);
      var value = attr_data(el, prop);

      if (isUndefined(value)) {
        continue;
      }

      value = props[key] === Boolean && value === '' ? true : coerce(props[key], value);

      if (prop === 'target' && (!value || startsWith(value, '_'))) {
        continue;
      }

      data[key] = value;
    }

    var options = parseOptions(attr_data(el, name), args);

    for (var _key in options) {
      var _prop = camelize(_key);

      if (props[_prop] !== undefined) {
        data[_prop] = coerce(props[_prop], options[_key]);
      }
    }

    return data;
  }

  function registerComputed(component, key, cb) {
    Object.defineProperty(component, key, {
      enumerable: true,
      get: function get() {
        var _computeds = component._computeds,
            $props = component.$props,
            $el = component.$el;

        if (!hasOwn(_computeds, key)) {
          _computeds[key] = (cb.get || cb).call(component, $props, $el);
        }

        return _computeds[key];
      },
      set: function set(value) {
        var _computeds = component._computeds;
        _computeds[key] = cb.set ? cb.set.call(component, value) : value;

        if (isUndefined(_computeds[key])) {
          delete _computeds[key];
        }
      }
    });
  }

  function registerEvent(component, event, key) {
    if (!isPlainObject(event)) {
      event = {
        name: key,
        handler: event
      };
    }

    var _event = event,
        name = _event.name,
        el = _event.el,
        handler = _event.handler,
        capture = _event.capture,
        passive = _event.passive,
        delegate = _event.delegate,
        filter = _event.filter,
        self = _event.self;
    el = isFunction(el) ? el.call(component) : el || component.$el;

    if (isArray(el)) {
      el.forEach(function (el) {
        return registerEvent(component, lang_assign({}, event, {
          el: el
        }), key);
      });
      return;
    }

    if (!el || filter && !filter.call(component)) {
      return;
    }

    component._events.push(on(el, name, !delegate ? null : isString(delegate) ? delegate : delegate.call(component), isString(handler) ? component[handler] : handler.bind(component), {
      passive: passive,
      capture: capture,
      self: self
    }));
  }

  function notIn(options, key) {
    return options.every(function (arr) {
      return !arr || !hasOwn(arr, key);
    });
  }

  function coerce(type, value) {
    if (type === Boolean) {
      return toBoolean(value);
    } else if (type === Number) {
      return toNumber(value);
    } else if (type === 'list') {
      return toList(value);
    }

    return type ? type(value) : value;
  }

  function toList(value) {
    return isArray(value) ? value : isString(value) ? value.split(/,(?![^(]*\))/).map(function (value) {
      return isNumeric(value) ? toNumber(value) : toBoolean(value.trim());
    }) : [value];
  }

  function normalizeData(_ref, _ref2) {
    var data = _ref.data;
    var args = _ref2.args,
        _ref2$props = _ref2.props,
        props = _ref2$props === void 0 ? {} : _ref2$props;
    data = isArray(data) ? !isEmpty(args) ? data.slice(0, args.length).reduce(function (data, value, index) {
      if (isPlainObject(value)) {
        lang_assign(data, value);
      } else {
        data[args[index]] = value;
      }

      return data;
    }, {}) : undefined : data;

    if (data) {
      for (var key in data) {
        if (isUndefined(data[key])) {
          delete data[key];
        } else {
          data[key] = props[key] ? coerce(props[key], data[key]) : data[key];
        }
      }
    }

    return data;
  }

  function initChildListObserver(component) {
    var el = component.$options.el;
    var observer = new MutationObserver(function () {
      return component.$emit();
    });
    observer.observe(el, {
      childList: true,
      subtree: true
    });
    return observer;
  }

  function initPropsObserver(component) {
    var $name = component.$name,
        $options = component.$options,
        $props = component.$props;
    var attrs = $options.attrs,
        props = $options.props,
        el = $options.el;

    if (!props || attrs === false) {
      return;
    }

    var attributes = isArray(attrs) ? attrs : Object.keys(props);
    var filter = attributes.map(function (key) {
      return hyphenate(key);
    }).concat($name);
    var observer = new MutationObserver(function (records) {
      var data = getProps($options, $name);

      if (records.some(function (_ref3) {
        var attributeName = _ref3.attributeName;
        var prop = attributeName.replace('data-', '');
        return (prop === $name ? attributes : [camelize(prop), camelize(attributeName)]).some(function (prop) {
          return !isUndefined(data[prop]) && data[prop] !== $props[prop];
        });
      })) {
        component.$reset();
      }
    });
    observer.observe(el, {
      attributes: true,
      attributeFilter: filter.concat(filter.map(function (key) {
        return "data-".concat(key);
      }))
    });
    return observer;
  }
}
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.get-own-property-descriptor.js
var es_object_get_own_property_descriptor = __webpack_require__("./node_modules/core-js/modules/es.object.get-own-property-descriptor.js");
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/api/instance.js



/* harmony default export */ function instance(UIkit) {
  var DATA = UIkit.data;

  UIkit.prototype.$create = function (component, element, data) {
    return UIkit[component](element, data);
  };

  UIkit.prototype.$mount = function (el) {
    var name = this.$options.name;

    if (!el[DATA]) {
      el[DATA] = {};
    }

    if (el[DATA][name]) {
      return;
    }

    el[DATA][name] = this;
    this.$el = this.$options.el = this.$options.el || el;

    if (within(el, document)) {
      this._callConnected();
    }
  };

  UIkit.prototype.$reset = function () {
    this._callDisconnected();

    this._callConnected();
  };

  UIkit.prototype.$destroy = function () {
    var removeEl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    var _this$$options = this.$options,
        el = _this$$options.el,
        name = _this$$options.name;

    if (el) {
      this._callDisconnected();
    }

    this._callHook('destroy');

    if (!el || !el[DATA]) {
      return;
    }

    delete el[DATA][name];

    if (!isEmpty(el[DATA])) {
      delete el[DATA];
    }

    if (removeEl) {
      dom_remove(this.$el);
    }
  };

  UIkit.prototype.$emit = function (e) {
    this._callUpdate(e);
  };

  UIkit.prototype.$update = function () {
    var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.$el;
    var e = arguments.length > 1 ? arguments[1] : undefined;
    UIkit.update(element, e);
  };

  UIkit.prototype.$getComponent = UIkit.getComponent;
  var componentName = memoize(function (name) {
    return UIkit.prefix + hyphenate(name);
  });
  Object.defineProperties(UIkit.prototype, {
    $container: Object.getOwnPropertyDescriptor(UIkit, 'container'),
    $name: {
      get: function get() {
        return componentName(this.$options.name);
      }
    }
  });
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/util/mouse.js











function mouse_slicedToArray(arr, i) { return mouse_arrayWithHoles(arr) || mouse_iterableToArrayLimit(arr, i) || mouse_unsupportedIterableToArray(arr, i) || mouse_nonIterableRest(); }

function mouse_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function mouse_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return mouse_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return mouse_arrayLikeToArray(o, minLen); }

function mouse_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function mouse_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function mouse_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }



function MouseTracker() {}
MouseTracker.prototype = {
  positions: [],
  init: function init() {
    var _this = this;

    this.positions = [];
    var position;
    this.unbind = on(document, 'mousemove', function (e) {
      return position = getEventPos(e);
    });
    this.interval = setInterval(function () {
      if (!position) {
        return;
      }

      _this.positions.push(position);

      if (_this.positions.length > 5) {
        _this.positions.shift();
      }
    }, 50);
  },
  cancel: function cancel() {
    this.unbind && this.unbind();
    this.interval && clearInterval(this.interval);
  },
  movesTo: function movesTo(target) {
    if (this.positions.length < 2) {
      return false;
    }

    var p = target.getBoundingClientRect();
    var left = p.left,
        right = p.right,
        top = p.top,
        bottom = p.bottom;

    var _this$positions = mouse_slicedToArray(this.positions, 1),
        prevPosition = _this$positions[0];

    var position = last(this.positions);
    var path = [prevPosition, position];

    if (pointInRect(position, p)) {
      return false;
    }

    var diagonals = [[{
      x: left,
      y: top
    }, {
      x: right,
      y: bottom
    }], [{
      x: left,
      y: bottom
    }, {
      x: right,
      y: top
    }]];
    return diagonals.some(function (diagonal) {
      var intersection = intersect(path, diagonal);
      return intersection && pointInRect(intersection, p);
    });
  }
}; // Inspired by http://paulbourke.net/geometry/pointlineplane/

function intersect(_ref, _ref2) {
  var _ref3 = mouse_slicedToArray(_ref, 2),
      _ref3$ = _ref3[0],
      x1 = _ref3$.x,
      y1 = _ref3$.y,
      _ref3$2 = _ref3[1],
      x2 = _ref3$2.x,
      y2 = _ref3$2.y;

  var _ref4 = mouse_slicedToArray(_ref2, 2),
      _ref4$ = _ref4[0],
      x3 = _ref4$.x,
      y3 = _ref4$.y,
      _ref4$2 = _ref4[1],
      x4 = _ref4$2.x,
      y4 = _ref4$2.y;

  var denominator = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1); // Lines are parallel

  if (denominator === 0) {
    return false;
  }

  var ua = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / denominator;

  if (ua < 0) {
    return false;
  } // Return an object with the x and y coordinates of the intersection


  return {
    x: x1 + ua * (x2 - x1),
    y: y1 + ua * (y2 - y1)
  };
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/util/player.js







function play(el) {
  if (isIFrame(el)) {
    call(el, {
      func: 'playVideo',
      method: 'play'
    });
  }

  if (isHTML5(el)) {
    try {
      el.play().catch(noop);
    } catch (e) {}
  }
}
function pause(el) {
  if (isIFrame(el)) {
    call(el, {
      func: 'pauseVideo',
      method: 'pause'
    });
  }

  if (isHTML5(el)) {
    el.pause();
  }
}
function mute(el) {
  if (isIFrame(el)) {
    call(el, {
      func: 'mute',
      method: 'setVolume',
      value: 0
    });
  }

  if (isHTML5(el)) {
    el.muted = true;
  }
}

function isHTML5(el) {
  return el && el.tagName === 'VIDEO';
}

function isIFrame(el) {
  return el && el.tagName === 'IFRAME' && (isYoutube(el) || isVimeo(el));
}

function isYoutube(el) {
  return !!el.src.match(/\/\/.*?youtube(-nocookie)?\.[a-z]+\/(watch\?v=[^&\s]+|embed)|youtu\.be\/.*/);
}

function isVimeo(el) {
  return !!el.src.match(/vimeo\.com\/video\/.*/);
}

function call(el, cmd) {
  enableApi(el).then(function () {
    return post(el, cmd);
  });
}

function post(el, cmd) {
  try {
    el.contentWindow.postMessage(JSON.stringify(lang_assign({
      event: 'command'
    }, cmd)), '*');
  } catch (e) {}
}

var stateKey = '_ukPlayer';
var counter = 0;

function enableApi(el) {
  if (el[stateKey]) {
    return el[stateKey];
  }

  var youtube = isYoutube(el);
  var vimeo = isVimeo(el);
  var id = ++counter;
  var poller;
  return el[stateKey] = new Promise(function (resolve) {
    youtube && once(el, 'load', function () {
      var listener = function listener() {
        return post(el, {
          event: 'listening',
          id: id
        });
      };

      poller = setInterval(listener, 100);
      listener();
    });
    once(window, 'message', resolve, false, function (_ref) {
      var data = _ref.data;

      try {
        data = JSON.parse(data);
        return data && (youtube && data.id === id && data.event === 'onReady' || vimeo && Number(data.player_id) === id);
      } catch (e) {}
    });
    el.src = "".concat(el.src).concat(includes(el.src, '?') ? '&' : '?').concat(youtube ? 'enablejsapi=1' : "api=1&player_id=".concat(id));
  }).then(function () {
    return clearInterval(poller);
  });
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/util/index.js



















;// CONCATENATED MODULE: ./node_modules/uikit/src/js/api/index.js







var UIkit = function UIkit(options) {
  this._init(options);
};

UIkit.util = util_namespaceObject;
UIkit.data = '__uikit__';
UIkit.prefix = 'uk-';
UIkit.options = {};
UIkit.version = "3.7.4";
global(UIkit);
hooks(UIkit);
state(UIkit);
component(UIkit);
instance(UIkit);
/* harmony default export */ var api = (UIkit);
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/core/accordion.js







/* harmony default export */ var accordion = ({
  mixins: [mixin_class, togglable],
  props: {
    targets: String,
    active: null,
    collapsible: Boolean,
    multiple: Boolean,
    toggle: String,
    content: String,
    transition: String,
    offset: Number
  },
  data: {
    targets: '> *',
    active: false,
    animation: [true],
    collapsible: true,
    multiple: false,
    clsOpen: 'uk-open',
    toggle: '> .uk-accordion-title',
    content: '> .uk-accordion-content',
    transition: 'ease',
    offset: 0
  },
  computed: {
    items: {
      get: function get(_ref, $el) {
        var targets = _ref.targets;
        return $$(targets, $el);
      },
      watch: function watch(items, prev) {
        var _this = this;

        items.forEach(function (el) {
          return hide($(_this.content, el), !hasClass(el, _this.clsOpen));
        });

        if (prev || hasClass(items, this.clsOpen)) {
          return;
        }

        var active = this.active !== false && items[Number(this.active)] || !this.collapsible && items[0];

        if (active) {
          this.toggle(active, false);
        }
      },
      immediate: true
    },
    toggles: function toggles(_ref2) {
      var toggle = _ref2.toggle;
      return this.items.map(function (item) {
        return $(toggle, item);
      });
    }
  },
  events: [{
    name: 'click',
    delegate: function delegate() {
      return "".concat(this.targets, " ").concat(this.$props.toggle);
    },
    handler: function handler(e) {
      e.preventDefault();
      this.toggle(index(this.toggles, e.current));
    }
  }],
  methods: {
    toggle: function toggle(item, animate) {
      var _this2 = this;

      var items = [this.items[lang_getIndex(item, this.items)]];
      var activeItems = filter(this.items, ".".concat(this.clsOpen));

      if (!this.multiple && !includes(activeItems, items[0])) {
        items = items.concat(activeItems);
      }

      if (!this.collapsible && activeItems.length < 2 && !filter(items, ":not(.".concat(this.clsOpen, ")")).length) {
        return;
      }

      items.forEach(function (el) {
        return _this2.toggleElement(el, !hasClass(el, _this2.clsOpen), function (el, show) {
          toggleClass(el, _this2.clsOpen, show);
          attr($(_this2.$props.toggle, el), 'aria-expanded', show);
          var content = $("".concat(el._wrapper ? '> * ' : '').concat(_this2.content), el);

          if (animate === false || !_this2.hasTransition) {
            hide(content, !show);
            return;
          }

          if (!el._wrapper) {
            el._wrapper = wrapAll(content, "<div".concat(show ? ' hidden' : '', ">"));
          }

          hide(content, false);
          return toggleHeight(_this2)(el._wrapper, show).then(function () {
            hide(content, !show);
            delete el._wrapper;
            unwrap(content);

            if (show) {
              var toggle = $(_this2.$props.toggle, el);

              if (!isInView(toggle)) {
                scrollIntoView(toggle, {
                  offset: _this2.offset
                });
              }
            }
          });
        });
      });
    }
  }
});

function hide(el, hide) {
  el && (el.hidden = hide);
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/core/alert.js



/* harmony default export */ var core_alert = ({
  mixins: [mixin_class, togglable],
  args: 'animation',
  props: {
    close: String
  },
  data: {
    animation: [true],
    selClose: '.uk-alert-close',
    duration: 150,
    hideProps: lang_assign({
      opacity: 0
    }, togglable.data.hideProps)
  },
  events: [{
    name: 'click',
    delegate: function delegate() {
      return this.selClose;
    },
    handler: function handler(e) {
      e.preventDefault();
      this.close();
    }
  }],
  methods: {
    close: function close() {
      var _this = this;

      this.toggleElement(this.$el).then(function () {
        return _this.$destroy(true);
      });
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/core/core.js




/* harmony default export */ function core(UIkit) {
  if (!inBrowser) {
    return;
  } // throttle 'resize'


  var pendingResize;

  var handleResize = function handleResize() {
    if (pendingResize) {
      return;
    }

    pendingResize = true;
    fastdom.write(function () {
      return pendingResize = false;
    });
    UIkit.update(null, 'resize');
  };

  on(window, 'load resize', handleResize);
  on(document, 'loadedmetadata load', handleResize, true);

  if ('ResizeObserver' in window) {
    new ResizeObserver(handleResize).observe(document.documentElement);
  } // throttle `scroll` event (Safari triggers multiple `scroll` events per frame)


  var pending;
  on(window, 'scroll', function (e) {
    if (pending) {
      return;
    }

    pending = true;
    fastdom.write(function () {
      return pending = false;
    });
    UIkit.update(null, e.type);
  }, {
    passive: true,
    capture: true
  });
  var started = 0;
  on(document, 'animationstart', function (_ref) {
    var target = _ref.target;

    if ((css(target, 'animationName') || '').match(/^uk-.*(left|right)/)) {
      started++;
      css(document.documentElement, 'overflowX', 'hidden');
      setTimeout(function () {
        if (! --started) {
          css(document.documentElement, 'overflowX', '');
        }
      }, toMs(css(target, 'animationDuration')) + 100);
    }
  }, true);
  on(document, pointerDown, function (e) {
    if (!isTouch(e)) {
      return;
    } // Handle Swipe Gesture


    var pos = getEventPos(e);
    var target = 'tagName' in e.target ? e.target : filter_parent(e.target);
    once(document, "".concat(pointerUp, " ").concat(pointerCancel, " scroll"), function (e) {
      var _getEventPos = getEventPos(e),
          x = _getEventPos.x,
          y = _getEventPos.y; // swipe


      if (e.type !== 'scroll' && target && x && Math.abs(pos.x - x) > 100 || y && Math.abs(pos.y - y) > 100) {
        setTimeout(function () {
          trigger(target, 'swipe');
          trigger(target, "swipe".concat(swipeDirection(pos.x, pos.y, x, y)));
        });
      }
    });
  }, {
    passive: true
  });
}

function swipeDirection(x1, y1, x2, y2) {
  return Math.abs(x1 - x2) >= Math.abs(y1 - y2) ? x1 - x2 > 0 ? 'Left' : 'Right' : y1 - y2 > 0 ? 'Up' : 'Down';
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/core/video.js

/* harmony default export */ var video = ({
  args: 'autoplay',
  props: {
    automute: Boolean,
    autoplay: Boolean
  },
  data: {
    automute: false,
    autoplay: true
  },
  computed: {
    inView: function inView(_ref) {
      var autoplay = _ref.autoplay;
      return autoplay === 'inview';
    }
  },
  connected: function connected() {
    if (this.inView && !hasAttr(this.$el, 'preload')) {
      this.$el.preload = 'none';
    }

    if (this.automute) {
      mute(this.$el);
    }
  },
  update: {
    read: function read() {
      return {
        visible: isVisible(this.$el) && css(this.$el, 'visibility') !== 'hidden',
        inView: this.inView && isInView(this.$el)
      };
    },
    write: function write(_ref2) {
      var visible = _ref2.visible,
          inView = _ref2.inView;

      if (!visible || this.inView && !inView) {
        pause(this.$el);
      } else if (this.autoplay === true || this.inView && inView) {
        play(this.$el);
      }
    },
    events: ['resize', 'scroll']
  }
});
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/core/cover.js




/* harmony default export */ var cover = ({
  mixins: [mixin_class, video],
  props: {
    width: Number,
    height: Number
  },
  data: {
    automute: true
  },
  update: {
    read: function read() {
      var el = this.$el;

      var _ref = getPositionedParent(el) || filter_parent(el),
          height = _ref.offsetHeight,
          width = _ref.offsetWidth;

      var dim = Dimensions.cover({
        width: this.width || el.naturalWidth || el.videoWidth || el.clientWidth,
        height: this.height || el.naturalHeight || el.videoHeight || el.clientHeight
      }, {
        width: width + (width % 2 ? 1 : 0),
        height: height + (height % 2 ? 1 : 0)
      });

      if (!dim.width || !dim.height) {
        return false;
      }

      return dim;
    },
    write: function write(_ref2) {
      var height = _ref2.height,
          width = _ref2.width;
      css(this.$el, {
        height: height,
        width: width
      });
    },
    events: ['resize']
  }
});

function getPositionedParent(el) {
  while (el = filter_parent(el)) {
    if (css(el, 'position') !== 'static') {
      return el;
    }
  }
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/core/drop.js







var drop_active;
/* harmony default export */ var drop = ({
  mixins: [container, mixin_position, togglable],
  args: 'pos',
  props: {
    mode: 'list',
    toggle: Boolean,
    boundary: Boolean,
    boundaryAlign: Boolean,
    delayShow: Number,
    delayHide: Number,
    clsDrop: String
  },
  data: {
    mode: ['click', 'hover'],
    toggle: '- *',
    boundary: true,
    boundaryAlign: false,
    delayShow: 0,
    delayHide: 800,
    clsDrop: false,
    animation: ['uk-animation-fade'],
    cls: 'uk-open',
    container: false
  },
  computed: {
    boundary: function boundary(_ref, $el) {
      var boundary = _ref.boundary;
      return boundary === true ? window : query(boundary, $el);
    },
    clsDrop: function clsDrop(_ref2) {
      var clsDrop = _ref2.clsDrop;
      return clsDrop || "uk-".concat(this.$options.name);
    },
    clsPos: function clsPos() {
      return this.clsDrop;
    }
  },
  created: function created() {
    this.tracker = new MouseTracker();
  },
  connected: function connected() {
    addClass(this.$el, this.clsDrop);

    if (this.toggle && !this.target) {
      this.target = this.$create('toggle', query(this.toggle, this.$el), {
        target: this.$el,
        mode: this.mode
      });
    }
  },
  disconnected: function disconnected() {
    if (this.isActive()) {
      drop_active = null;
    }
  },
  events: [{
    name: 'click',
    delegate: function delegate() {
      return ".".concat(this.clsDrop, "-close");
    },
    handler: function handler(e) {
      e.preventDefault();
      this.hide(false);
    }
  }, {
    name: 'click',
    delegate: function delegate() {
      return 'a[href^="#"]';
    },
    handler: function handler(_ref3) {
      var defaultPrevented = _ref3.defaultPrevented,
          hash = _ref3.current.hash;

      if (!defaultPrevented && hash && !within(hash, this.$el)) {
        this.hide(false);
      }
    }
  }, {
    name: 'beforescroll',
    handler: function handler() {
      this.hide(false);
    }
  }, {
    name: 'toggle',
    self: true,
    handler: function handler(e, toggle) {
      e.preventDefault();

      if (this.isToggled()) {
        this.hide(false);
      } else {
        this.show(toggle.$el, false);
      }
    }
  }, {
    name: 'toggleshow',
    self: true,
    handler: function handler(e, toggle) {
      e.preventDefault();
      this.show(toggle.$el);
    }
  }, {
    name: 'togglehide',
    self: true,
    handler: function handler(e) {
      e.preventDefault();
      this.hide();
    }
  }, {
    name: "".concat(pointerEnter, " focusin"),
    filter: function filter() {
      return includes(this.mode, 'hover');
    },
    handler: function handler(e) {
      if (!isTouch(e)) {
        this.clearTimers();
      }
    }
  }, {
    name: "".concat(pointerLeave, " focusout"),
    filter: function filter() {
      return includes(this.mode, 'hover');
    },
    handler: function handler(e) {
      if (!isTouch(e) && e.relatedTarget) {
        this.hide();
      }
    }
  }, {
    name: 'toggled',
    self: true,
    handler: function handler(e, toggled) {
      if (!toggled) {
        return;
      }

      this.clearTimers();
      this.position();
    }
  }, {
    name: 'show',
    self: true,
    handler: function handler() {
      var _this = this;

      drop_active = this;
      this.tracker.init();
      once(this.$el, 'hide', on(document, pointerDown, function (_ref4) {
        var target = _ref4.target;
        return !within(target, _this.$el) && once(document, "".concat(pointerUp, " ").concat(pointerCancel, " scroll"), function (_ref5) {
          var defaultPrevented = _ref5.defaultPrevented,
              type = _ref5.type,
              newTarget = _ref5.target;

          if (!defaultPrevented && type === pointerUp && target === newTarget && !(_this.target && within(target, _this.target))) {
            _this.hide(false);
          }
        }, true);
      }), {
        self: true
      });
      once(this.$el, 'hide', on(document, 'keydown', function (e) {
        if (e.keyCode === 27) {
          _this.hide(false);
        }
      }), {
        self: true
      });
    }
  }, {
    name: 'beforehide',
    self: true,
    handler: function handler() {
      this.clearTimers();
    }
  }, {
    name: 'hide',
    handler: function handler(_ref6) {
      var target = _ref6.target;

      if (this.$el !== target) {
        drop_active = drop_active === null && within(target, this.$el) && this.isToggled() ? this : drop_active;
        return;
      }

      drop_active = this.isActive() ? null : drop_active;
      this.tracker.cancel();
    }
  }],
  update: {
    write: function write() {
      if (this.isToggled() && !hasClass(this.$el, this.clsEnter)) {
        this.position();
      }
    },
    events: ['resize']
  },
  methods: {
    show: function show() {
      var _this2 = this;

      var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.target;
      var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      if (this.isToggled() && target && this.target && target !== this.target) {
        this.hide(false);
      }

      this.target = target;
      this.clearTimers();

      if (this.isActive()) {
        return;
      }

      if (drop_active) {
        if (delay && drop_active.isDelaying) {
          this.showTimer = setTimeout(this.show, 10);
          return;
        }

        var prev;

        while (drop_active && prev !== drop_active && !within(this.$el, drop_active.$el)) {
          prev = drop_active;
          drop_active.hide(false);
        }
      }

      if (this.container && filter_parent(this.$el) !== this.container) {
        append(this.container, this.$el);
      }

      this.showTimer = setTimeout(function () {
        return _this2.toggleElement(_this2.$el, true);
      }, delay && this.delayShow || 0);
    },
    hide: function hide() {
      var _this3 = this;

      var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      var hide = function hide() {
        return _this3.toggleElement(_this3.$el, false, false);
      };

      this.clearTimers();
      this.isDelaying = getPositionedElements(this.$el).some(function (el) {
        return _this3.tracker.movesTo(el);
      });

      if (delay && this.isDelaying) {
        this.hideTimer = setTimeout(this.hide, 50);
      } else if (delay && this.delayHide) {
        this.hideTimer = setTimeout(hide, this.delayHide);
      } else {
        hide();
      }
    },
    clearTimers: function clearTimers() {
      clearTimeout(this.showTimer);
      clearTimeout(this.hideTimer);
      this.showTimer = null;
      this.hideTimer = null;
      this.isDelaying = false;
    },
    isActive: function isActive() {
      return drop_active === this;
    },
    position: function position() {
      removeClass(this.$el, "".concat(this.clsDrop, "-stack"));
      toggleClass(this.$el, "".concat(this.clsDrop, "-boundary"), this.boundaryAlign);
      var boundary = dimensions_offset(this.boundary);
      var alignTo = this.boundaryAlign ? boundary : dimensions_offset(this.target);

      if (this.align === 'justify') {
        var prop = this.getAxis() === 'y' ? 'width' : 'height';
        css(this.$el, prop, alignTo[prop]);
      } else if (this.boundary && this.$el.offsetWidth > Math.max(boundary.right - alignTo.left, alignTo.right - boundary.left)) {
        addClass(this.$el, "".concat(this.clsDrop, "-stack"));
      }

      this.positionAt(this.$el, this.boundaryAlign ? this.boundary : this.target, this.boundary);
    }
  }
});

function getPositionedElements(el) {
  var result = [];
  apply(el, function (el) {
    return css(el, 'position') !== 'static' && result.push(el);
  });
  return result;
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/core/form-custom.js




/* harmony default export */ var form_custom = ({
  mixins: [mixin_class],
  args: 'target',
  props: {
    target: Boolean
  },
  data: {
    target: false
  },
  computed: {
    input: function input(_, $el) {
      return $(selInput, $el);
    },
    state: function state() {
      return this.input.nextElementSibling;
    },
    target: function target(_ref, $el) {
      var target = _ref.target;
      return target && (target === true && filter_parent(this.input) === $el && this.input.nextElementSibling || query(target, $el));
    }
  },
  update: function update() {
    var target = this.target,
        input = this.input;

    if (!target) {
      return;
    }

    var option;
    var prop = isInput(target) ? 'value' : 'textContent';
    var prev = target[prop];
    var value = input.files && input.files[0] ? input.files[0].name : matches(input, 'select') && (option = $$('option', input).filter(function (el) {
      return el.selected;
    })[0]) // eslint-disable-line prefer-destructuring
    ? option.textContent : input.value;

    if (prev !== value) {
      target[prop] = value;
    }
  },
  events: [{
    name: 'change',
    handler: function handler() {
      this.$update();
    }
  }, {
    name: 'reset',
    el: function el() {
      return closest(this.$el, 'form');
    },
    handler: function handler() {
      this.$update();
    }
  }]
});
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/core/gif.js
 // Deprecated

/* harmony default export */ var gif = ({
  update: {
    read: function read(data) {
      var inview = isInView(this.$el);

      if (!inview || data.isInView === inview) {
        return false;
      }

      data.isInView = inview;
    },
    write: function write() {
      this.$el.src = '' + this.$el.src; // force self-assign
    },
    events: ['scroll', 'resize']
  }
});
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/core/grid.js
function grid_slicedToArray(arr, i) { return grid_arrayWithHoles(arr) || grid_iterableToArrayLimit(arr, i) || grid_unsupportedIterableToArray(arr, i) || grid_nonIterableRest(); }

function grid_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function grid_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function grid_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function grid_toConsumableArray(arr) { return grid_arrayWithoutHoles(arr) || grid_iterableToArray(arr) || grid_unsupportedIterableToArray(arr) || grid_nonIterableSpread(); }

function grid_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function grid_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return grid_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return grid_arrayLikeToArray(o, minLen); }

function grid_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function grid_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return grid_arrayLikeToArray(arr); }

function grid_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }


















/* harmony default export */ var grid = ({
  extends: margin,
  mixins: [mixin_class],
  name: 'grid',
  props: {
    masonry: Boolean,
    parallax: Number
  },
  data: {
    margin: 'uk-grid-margin',
    clsStack: 'uk-grid-stack',
    masonry: false,
    parallax: 0
  },
  connected: function connected() {
    this.masonry && addClass(this.$el, 'uk-flex-top uk-flex-wrap-top');
  },
  update: [{
    write: function write(_ref) {
      var columns = _ref.columns;
      toggleClass(this.$el, this.clsStack, columns.length < 2);
    },
    events: ['resize']
  }, {
    read: function read(data) {
      var columns = data.columns,
          rows = data.rows; // Filter component makes elements positioned absolute

      if (!columns.length || !this.masonry && !this.parallax || positionedAbsolute(this.$el)) {
        data.translates = false;
        return false;
      }

      var translates = false;
      var nodes = filter_children(this.$el);
      var columnHeights = getColumnHeights(columns);
      var margin = getMarginTop(nodes, this.margin) * (rows.length - 1);
      var elHeight = Math.max.apply(Math, grid_toConsumableArray(columnHeights)) + margin;

      if (this.masonry) {
        columns = columns.map(function (column) {
          return sortBy(column, 'offsetTop');
        });
        translates = getTranslates(rows, columns);
      }

      var padding = Math.abs(this.parallax);

      if (padding) {
        padding = columnHeights.reduce(function (newPadding, hgt, i) {
          return Math.max(newPadding, hgt + margin + (i % 2 ? padding : padding / 8) - elHeight);
        }, 0);
      }

      return {
        padding: padding,
        columns: columns,
        translates: translates,
        height: translates ? elHeight : ''
      };
    },
    write: function write(_ref2) {
      var height = _ref2.height,
          padding = _ref2.padding;
      css(this.$el, 'paddingBottom', padding || '');
      height !== false && css(this.$el, 'height', height);
    },
    events: ['resize']
  }, {
    read: function read(_ref3) {
      var height = _ref3.height;

      if (positionedAbsolute(this.$el)) {
        return false;
      }

      return {
        scrolled: this.parallax ? scrolledOver(this.$el, height ? height - dimensions_height(this.$el) : 0) * Math.abs(this.parallax) : false
      };
    },
    write: function write(_ref4) {
      var columns = _ref4.columns,
          scrolled = _ref4.scrolled,
          translates = _ref4.translates;

      if (scrolled === false && !translates) {
        return;
      }

      columns.forEach(function (column, i) {
        return column.forEach(function (el, j) {
          return css(el, 'transform', !scrolled && !translates ? '' : "translateY(".concat((translates && -translates[i][j]) + (scrolled ? i % 2 ? scrolled : scrolled / 8 : 0), "px)"));
        });
      });
    },
    events: ['scroll', 'resize']
  }]
});

function positionedAbsolute(el) {
  return filter_children(el).some(function (el) {
    return css(el, 'position') === 'absolute';
  });
}

function getTranslates(rows, columns) {
  var rowHeights = rows.map(function (row) {
    return Math.max.apply(Math, grid_toConsumableArray(row.map(function (el) {
      return el.offsetHeight;
    })));
  });
  return columns.map(function (elements) {
    var prev = 0;
    return elements.map(function (element, row) {
      return prev += row ? rowHeights[row - 1] - elements[row - 1].offsetHeight : 0;
    });
  });
}

function getMarginTop(nodes, cls) {
  var _nodes$filter = nodes.filter(function (el) {
    return hasClass(el, cls);
  }),
      _nodes$filter2 = grid_slicedToArray(_nodes$filter, 1),
      node = _nodes$filter2[0];

  return toFloat(node ? css(node, 'marginTop') : css(nodes[0], 'paddingLeft'));
}

function getColumnHeights(columns) {
  return columns.map(function (column) {
    return column.reduce(function (sum, el) {
      return sum + el.offsetHeight;
    }, 0);
  });
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/mixin/flex-bug.js

 // IE 11 fix (min-height on a flex container won't apply to its flex items)

/* harmony default export */ var flex_bug = (isIE ? {
  props: {
    selMinHeight: String
  },
  data: {
    selMinHeight: false,
    forceHeight: false
  },
  computed: {
    elements: function elements(_ref, $el) {
      var selMinHeight = _ref.selMinHeight;
      return selMinHeight ? $$(selMinHeight, $el) : [$el];
    }
  },
  update: [{
    read: function read() {
      css(this.elements, 'height', '');
    },
    order: -5,
    events: ['resize']
  }, {
    write: function write() {
      var _this = this;

      this.elements.forEach(function (el) {
        var height = toFloat(css(el, 'minHeight'));

        if (height && (_this.forceHeight || Math.round(height + boxModelAdjust(el, 'height', 'content-box')) >= el.offsetHeight)) {
          css(el, 'height', height);
        }
      });
    },
    order: 5,
    events: ['resize']
  }]
} : {});
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/core/height-match.js
function height_match_toConsumableArray(arr) { return height_match_arrayWithoutHoles(arr) || height_match_iterableToArray(arr) || height_match_unsupportedIterableToArray(arr) || height_match_nonIterableSpread(); }

function height_match_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function height_match_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return height_match_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return height_match_arrayLikeToArray(o, minLen); }

function height_match_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function height_match_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return height_match_arrayLikeToArray(arr); }

function height_match_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

















/* harmony default export */ var height_match = ({
  mixins: [flex_bug],
  args: 'target',
  props: {
    target: String,
    row: Boolean
  },
  data: {
    target: '> *',
    row: true,
    forceHeight: true
  },
  computed: {
    elements: function elements(_ref, $el) {
      var target = _ref.target;
      return $$(target, $el);
    }
  },
  update: {
    read: function read() {
      return {
        rows: (this.row ? getRows(this.elements) : [this.elements]).map(height_match_match)
      };
    },
    write: function write(_ref2) {
      var rows = _ref2.rows;
      rows.forEach(function (_ref3) {
        var heights = _ref3.heights,
            elements = _ref3.elements;
        return elements.forEach(function (el, i) {
          return css(el, 'minHeight', heights[i]);
        });
      });
    },
    events: ['resize']
  }
});

function height_match_match(elements) {
  if (elements.length < 2) {
    return {
      heights: [''],
      elements: elements
    };
  }

  var heights = elements.map(getHeight);
  var max = Math.max.apply(Math, height_match_toConsumableArray(heights));
  var hasMinHeight = elements.some(function (el) {
    return el.style.minHeight;
  });
  var hasShrunk = elements.some(function (el, i) {
    return !el.style.minHeight && heights[i] < max;
  });

  if (hasMinHeight && hasShrunk) {
    css(elements, 'minHeight', '');
    heights = elements.map(getHeight);
    max = Math.max.apply(Math, height_match_toConsumableArray(heights));
  }

  heights = elements.map(function (el, i) {
    return heights[i] === max && toFloat(el.style.minHeight).toFixed(2) !== max.toFixed(2) ? '' : max;
  });
  return {
    heights: heights,
    elements: elements
  };
}

function getHeight(element) {
  var style = false;

  if (!isVisible(element)) {
    style = element.style.display;
    css(element, 'display', 'block', 'important');
  }

  var height = dimensions(element).height - boxModelAdjust(element, 'height', 'content-box');

  if (style !== false) {
    css(element, 'display', style);
  }

  return height;
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/core/height-viewport.js



/* harmony default export */ var height_viewport = ({
  mixins: [flex_bug],
  props: {
    expand: Boolean,
    offsetTop: Boolean,
    offsetBottom: Boolean,
    minHeight: Number
  },
  data: {
    expand: false,
    offsetTop: false,
    offsetBottom: false,
    minHeight: 0
  },
  update: {
    read: function read(_ref) {
      var prev = _ref.minHeight;

      if (!isVisible(this.$el)) {
        return false;
      }

      var minHeight = '';
      var box = boxModelAdjust(this.$el, 'height', 'content-box');

      if (this.expand) {
        minHeight = dimensions_height(window) - (dimensions(document.documentElement).height - dimensions(this.$el).height) - box || '';
      } else {
        // on mobile devices (iOS and Android) window.innerHeight !== 100vh
        minHeight = 'calc(100vh';

        if (this.offsetTop) {
          var _offset = dimensions_offset(this.$el),
              top = _offset.top;

          minHeight += top > 0 && top < dimensions_height(window) / 2 ? " - ".concat(top, "px") : '';
        }

        if (this.offsetBottom === true) {
          minHeight += " - ".concat(dimensions(this.$el.nextElementSibling).height, "px");
        } else if (isNumeric(this.offsetBottom)) {
          minHeight += " - ".concat(this.offsetBottom, "vh");
        } else if (this.offsetBottom && endsWith(this.offsetBottom, 'px')) {
          minHeight += " - ".concat(toFloat(this.offsetBottom), "px");
        } else if (isString(this.offsetBottom)) {
          minHeight += " - ".concat(dimensions(query(this.offsetBottom, this.$el)).height, "px");
        }

        minHeight += "".concat(box ? " - ".concat(box, "px") : '', ")");
      }

      return {
        minHeight: minHeight,
        prev: prev
      };
    },
    write: function write(_ref2) {
      var minHeight = _ref2.minHeight,
          prev = _ref2.prev;
      css(this.$el, {
        minHeight: minHeight
      });

      if (minHeight !== prev) {
        this.$update(this.$el, 'resize');
      }

      if (this.minHeight && toFloat(css(this.$el, 'minHeight')) < this.minHeight) {
        css(this.$el, 'minHeight', this.minHeight);
      }
    },
    events: ['resize']
  }
});
// EXTERNAL MODULE: ./node_modules/uikit/src/images/components/close-icon.svg
var close_icon = __webpack_require__("./node_modules/uikit/src/images/components/close-icon.svg");
// EXTERNAL MODULE: ./node_modules/uikit/src/images/components/close-large.svg
var close_large = __webpack_require__("./node_modules/uikit/src/images/components/close-large.svg");
// EXTERNAL MODULE: ./node_modules/uikit/src/images/components/marker.svg
var marker = __webpack_require__("./node_modules/uikit/src/images/components/marker.svg");
// EXTERNAL MODULE: ./node_modules/uikit/src/images/components/navbar-toggle-icon.svg
var navbar_toggle_icon = __webpack_require__("./node_modules/uikit/src/images/components/navbar-toggle-icon.svg");
// EXTERNAL MODULE: ./node_modules/uikit/src/images/components/overlay-icon.svg
var overlay_icon = __webpack_require__("./node_modules/uikit/src/images/components/overlay-icon.svg");
// EXTERNAL MODULE: ./node_modules/uikit/src/images/components/pagination-next.svg
var pagination_next = __webpack_require__("./node_modules/uikit/src/images/components/pagination-next.svg");
// EXTERNAL MODULE: ./node_modules/uikit/src/images/components/pagination-previous.svg
var pagination_previous = __webpack_require__("./node_modules/uikit/src/images/components/pagination-previous.svg");
// EXTERNAL MODULE: ./node_modules/uikit/src/images/components/search-icon.svg
var search_icon = __webpack_require__("./node_modules/uikit/src/images/components/search-icon.svg");
// EXTERNAL MODULE: ./node_modules/uikit/src/images/components/search-large.svg
var search_large = __webpack_require__("./node_modules/uikit/src/images/components/search-large.svg");
// EXTERNAL MODULE: ./node_modules/uikit/src/images/components/search-navbar.svg
var search_navbar = __webpack_require__("./node_modules/uikit/src/images/components/search-navbar.svg");
// EXTERNAL MODULE: ./node_modules/uikit/src/images/components/slidenav-next.svg
var slidenav_next = __webpack_require__("./node_modules/uikit/src/images/components/slidenav-next.svg");
// EXTERNAL MODULE: ./node_modules/uikit/src/images/components/slidenav-next-large.svg
var slidenav_next_large = __webpack_require__("./node_modules/uikit/src/images/components/slidenav-next-large.svg");
// EXTERNAL MODULE: ./node_modules/uikit/src/images/components/slidenav-previous.svg
var slidenav_previous = __webpack_require__("./node_modules/uikit/src/images/components/slidenav-previous.svg");
// EXTERNAL MODULE: ./node_modules/uikit/src/images/components/slidenav-previous-large.svg
var slidenav_previous_large = __webpack_require__("./node_modules/uikit/src/images/components/slidenav-previous-large.svg");
// EXTERNAL MODULE: ./node_modules/uikit/src/images/components/spinner.svg
var spinner = __webpack_require__("./node_modules/uikit/src/images/components/spinner.svg");
// EXTERNAL MODULE: ./node_modules/uikit/src/images/components/totop.svg
var totop = __webpack_require__("./node_modules/uikit/src/images/components/totop.svg");
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/core/icon.js
function icon_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





















var icons = {
  spinner: spinner,
  totop: totop,
  marker: marker,
  'close-icon': close_icon,
  'close-large': close_large,
  'navbar-toggle-icon': navbar_toggle_icon,
  'overlay-icon': overlay_icon,
  'pagination-next': pagination_next,
  'pagination-previous': pagination_previous,
  'search-icon': search_icon,
  'search-large': search_large,
  'search-navbar': search_navbar,
  'slidenav-next': slidenav_next,
  'slidenav-next-large': slidenav_next_large,
  'slidenav-previous': slidenav_previous,
  'slidenav-previous-large': slidenav_previous_large
};
var Icon = {
  install: icon_install,
  extends: svg,
  args: 'icon',
  props: ['icon'],
  data: {
    include: ['focusable']
  },
  isIcon: true,
  beforeConnect: function beforeConnect() {
    addClass(this.$el, 'uk-icon');
  },
  methods: {
    getSvg: function getSvg() {
      var icon = getIcon(this.icon);

      if (!icon) {
        return Promise.reject('Icon not found.');
      }

      return Promise.resolve(icon);
    }
  }
};
/* harmony default export */ var icon = (Icon);
var IconComponent = {
  args: false,
  extends: Icon,
  data: function data(vm) {
    return {
      icon: hyphenate(vm.constructor.options.name)
    };
  },
  beforeConnect: function beforeConnect() {
    addClass(this.$el, this.$name);
  }
};
var Slidenav = {
  extends: IconComponent,
  beforeConnect: function beforeConnect() {
    addClass(this.$el, 'uk-slidenav');
  },
  computed: {
    icon: function icon(_ref, $el) {
      var icon = _ref.icon;
      return hasClass($el, 'uk-slidenav-large') ? "".concat(icon, "-large") : icon;
    }
  }
};
var Search = {
  extends: IconComponent,
  computed: {
    icon: function icon(_ref2, $el) {
      var icon = _ref2.icon;
      return hasClass($el, 'uk-search-icon') && parents($el, '.uk-search-large').length ? 'search-large' : parents($el, '.uk-search-navbar').length ? 'search-navbar' : icon;
    }
  }
};
var Close = {
  extends: IconComponent,
  computed: {
    icon: function icon() {
      return "close-".concat(hasClass(this.$el, 'uk-close-large') ? 'large' : 'icon');
    }
  }
};
var Spinner = {
  extends: IconComponent,
  connected: function connected() {
    var _this = this;

    this.svg.then(function (svg) {
      return svg && _this.ratio !== 1 && css($('circle', svg), 'strokeWidth', 1 / _this.ratio);
    });
  }
};
var parsed = {};

function icon_install(UIkit) {
  UIkit.icon.add = function (name, svg) {
    var added = isString(name) ? icon_defineProperty({}, name, svg) : name;
    each(added, function (svg, name) {
      icons[name] = svg;
      delete parsed[name];
    });

    if (UIkit._initialized) {
      apply(document.body, function (el) {
        return each(UIkit.getComponents(el), function (cmp) {
          cmp.$options.isIcon && cmp.icon in added && cmp.$reset();
        });
      });
    }
  };
}

function getIcon(icon) {
  if (!icons[icon]) {
    return null;
  }

  if (!parsed[icon]) {
    parsed[icon] = $((icons[applyRtl(icon)] || icons[icon]).trim());
  }

  return parsed[icon].cloneNode(true);
}

function applyRtl(icon) {
  return isRtl ? swap(swap(icon, 'left', 'right'), 'previous', 'next') : icon;
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/core/img.js
function img_toConsumableArray(arr) { return img_arrayWithoutHoles(arr) || img_iterableToArray(arr) || img_unsupportedIterableToArray(arr) || img_nonIterableSpread(); }

function img_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function img_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return img_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return img_arrayLikeToArray(o, minLen); }

function img_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function img_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return img_arrayLikeToArray(arr); }

function img_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }





















/* harmony default export */ var img = ({
  args: 'dataSrc',
  props: {
    dataSrc: String,
    dataSrcset: Boolean,
    sizes: String,
    width: Number,
    height: Number,
    offsetTop: String,
    offsetLeft: String,
    target: String
  },
  data: {
    dataSrc: '',
    dataSrcset: false,
    sizes: false,
    width: false,
    height: false,
    offsetTop: '50vh',
    offsetLeft: '50vw',
    target: false
  },
  computed: {
    cacheKey: function cacheKey(_ref) {
      var dataSrc = _ref.dataSrc;
      return "".concat(this.$name, ".").concat(dataSrc);
    },
    width: function width(_ref2) {
      var width = _ref2.width,
          dataWidth = _ref2.dataWidth;
      return width || dataWidth;
    },
    height: function height(_ref3) {
      var height = _ref3.height,
          dataHeight = _ref3.dataHeight;
      return height || dataHeight;
    },
    sizes: function sizes(_ref4) {
      var sizes = _ref4.sizes,
          dataSizes = _ref4.dataSizes;
      return sizes || dataSizes;
    },
    isImg: function isImg(_, $el) {
      return _isImg($el);
    },
    target: {
      get: function get(_ref5) {
        var target = _ref5.target;
        return [this.$el].concat(img_toConsumableArray(queryAll(target, this.$el)));
      },
      watch: function watch() {
        this.observe();
      }
    },
    offsetTop: function offsetTop(_ref6) {
      var offsetTop = _ref6.offsetTop;
      return toPx(offsetTop, 'height');
    },
    offsetLeft: function offsetLeft(_ref7) {
      var offsetLeft = _ref7.offsetLeft;
      return toPx(offsetLeft, 'width');
    }
  },
  connected: function connected() {
    if (!window.IntersectionObserver) {
      setSrcAttrs(this.$el, this.dataSrc, this.dataSrcset, this.sizes);
      return;
    }

    if (storage[this.cacheKey]) {
      setSrcAttrs(this.$el, storage[this.cacheKey], this.dataSrcset, this.sizes);
    } else if (this.isImg && this.width && this.height) {
      setSrcAttrs(this.$el, getPlaceholderImage(this.width, this.height, this.sizes));
    }

    this.observer = new IntersectionObserver(this.load, {
      rootMargin: "".concat(this.offsetTop, "px ").concat(this.offsetLeft, "px")
    });
    requestAnimationFrame(this.observe);
  },
  disconnected: function disconnected() {
    this.observer && this.observer.disconnect();
  },
  update: {
    read: function read(_ref8) {
      var _this = this;

      var image = _ref8.image;

      if (!this.observer) {
        return false;
      }

      if (!image && document.readyState === 'complete') {
        this.load(this.observer.takeRecords());
      }

      if (this.isImg) {
        return false;
      }

      image && image.then(function (img) {
        return img && img.currentSrc !== '' && setSrcAttrs(_this.$el, currentSrc(img));
      });
    },
    write: function write(data) {
      if (this.dataSrcset && window.devicePixelRatio !== 1) {
        var bgSize = css(this.$el, 'backgroundSize');

        if (bgSize.match(/^(auto\s?)+$/) || toFloat(bgSize) === data.bgSize) {
          data.bgSize = getSourceSize(this.dataSrcset, this.sizes);
          css(this.$el, 'backgroundSize', "".concat(data.bgSize, "px"));
        }
      }
    },
    events: ['resize']
  },
  methods: {
    load: function load(entries) {
      var _this2 = this;

      // Old chromium based browsers (UC Browser) did not implement `isIntersecting`
      if (!entries.some(function (entry) {
        return isUndefined(entry.isIntersecting) || entry.isIntersecting;
      })) {
        return;
      }

      this._data.image = getImage(this.dataSrc, this.dataSrcset, this.sizes).then(function (img) {
        setSrcAttrs(_this2.$el, currentSrc(img), img.srcset, img.sizes);
        storage[_this2.cacheKey] = currentSrc(img);
        return img;
      }, function (e) {
        return trigger(_this2.$el, new e.constructor(e.type, e));
      });
      this.observer.disconnect();
    },
    observe: function observe() {
      var _this3 = this;

      if (this._connected && !this._data.image) {
        this.target.forEach(function (el) {
          return _this3.observer.observe(el);
        });
      }
    }
  }
});

function setSrcAttrs(el, src, srcset, sizes) {
  if (_isImg(el)) {
    var set = function set(prop, val) {
      return val && val !== el[prop] && (el[prop] = val);
    };

    set('sizes', sizes);
    set('srcset', srcset);
    set('src', src);
  } else if (src) {
    var change = !includes(el.style.backgroundImage, src);

    if (change) {
      css(el, 'backgroundImage', "url(".concat(selector_escape(src), ")"));
      trigger(el, createEvent('load', false));
    }
  }
}

function getPlaceholderImage(width, height, sizes) {
  if (sizes) {
    var _Dimensions$ratio = Dimensions.ratio({
      width: width,
      height: height
    }, 'width', toPx(sizesToPixel(sizes)));

    width = _Dimensions$ratio.width;
    height = _Dimensions$ratio.height;
  }

  return "data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"".concat(width, "\" height=\"").concat(height, "\"></svg>");
}

var sizesRe = /\s*(.*?)\s*(\w+|calc\(.*?\))\s*(?:,|$)/g;

function sizesToPixel(sizes) {
  var matches;
  sizesRe.lastIndex = 0;

  while (matches = sizesRe.exec(sizes)) {
    if (!matches[1] || window.matchMedia(matches[1]).matches) {
      matches = evaluateSize(matches[2]);
      break;
    }
  }

  return matches || '100vw';
}

var sizeRe = /\d+(?:\w+|%)/g;
var additionRe = /[+-]?(\d+)/g;

function evaluateSize(size) {
  return startsWith(size, 'calc') ? size.slice(5, -1).replace(sizeRe, function (size) {
    return toPx(size);
  }).replace(/ /g, '').match(additionRe).reduce(function (a, b) {
    return a + +b;
  }, 0) : size;
}

var srcSetRe = /\s+\d+w\s*(?:,|$)/g;

function getSourceSize(srcset, sizes) {
  var srcSize = toPx(sizesToPixel(sizes));
  var descriptors = (srcset.match(srcSetRe) || []).map(toFloat).sort(function (a, b) {
    return a - b;
  });
  return descriptors.filter(function (size) {
    return size >= srcSize;
  })[0] || descriptors.pop() || '';
}

function _isImg(el) {
  return el.tagName === 'IMG';
}

function currentSrc(el) {
  return el.currentSrc || el.src;
}

var key = '__test__';
var storage; // workaround for Safari's private browsing mode and accessing sessionStorage in Blink

try {
  storage = window.sessionStorage || {};
  storage[key] = 1;
  delete storage[key];
} catch (e) {
  storage = {};
}
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.fill.js
var es_array_fill = __webpack_require__("./node_modules/core-js/modules/es.array.fill.js");
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/core/leader.js
function leader_slicedToArray(arr, i) { return leader_arrayWithHoles(arr) || leader_iterableToArrayLimit(arr, i) || leader_unsupportedIterableToArray(arr, i) || leader_nonIterableRest(); }

function leader_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function leader_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return leader_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return leader_arrayLikeToArray(o, minLen); }

function leader_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function leader_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function leader_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
















/* harmony default export */ var leader = ({
  mixins: [mixin_class, media],
  props: {
    fill: String
  },
  data: {
    fill: '',
    clsWrapper: 'uk-leader-fill',
    clsHide: 'uk-leader-hide',
    attrFill: 'data-fill'
  },
  computed: {
    fill: function fill(_ref) {
      var fill = _ref.fill;
      return fill || getCssVar('leader-fill-content');
    }
  },
  connected: function connected() {
    var _wrapInner = wrapInner(this.$el, "<span class=\"".concat(this.clsWrapper, "\">"));

    var _wrapInner2 = leader_slicedToArray(_wrapInner, 1);

    this.wrapper = _wrapInner2[0];
  },
  disconnected: function disconnected() {
    unwrap(this.wrapper.childNodes);
  },
  update: {
    read: function read(_ref2) {
      var changed = _ref2.changed,
          width = _ref2.width;
      var prev = width;
      width = Math.floor(this.$el.offsetWidth / 2);
      return {
        width: width,
        fill: this.fill,
        changed: changed || prev !== width,
        hide: !this.matchMedia
      };
    },
    write: function write(data) {
      toggleClass(this.wrapper, this.clsHide, data.hide);

      if (data.changed) {
        data.changed = false;
        attr(this.wrapper, this.attrFill, new Array(data.width).join(data.fill));
      }
    },
    events: ['resize']
  }
});
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/core/modal.js



/* harmony default export */ var core_modal = ({
  install: modal_install,
  mixins: [modal],
  data: {
    clsPage: 'uk-modal-page',
    selPanel: '.uk-modal-dialog',
    selClose: '.uk-modal-close, .uk-modal-close-default, .uk-modal-close-outside, .uk-modal-close-full'
  },
  events: [{
    name: 'show',
    self: true,
    handler: function handler() {
      if (hasClass(this.panel, 'uk-margin-auto-vertical')) {
        addClass(this.$el, 'uk-flex');
      } else {
        css(this.$el, 'display', 'block');
      }

      dimensions_height(this.$el); // force reflow
    }
  }, {
    name: 'hidden',
    self: true,
    handler: function handler() {
      css(this.$el, 'display', '');
      removeClass(this.$el, 'uk-flex');
    }
  }]
});

function modal_install(_ref) {
  var modal = _ref.modal;

  modal.dialog = function (content, options) {
    var dialog = modal("<div class=\"uk-modal\">\n                <div class=\"uk-modal-dialog\">".concat(content, "</div>\n             </div>"), options);
    dialog.show();
    on(dialog.$el, 'hidden', function () {
      return Promise.resolve().then(function () {
        return dialog.$destroy(true);
      });
    }, {
      self: true
    });
    return dialog;
  };

  modal.alert = function (message, options) {
    return openDialog(function (_ref2) {
      var labels = _ref2.labels;
      return "<div class=\"uk-modal-body\">".concat(isString(message) ? message : html(message), "</div>\n            <div class=\"uk-modal-footer uk-text-right\">\n                <button class=\"uk-button uk-button-primary uk-modal-close\" autofocus>").concat(labels.ok, "</button>\n            </div>");
    }, options, function (deferred) {
      return deferred.resolve();
    });
  };

  modal.confirm = function (message, options) {
    return openDialog(function (_ref3) {
      var labels = _ref3.labels;
      return "<form>\n                <div class=\"uk-modal-body\">".concat(isString(message) ? message : html(message), "</div>\n                <div class=\"uk-modal-footer uk-text-right\">\n                    <button class=\"uk-button uk-button-default uk-modal-close\" type=\"button\">").concat(labels.cancel, "</button>\n                    <button class=\"uk-button uk-button-primary\" autofocus>").concat(labels.ok, "</button>\n                </div>\n            </form>");
    }, options, function (deferred) {
      return deferred.reject();
    });
  };

  modal.prompt = function (message, value, options) {
    return openDialog(function (_ref4) {
      var labels = _ref4.labels;
      return "<form class=\"uk-form-stacked\">\n                <div class=\"uk-modal-body\">\n                    <label>".concat(isString(message) ? message : html(message), "</label>\n                    <input class=\"uk-input\" value=\"").concat(value || '', "\" autofocus>\n                </div>\n                <div class=\"uk-modal-footer uk-text-right\">\n                    <button class=\"uk-button uk-button-default uk-modal-close\" type=\"button\">").concat(labels.cancel, "</button>\n                    <button class=\"uk-button uk-button-primary\">").concat(labels.ok, "</button>\n                </div>\n            </form>");
    }, options, function (deferred) {
      return deferred.resolve(null);
    }, function (dialog) {
      return $('input', dialog.$el).value;
    });
  };

  modal.labels = {
    ok: 'Ok',
    cancel: 'Cancel'
  };

  function openDialog(tmpl, options, hideFn, submitFn) {
    options = lang_assign({
      bgClose: false,
      escClose: true,
      labels: modal.labels
    }, options);
    var dialog = modal.dialog(tmpl(options), options);
    var deferred = new Deferred();
    var resolved = false;
    on(dialog.$el, 'submit', 'form', function (e) {
      e.preventDefault();
      deferred.resolve(submitFn && submitFn(dialog));
      resolved = true;
      dialog.hide();
    });
    on(dialog.$el, 'hide', function () {
      return !resolved && hideFn(deferred);
    });
    deferred.promise.dialog = dialog;
    return deferred.promise;
  }
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/core/nav.js

/* harmony default export */ var nav = ({
  extends: accordion,
  data: {
    targets: '> .uk-parent',
    toggle: '> a',
    content: '> ul'
  }
});
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/core/navbar.js














var navItem = '.uk-navbar-nav > li > a, .uk-navbar-item, .uk-navbar-toggle';
/* harmony default export */ var navbar = ({
  mixins: [mixin_class, container, flex_bug],
  props: {
    dropdown: String,
    mode: 'list',
    align: String,
    offset: Number,
    boundary: Boolean,
    boundaryAlign: Boolean,
    clsDrop: String,
    delayShow: Number,
    delayHide: Number,
    dropbar: Boolean,
    dropbarMode: String,
    dropbarAnchor: Boolean,
    duration: Number
  },
  data: {
    dropdown: navItem,
    align: !isRtl ? 'left' : 'right',
    clsDrop: 'uk-navbar-dropdown',
    mode: undefined,
    offset: undefined,
    delayShow: undefined,
    delayHide: undefined,
    boundaryAlign: undefined,
    flip: 'x',
    boundary: true,
    dropbar: false,
    dropbarMode: 'slide',
    dropbarAnchor: false,
    duration: 200,
    forceHeight: true,
    selMinHeight: navItem,
    container: false
  },
  computed: {
    boundary: function boundary(_ref, $el) {
      var boundary = _ref.boundary,
          boundaryAlign = _ref.boundaryAlign;
      return boundary === true || boundaryAlign ? $el : boundary;
    },
    dropbarAnchor: function dropbarAnchor(_ref2, $el) {
      var dropbarAnchor = _ref2.dropbarAnchor;
      return query(dropbarAnchor, $el);
    },
    pos: function pos(_ref3) {
      var align = _ref3.align;
      return "bottom-".concat(align);
    },
    dropbar: {
      get: function get(_ref4) {
        var dropbar = _ref4.dropbar;

        if (!dropbar) {
          return null;
        }

        dropbar = this._dropbar || query(dropbar, this.$el) || $('+ .uk-navbar-dropbar', this.$el);
        return dropbar ? dropbar : this._dropbar = $('<div></div>');
      },
      watch: function watch(dropbar) {
        addClass(dropbar, 'uk-navbar-dropbar');
      },
      immediate: true
    },
    dropContainer: function dropContainer(_, $el) {
      return this.container || $el;
    },
    dropdowns: {
      get: function get(_ref5, $el) {
        var _this = this;

        var clsDrop = _ref5.clsDrop;
        var dropdowns = $$(".".concat(clsDrop), $el);

        if (this.dropContainer !== $el) {
          $$(".".concat(clsDrop), this.dropContainer).forEach(function (el) {
            var dropdown = _this.getDropdown(el);

            if (!includes(dropdowns, el) && dropdown && dropdown.target && within(dropdown.target, _this.$el)) {
              dropdowns.push(el);
            }
          });
        }

        return dropdowns;
      },
      watch: function watch(dropdowns) {
        var _this2 = this;

        this.$create('drop', dropdowns.filter(function (el) {
          return !_this2.getDropdown(el);
        }), lang_assign({}, this.$props, {
          boundary: this.boundary,
          pos: this.pos,
          offset: this.dropbar || this.offset
        }));
      },
      immediate: true
    },
    toggles: function toggles(_ref6, $el) {
      var dropdown = _ref6.dropdown;
      return $$(dropdown, $el);
    }
  },
  disconnected: function disconnected() {
    this.dropbar && dom_remove(this.dropbar);
    delete this._dropbar;
  },
  events: [{
    name: 'mouseover focusin',
    delegate: function delegate() {
      return this.dropdown;
    },
    handler: function handler(_ref7) {
      var current = _ref7.current;
      var active = this.getActive();

      if (active && includes(active.mode, 'hover') && active.target && !within(active.target, current) && !active.tracker.movesTo(active.$el)) {
        active.hide(false);
      }
    }
  }, {
    name: 'keydown',
    delegate: function delegate() {
      return this.dropdown;
    },
    handler: function handler(e) {
      var current = e.current,
          keyCode = e.keyCode;
      var active = this.getActive();

      if (keyCode === keyMap.DOWN && hasAttr(current, 'aria-expanded')) {
        e.preventDefault();

        if (!active || active.target !== current) {
          current.click();
          once(this.dropContainer, 'show', function (_ref8) {
            var target = _ref8.target;
            return focusFirstFocusableElement(target);
          });
        } else {
          focusFirstFocusableElement(active.$el);
        }
      }

      handleNavItemNavigation(e, this.toggles, active);
    }
  }, {
    name: 'keydown',
    el: function el() {
      return this.dropContainer;
    },
    delegate: function delegate() {
      return ".".concat(this.clsDrop);
    },
    handler: function handler(e) {
      var current = e.current,
          keyCode = e.keyCode;

      if (!includes(this.dropdowns, current)) {
        return;
      }

      var active = this.getActive();
      var elements = $$(selFocusable, current);
      var i = findIndex(elements, function (el) {
        return matches(el, ':focus');
      });

      if (keyCode === keyMap.UP) {
        e.preventDefault();

        if (i > 0) {
          elements[i - 1].focus();
        }
      }

      if (keyCode === keyMap.DOWN) {
        e.preventDefault();

        if (i < elements.length - 1) {
          elements[i + 1].focus();
        }
      }

      if (keyCode === keyMap.ESC) {
        active && active.target && active.target.focus();
      }

      handleNavItemNavigation(e, this.toggles, active);
    }
  }, {
    name: 'mouseleave',
    el: function el() {
      return this.dropbar;
    },
    filter: function filter() {
      return this.dropbar;
    },
    handler: function handler() {
      var active = this.getActive();

      if (active && includes(active.mode, 'hover') && !this.dropdowns.some(function (el) {
        return matches(el, ':hover');
      })) {
        active.hide();
      }
    }
  }, {
    name: 'beforeshow',
    el: function el() {
      return this.dropContainer;
    },
    filter: function filter() {
      return this.dropbar;
    },
    handler: function handler() {
      if (!filter_parent(this.dropbar)) {
        after(this.dropbarAnchor || this.$el, this.dropbar);
      }
    }
  }, {
    name: 'show',
    el: function el() {
      return this.dropContainer;
    },
    filter: function filter() {
      return this.dropbar;
    },
    handler: function handler(_, _ref9) {
      var $el = _ref9.$el,
          dir = _ref9.dir;

      if (!hasClass($el, this.clsDrop)) {
        return;
      }

      if (this.dropbarMode === 'slide') {
        addClass(this.dropbar, 'uk-navbar-dropbar-slide');
      }

      this.clsDrop && addClass($el, "".concat(this.clsDrop, "-dropbar"));

      if (dir === 'bottom') {
        this.transitionTo($el.offsetHeight + toFloat(css($el, 'marginTop')) + toFloat(css($el, 'marginBottom')), $el);
      }
    }
  }, {
    name: 'beforehide',
    el: function el() {
      return this.dropContainer;
    },
    filter: function filter() {
      return this.dropbar;
    },
    handler: function handler(e, _ref10) {
      var $el = _ref10.$el;
      var active = this.getActive();

      if (matches(this.dropbar, ':hover') && active && active.$el === $el) {
        e.preventDefault();
      }
    }
  }, {
    name: 'hide',
    el: function el() {
      return this.dropContainer;
    },
    filter: function filter() {
      return this.dropbar;
    },
    handler: function handler(_, _ref11) {
      var $el = _ref11.$el;

      if (!hasClass($el, this.clsDrop)) {
        return;
      }

      var active = this.getActive();

      if (!active || active && active.$el === $el) {
        this.transitionTo(0);
      }
    }
  }],
  methods: {
    getActive: function getActive() {
      return drop_active && within(drop_active.target, this.$el) && drop_active;
    },
    transitionTo: function transitionTo(newHeight, el) {
      var _this3 = this;

      var dropbar = this.dropbar;
      var oldHeight = isVisible(dropbar) ? dimensions_height(dropbar) : 0;
      el = oldHeight < newHeight && el;
      css(el, 'clip', "rect(0,".concat(el.offsetWidth, "px,").concat(oldHeight, "px,0)"));
      dimensions_height(dropbar, oldHeight);
      Transition.cancel([el, dropbar]);
      return Promise.all([Transition.start(dropbar, {
        height: newHeight
      }, this.duration), Transition.start(el, {
        clip: "rect(0,".concat(el.offsetWidth, "px,").concat(newHeight, "px,0)")
      }, this.duration)]).catch(noop).then(function () {
        css(el, {
          clip: ''
        });

        _this3.$update(dropbar);
      });
    },
    getDropdown: function getDropdown(el) {
      return this.$getComponent(el, 'drop') || this.$getComponent(el, 'dropdown');
    }
  }
});

function handleNavItemNavigation(e, toggles, active) {
  var current = e.current,
      keyCode = e.keyCode;
  var target = active && active.target || current;
  var i = toggles.indexOf(target); // Left

  if (keyCode === keyMap.LEFT && i > 0) {
    active && active.hide(false);
    toggles[i - 1].focus();
  } // Right


  if (keyCode === keyMap.RIGHT && i < toggles.length - 1) {
    active && active.hide(false);
    toggles[i + 1].focus();
  }

  if (keyCode === keyMap.TAB) {
    target.focus();
    active && active.hide(false);
  }
}

function focusFirstFocusableElement(el) {
  if (!$(':focus', el)) {
    var focusEl = $(selFocusable, el);

    if (focusEl) {
      focusEl.focus();
    }
  }
}

var keyMap = {
  TAB: 9,
  ESC: 27,
  LEFT: 37,
  UP: 38,
  RIGHT: 39,
  DOWN: 40
};
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/core/offcanvas.js





/* harmony default export */ var offcanvas = ({
  mixins: [modal],
  args: 'mode',
  props: {
    mode: String,
    flip: Boolean,
    overlay: Boolean
  },
  data: {
    mode: 'slide',
    flip: false,
    overlay: false,
    clsPage: 'uk-offcanvas-page',
    clsContainer: 'uk-offcanvas-container',
    selPanel: '.uk-offcanvas-bar',
    clsFlip: 'uk-offcanvas-flip',
    clsContainerAnimation: 'uk-offcanvas-container-animation',
    clsSidebarAnimation: 'uk-offcanvas-bar-animation',
    clsMode: 'uk-offcanvas',
    clsOverlay: 'uk-offcanvas-overlay',
    selClose: '.uk-offcanvas-close',
    container: false
  },
  computed: {
    clsFlip: function clsFlip(_ref) {
      var flip = _ref.flip,
          clsFlip = _ref.clsFlip;
      return flip ? clsFlip : '';
    },
    clsOverlay: function clsOverlay(_ref2) {
      var overlay = _ref2.overlay,
          clsOverlay = _ref2.clsOverlay;
      return overlay ? clsOverlay : '';
    },
    clsMode: function clsMode(_ref3) {
      var mode = _ref3.mode,
          clsMode = _ref3.clsMode;
      return "".concat(clsMode, "-").concat(mode);
    },
    clsSidebarAnimation: function clsSidebarAnimation(_ref4) {
      var mode = _ref4.mode,
          clsSidebarAnimation = _ref4.clsSidebarAnimation;
      return mode === 'none' || mode === 'reveal' ? '' : clsSidebarAnimation;
    },
    clsContainerAnimation: function clsContainerAnimation(_ref5) {
      var mode = _ref5.mode,
          clsContainerAnimation = _ref5.clsContainerAnimation;
      return mode !== 'push' && mode !== 'reveal' ? '' : clsContainerAnimation;
    },
    transitionElement: function transitionElement(_ref6) {
      var mode = _ref6.mode;
      return mode === 'reveal' ? filter_parent(this.panel) : this.panel;
    }
  },
  update: {
    read: function read() {
      if (this.isToggled() && !isVisible(this.$el)) {
        this.hide();
      }
    },
    events: ['resize']
  },
  events: [{
    name: 'click',
    delegate: function delegate() {
      return 'a[href^="#"]';
    },
    handler: function handler(_ref7) {
      var hash = _ref7.current.hash,
          defaultPrevented = _ref7.defaultPrevented;

      if (!defaultPrevented && hash && $(hash, document.body)) {
        this.hide();
      }
    }
  }, {
    name: 'touchstart',
    passive: true,
    el: function el() {
      return this.panel;
    },
    handler: function handler(_ref8) {
      var targetTouches = _ref8.targetTouches;

      if (targetTouches.length === 1) {
        this.clientY = targetTouches[0].clientY;
      }
    }
  }, {
    name: 'touchmove',
    self: true,
    passive: false,
    filter: function filter() {
      return this.overlay;
    },
    handler: function handler(e) {
      e.cancelable && e.preventDefault();
    }
  }, {
    name: 'touchmove',
    passive: false,
    el: function el() {
      return this.panel;
    },
    handler: function handler(e) {
      if (e.targetTouches.length !== 1) {
        return;
      }

      var clientY = e.targetTouches[0].clientY - this.clientY;
      var _this$panel = this.panel,
          scrollTop = _this$panel.scrollTop,
          scrollHeight = _this$panel.scrollHeight,
          clientHeight = _this$panel.clientHeight;

      if (clientHeight >= scrollHeight || scrollTop === 0 && clientY > 0 || scrollHeight - scrollTop <= clientHeight && clientY < 0) {
        e.cancelable && e.preventDefault();
      }
    }
  }, {
    name: 'show',
    self: true,
    handler: function handler() {
      if (this.mode === 'reveal' && !hasClass(filter_parent(this.panel), this.clsMode)) {
        wrapAll(this.panel, '<div>');
        addClass(filter_parent(this.panel), this.clsMode);
      }

      css(document.documentElement, 'overflowY', this.overlay ? 'hidden' : '');
      addClass(document.body, this.clsContainer, this.clsFlip);
      css(document.body, 'touch-action', 'pan-y pinch-zoom');
      css(this.$el, 'display', 'block');
      addClass(this.$el, this.clsOverlay);
      addClass(this.panel, this.clsSidebarAnimation, this.mode !== 'reveal' ? this.clsMode : '');
      dimensions_height(document.body); // force reflow

      addClass(document.body, this.clsContainerAnimation);
      this.clsContainerAnimation && suppressUserScale();
    }
  }, {
    name: 'hide',
    self: true,
    handler: function handler() {
      removeClass(document.body, this.clsContainerAnimation);
      css(document.body, 'touch-action', '');
    }
  }, {
    name: 'hidden',
    self: true,
    handler: function handler() {
      this.clsContainerAnimation && resumeUserScale();

      if (this.mode === 'reveal') {
        unwrap(this.panel);
      }

      removeClass(this.panel, this.clsSidebarAnimation, this.clsMode);
      removeClass(this.$el, this.clsOverlay);
      css(this.$el, 'display', '');
      removeClass(document.body, this.clsContainer, this.clsFlip);
      css(document.documentElement, 'overflowY', '');
    }
  }, {
    name: 'swipeLeft swipeRight',
    handler: function handler(e) {
      if (this.isToggled() && endsWith(e.type, 'Left') ^ this.flip) {
        this.hide();
      }
    }
  }]
}); // Chrome in responsive mode zooms page upon opening offcanvas

function suppressUserScale() {
  offcanvas_getViewport().content += ',user-scalable=0';
}

function resumeUserScale() {
  var viewport = offcanvas_getViewport();
  viewport.content = viewport.content.replace(/,user-scalable=0$/, '');
}

function offcanvas_getViewport() {
  return $('meta[name="viewport"]', document.head) || append(document.head, '<meta name="viewport">');
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/core/overflow-auto.js



/* harmony default export */ var overflow_auto = ({
  mixins: [mixin_class],
  props: {
    selContainer: String,
    selContent: String,
    minHeight: Number
  },
  data: {
    selContainer: '.uk-modal',
    selContent: '.uk-modal-dialog',
    minHeight: 150
  },
  computed: {
    container: function container(_ref, $el) {
      var selContainer = _ref.selContainer;
      return closest($el, selContainer);
    },
    content: function content(_ref2, $el) {
      var selContent = _ref2.selContent;
      return closest($el, selContent);
    }
  },
  connected: function connected() {
    css(this.$el, 'minHeight', this.minHeight);
  },
  update: {
    read: function read() {
      if (!this.content || !this.container || !isVisible(this.$el)) {
        return false;
      }

      return {
        current: toFloat(css(this.$el, 'maxHeight')),
        max: Math.max(this.minHeight, dimensions_height(this.container) - (dimensions(this.content).height - dimensions_height(this.$el)))
      };
    },
    write: function write(_ref3) {
      var current = _ref3.current,
          max = _ref3.max;
      css(this.$el, 'maxHeight', max);

      if (Math.round(current) !== Math.round(max)) {
        trigger(this.$el, 'resize');
      }
    },
    events: ['resize']
  }
});
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/core/responsive.js

/* harmony default export */ var responsive = ({
  props: ['width', 'height'],
  connected: function connected() {
    addClass(this.$el, 'uk-responsive-width');
  },
  update: {
    read: function read() {
      return isVisible(this.$el) && this.width && this.height ? {
        width: width(filter_parent(this.$el)),
        height: this.height
      } : false;
    },
    write: function write(dim) {
      dimensions_height(this.$el, Dimensions.contain({
        height: this.height,
        width: this.width
      }, dim).height);
    },
    events: ['resize']
  }
});
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/core/scroll.js


/* harmony default export */ var core_scroll = ({
  props: {
    offset: Number
  },
  data: {
    offset: 0
  },
  methods: {
    scrollTo: function scrollTo(el) {
      var _this = this;

      el = el && $(el) || document.body;

      if (trigger(this.$el, 'beforescroll', [this, el])) {
        scrollIntoView(el, {
          offset: this.offset
        }).then(function () {
          return trigger(_this.$el, 'scrolled', [_this, el]);
        });
      }
    }
  },
  events: {
    click: function click(e) {
      if (e.defaultPrevented) {
        return;
      }

      e.preventDefault();
      this.scrollTo("#".concat(selector_escape(decodeURIComponent((this.$el.hash || '').substr(1)))));
    }
  }
});
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.repeat.js
var es_string_repeat = __webpack_require__("./node_modules/core-js/modules/es.string.repeat.js");
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/core/scrollspy.js




var scrollspy_stateKey = '_ukScrollspy';
/* harmony default export */ var scrollspy = ({
  args: 'cls',
  props: {
    cls: String,
    target: String,
    hidden: Boolean,
    offsetTop: Number,
    offsetLeft: Number,
    repeat: Boolean,
    delay: Number
  },
  data: function data() {
    return {
      cls: false,
      target: false,
      hidden: true,
      offsetTop: 0,
      offsetLeft: 0,
      repeat: false,
      delay: 0,
      inViewClass: 'uk-scrollspy-inview'
    };
  },
  computed: {
    elements: {
      get: function get(_ref, $el) {
        var target = _ref.target;
        return target ? $$(target, $el) : [$el];
      },
      watch: function watch(elements) {
        if (this.hidden) {
          css(filter(elements, ":not(.".concat(this.inViewClass, ")")), 'visibility', 'hidden');
        }
      },
      immediate: true
    }
  },
  disconnected: function disconnected() {
    var _this = this;

    this.elements.forEach(function (el) {
      removeClass(el, _this.inViewClass, el[scrollspy_stateKey] ? el[scrollspy_stateKey].cls : '');
      delete el[scrollspy_stateKey];
    });
  },
  update: [{
    read: function read(data) {
      var _this2 = this;

      // Let child components be applied at least once first
      if (!data.update) {
        Promise.resolve().then(function () {
          _this2.$emit();

          data.update = true;
        });
        return false;
      }

      this.elements.forEach(function (el) {
        if (!el[scrollspy_stateKey]) {
          el[scrollspy_stateKey] = {
            cls: attr_data(el, 'uk-scrollspy-class') || _this2.cls
          };
        }

        el[scrollspy_stateKey].show = isInView(el, _this2.offsetTop, _this2.offsetLeft);
      });
    },
    write: function write(data) {
      var _this3 = this;

      this.elements.forEach(function (el) {
        var state = el[scrollspy_stateKey];

        if (state.show && !state.inview && !state.queued) {
          state.queued = true;
          data.promise = (data.promise || Promise.resolve()).then(function () {
            return new Promise(function (resolve) {
              return setTimeout(resolve, _this3.delay);
            });
          }).then(function () {
            _this3.toggle(el, true);

            setTimeout(function () {
              state.queued = false;

              _this3.$emit();
            }, 300);
          });
        } else if (!state.show && state.inview && !state.queued && _this3.repeat) {
          _this3.toggle(el, false);
        }
      });
    },
    events: ['scroll', 'resize']
  }],
  methods: {
    toggle: function toggle(el, inview) {
      var state = el[scrollspy_stateKey];
      state.off && state.off();
      css(el, 'visibility', !inview && this.hidden ? 'hidden' : '');
      toggleClass(el, this.inViewClass, inview);
      toggleClass(el, state.cls);

      if (/\buk-animation-/.test(state.cls)) {
        state.off = once(el, 'animationcancel animationend', function () {
          return removeClasses(el, 'uk-animation-[\\w-]+');
        });
      }

      trigger(el, inview ? 'inview' : 'outview');
      state.inview = inview;
      this.$update(el);
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/core/scrollspy-nav.js
function scrollspy_nav_slicedToArray(arr, i) { return scrollspy_nav_arrayWithHoles(arr) || scrollspy_nav_iterableToArrayLimit(arr, i) || scrollspy_nav_unsupportedIterableToArray(arr, i) || scrollspy_nav_nonIterableRest(); }

function scrollspy_nav_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function scrollspy_nav_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return scrollspy_nav_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return scrollspy_nav_arrayLikeToArray(o, minLen); }

function scrollspy_nav_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function scrollspy_nav_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function scrollspy_nav_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

















/* harmony default export */ var scrollspy_nav = ({
  props: {
    cls: String,
    closest: String,
    scroll: Boolean,
    overflow: Boolean,
    offset: Number
  },
  data: {
    cls: 'uk-active',
    closest: false,
    scroll: false,
    overflow: true,
    offset: 0
  },
  computed: {
    links: {
      get: function get(_, $el) {
        return $$('a[href^="#"]', $el).filter(function (el) {
          return el.hash;
        });
      },
      watch: function watch(links) {
        if (this.scroll) {
          this.$create('scroll', links, {
            offset: this.offset || 0
          });
        }
      },
      immediate: true
    },
    targets: function targets() {
      return $$(this.links.map(function (el) {
        return selector_escape(el.hash).substr(1);
      }).join(','));
    },
    elements: function elements(_ref) {
      var selector = _ref.closest;
      return closest(this.links, selector || '*');
    }
  },
  update: [{
    read: function read() {
      var _this = this;

      var length = this.targets.length;

      if (!length || !isVisible(this.$el)) {
        return false;
      }

      var _scrollParents = scrollParents(this.targets, /auto|scroll/, true),
          _scrollParents2 = scrollspy_nav_slicedToArray(_scrollParents, 1),
          scrollElement = _scrollParents2[0];

      var scrollTop = scrollElement.scrollTop,
          scrollHeight = scrollElement.scrollHeight;
      var max = scrollHeight - getViewportClientHeight(scrollElement);
      var active = false;

      if (scrollTop === max) {
        active = length - 1;
      } else {
        this.targets.every(function (el, i) {
          if (dimensions_offset(el).top - dimensions_offset(getViewport(scrollElement)).top - _this.offset <= 0) {
            active = i;
            return true;
          }
        });

        if (active === false && this.overflow) {
          active = 0;
        }
      }

      return {
        active: active
      };
    },
    write: function write(_ref2) {
      var active = _ref2.active;
      var changed = active !== false && !hasClass(this.elements[active], this.cls);
      this.links.forEach(function (el) {
        return el.blur();
      });
      removeClass(this.elements, this.cls);
      addClass(this.elements[active], this.cls);

      if (changed) {
        trigger(this.$el, 'active', [active, this.elements[active]]);
      }
    },
    events: ['scroll', 'resize']
  }]
});
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/core/sticky.js






/* harmony default export */ var sticky = ({
  mixins: [mixin_class, media],
  props: {
    top: null,
    bottom: Boolean,
    offset: String,
    animation: String,
    clsActive: String,
    clsInactive: String,
    clsFixed: String,
    clsBelow: String,
    selTarget: String,
    widthElement: Boolean,
    showOnUp: Boolean,
    targetOffset: Number
  },
  data: {
    top: 0,
    bottom: false,
    offset: 0,
    animation: '',
    clsActive: 'uk-active',
    clsInactive: '',
    clsFixed: 'uk-sticky-fixed',
    clsBelow: 'uk-sticky-below',
    selTarget: '',
    widthElement: false,
    showOnUp: false,
    targetOffset: false
  },
  computed: {
    offset: function offset(_ref) {
      var offset = _ref.offset;
      return toPx(offset);
    },
    selTarget: function selTarget(_ref2, $el) {
      var selTarget = _ref2.selTarget;
      return selTarget && $(selTarget, $el) || $el;
    },
    widthElement: function widthElement(_ref3, $el) {
      var widthElement = _ref3.widthElement;
      return query(widthElement, $el) || this.placeholder;
    },
    isActive: {
      get: function get() {
        return hasClass(this.selTarget, this.clsActive);
      },
      set: function set(value) {
        if (value && !this.isActive) {
          replaceClass(this.selTarget, this.clsInactive, this.clsActive);
          trigger(this.$el, 'active');
        } else if (!value && !hasClass(this.selTarget, this.clsInactive)) {
          replaceClass(this.selTarget, this.clsActive, this.clsInactive);
          trigger(this.$el, 'inactive');
        }
      }
    }
  },
  connected: function connected() {
    this.placeholder = $('+ .uk-sticky-placeholder', this.$el) || $('<div class="uk-sticky-placeholder"></div>');
    this.isFixed = false;
    this.isActive = false;
  },
  disconnected: function disconnected() {
    if (this.isFixed) {
      this.hide();
      removeClass(this.selTarget, this.clsInactive);
    }

    dom_remove(this.placeholder);
    this.placeholder = null;
    this.widthElement = null;
  },
  events: [{
    name: 'load hashchange popstate',
    el: function el() {
      return window;
    },
    handler: function handler() {
      var _this = this;

      if (!(this.targetOffset !== false && location.hash && window.pageYOffset > 0)) {
        return;
      }

      var target = $(location.hash);

      if (target) {
        fastdom.read(function () {
          var _offset = dimensions_offset(target),
              top = _offset.top;

          var elTop = dimensions_offset(_this.$el).top;
          var elHeight = _this.$el.offsetHeight;

          if (_this.isFixed && elTop + elHeight >= top && elTop <= top + target.offsetHeight) {
            scrollTop(window, top - elHeight - (isNumeric(_this.targetOffset) ? _this.targetOffset : 0) - _this.offset);
          }
        });
      }
    }
  }],
  update: [{
    read: function read(_ref4, types) {
      var height = _ref4.height;
      this.inactive = !this.matchMedia || !isVisible(this.$el);

      if (this.inactive) {
        return false;
      }

      if (this.isActive && types.has('resize')) {
        this.hide();
        height = this.$el.offsetHeight;
        this.show();
      }

      height = !this.isActive ? this.$el.offsetHeight : height;
      this.topOffset = dimensions_offset(this.isFixed ? this.placeholder : this.$el).top;
      this.bottomOffset = this.topOffset + height;
      var bottom = parseProp('bottom', this);
      this.top = Math.max(toFloat(parseProp('top', this)), this.topOffset) - this.offset;
      this.bottom = bottom && bottom - this.$el.offsetHeight;
      this.width = dimensions(isVisible(this.widthElement) ? this.widthElement : this.$el).width;
      return {
        height: height,
        top: offsetPosition(this.placeholder)[0],
        margins: css(this.$el, ['marginTop', 'marginBottom', 'marginLeft', 'marginRight'])
      };
    },
    write: function write(_ref5) {
      var height = _ref5.height,
          margins = _ref5.margins;
      var placeholder = this.placeholder;
      css(placeholder, lang_assign({
        height: height
      }, margins));

      if (!within(placeholder, document)) {
        after(this.$el, placeholder);
        placeholder.hidden = true;
      }

      this.isActive = !!this.isActive; // force self-assign
    },
    events: ['resize']
  }, {
    read: function read(_ref6) {
      var _ref6$scroll = _ref6.scroll,
          scroll = _ref6$scroll === void 0 ? 0 : _ref6$scroll;
      this.scroll = window.pageYOffset;
      return {
        dir: scroll <= this.scroll ? 'down' : 'up',
        scroll: this.scroll
      };
    },
    write: function write(data, types) {
      var _this2 = this;

      var now = Date.now();
      var isScrollUpdate = types.has('scroll');
      var _data$initTimestamp = data.initTimestamp,
          initTimestamp = _data$initTimestamp === void 0 ? 0 : _data$initTimestamp,
          dir = data.dir,
          lastDir = data.lastDir,
          lastScroll = data.lastScroll,
          scroll = data.scroll,
          top = data.top;
      data.lastScroll = scroll;

      if (scroll < 0 || scroll === lastScroll && isScrollUpdate || this.showOnUp && !isScrollUpdate && !this.isFixed) {
        return;
      }

      if (now - initTimestamp > 300 || dir !== lastDir) {
        data.initScroll = scroll;
        data.initTimestamp = now;
      }

      data.lastDir = dir;

      if (this.showOnUp && !this.isFixed && Math.abs(data.initScroll - scroll) <= 30 && Math.abs(lastScroll - scroll) <= 10) {
        return;
      }

      if (this.inactive || scroll < this.top || this.showOnUp && (scroll <= this.top || dir === 'down' && isScrollUpdate || dir === 'up' && !this.isFixed && scroll <= this.bottomOffset)) {
        if (!this.isFixed) {
          if (Animation.inProgress(this.$el) && top > scroll) {
            Animation.cancel(this.$el);
            this.hide();
          }

          return;
        }

        this.isFixed = false;

        if (this.animation && scroll > this.topOffset) {
          Animation.cancel(this.$el);
          Animation.out(this.$el, this.animation).then(function () {
            return _this2.hide();
          }, noop);
        } else {
          this.hide();
        }
      } else if (this.isFixed) {
        this.update();
      } else if (this.animation) {
        Animation.cancel(this.$el);
        this.show();
        Animation["in"](this.$el, this.animation).catch(noop);
      } else {
        this.show();
      }
    },
    events: ['resize', 'scroll']
  }],
  methods: {
    show: function show() {
      this.isFixed = true;
      this.update();
      this.placeholder.hidden = false;
    },
    hide: function hide() {
      this.isActive = false;
      removeClass(this.$el, this.clsFixed, this.clsBelow);
      css(this.$el, {
        position: '',
        top: '',
        width: ''
      });
      this.placeholder.hidden = true;
    },
    update: function update() {
      var active = this.top !== 0 || this.scroll > this.top;
      var top = Math.max(0, this.offset);

      if (isNumeric(this.bottom) && this.scroll > this.bottom - this.offset) {
        top = this.bottom - this.scroll;
      }

      css(this.$el, {
        position: 'fixed',
        top: "".concat(top, "px"),
        width: this.width
      });
      this.isActive = active;
      toggleClass(this.$el, this.clsBelow, this.scroll > this.bottomOffset);
      addClass(this.$el, this.clsFixed);
    }
  }
});

function parseProp(prop, _ref7) {
  var $props = _ref7.$props,
      $el = _ref7.$el,
      propOffset = _ref7["".concat(prop, "Offset")];

  var value = $props[prop];

  if (!value) {
    return;
  }

  if (isString(value) && value.match(/^-?\d/)) {
    return propOffset + toPx(value);
  } else {
    return dimensions_offset(value === true ? filter_parent($el) : query(value, $el)).bottom;
  }
}
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/core/switcher.js






/* harmony default export */ var switcher = ({
  mixins: [togglable],
  args: 'connect',
  props: {
    connect: String,
    toggle: String,
    itemNav: String,
    active: Number,
    swiping: Boolean
  },
  data: {
    connect: '~.uk-switcher',
    toggle: '> * > :first-child',
    itemNav: false,
    active: 0,
    swiping: true,
    cls: 'uk-active',
    attrItem: 'uk-switcher-item'
  },
  computed: {
    connects: {
      get: function get(_ref, $el) {
        var connect = _ref.connect;
        return queryAll(connect, $el);
      },
      watch: function watch(connects) {
        var _this = this;

        if (this.swiping) {
          css(connects, 'touch-action', 'pan-y pinch-zoom');
        }

        var index = this.index();
        this.connects.forEach(function (el) {
          return filter_children(el).forEach(function (child, i) {
            return toggleClass(child, _this.cls, i === index);
          });
        });
      },
      immediate: true
    },
    toggles: {
      get: function get(_ref2, $el) {
        var toggle = _ref2.toggle;
        return $$(toggle, $el).filter(function (el) {
          return !matches(el, '.uk-disabled *, .uk-disabled, [disabled]');
        });
      },
      watch: function watch(toggles) {
        var active = this.index();
        this.show(~active ? active : toggles[this.active] || toggles[0]);
      },
      immediate: true
    },
    children: function children() {
      var _this2 = this;

      return filter_children(this.$el).filter(function (child) {
        return _this2.toggles.some(function (toggle) {
          return within(toggle, child);
        });
      });
    }
  },
  events: [{
    name: 'click',
    delegate: function delegate() {
      return this.toggle;
    },
    handler: function handler(e) {
      e.preventDefault();
      this.show(e.current);
    }
  }, {
    name: 'click',
    el: function el() {
      return this.connects.concat(this.itemNav ? queryAll(this.itemNav, this.$el) : []);
    },
    delegate: function delegate() {
      return "[".concat(this.attrItem, "],[data-").concat(this.attrItem, "]");
    },
    handler: function handler(e) {
      e.preventDefault();
      this.show(attr_data(e.current, this.attrItem));
    }
  }, {
    name: 'swipeRight swipeLeft',
    filter: function filter() {
      return this.swiping;
    },
    el: function el() {
      return this.connects;
    },
    handler: function handler(_ref3) {
      var type = _ref3.type;
      this.show(endsWith(type, 'Left') ? 'next' : 'previous');
    }
  }],
  methods: {
    index: function index() {
      var _this3 = this;

      return findIndex(this.children, function (el) {
        return hasClass(el, _this3.cls);
      });
    },
    show: function show(item) {
      var _this4 = this;

      var prev = this.index();
      var next = lang_getIndex(this.children[lang_getIndex(item, this.toggles, prev)], filter_children(this.$el));

      if (prev === next) {
        return;
      }

      this.children.forEach(function (child, i) {
        toggleClass(child, _this4.cls, next === i);
        attr(_this4.toggles[i], 'aria-expanded', next === i);
      });
      this.connects.forEach(function (_ref4) {
        var children = _ref4.children;
        return _this4.toggleElement(toNodes(children).filter(function (child) {
          return hasClass(child, _this4.cls);
        }), false, prev >= 0).then(function () {
          return _this4.toggleElement(children[next], true, prev >= 0);
        });
      });
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/core/tab.js



/* harmony default export */ var tab = ({
  mixins: [mixin_class],
  extends: switcher,
  props: {
    media: Boolean
  },
  data: {
    media: 960,
    attrItem: 'uk-tab-item'
  },
  connected: function connected() {
    var cls = hasClass(this.$el, 'uk-tab-left') ? 'uk-tab-left' : hasClass(this.$el, 'uk-tab-right') ? 'uk-tab-right' : false;

    if (cls) {
      this.$create('toggle', this.$el, {
        cls: cls,
        mode: 'media',
        media: this.media
      });
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/uikit/src/js/core/toggle.js








/* harmony default export */ var toggle = ({
  mixins: [media, togglable],
  args: 'target',
  props: {
    href: String,
    target: null,
    mode: 'list',
    queued: Boolean
  },
  data: {
    href: false,
    target: false,
    mode: 'click',
    queued: true
  },
  connected: function connected() {
    if (!isFocusable(this.$el)) {
      attr(this.$el, 'tabindex', '0');
    }
  },
  computed: {
    target: {
      get: function get(_ref, $el) {
        var href = _ref.href,
            target = _ref.target;
        target = queryAll(target || href, $el);
        return target.length && target || [$el];
      },
      watch: function watch() {
        this.updateAria();
      },
      immediate: true
    }
  },
  events: [{
    name: "".concat(pointerDown, " ").concat(pointerUp, " ").concat(pointerCancel),
    filter: function filter() {
      return includes(this.mode, 'hover');
    },
    handler: function handler(e) {
      this._isTouch = isTouch(e) && e.type === pointerDown;
    }
  }, {
    // Clicking a button does not give it focus on all browsers and platforms
    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#clicking_and_focus
    name: "".concat(pointerEnter, " ").concat(pointerLeave, " focus blur"),
    filter: function filter() {
      return includes(this.mode, 'hover');
    },
    handler: function handler(e) {
      if (!isTouch(e) && !this._isTouch) {
        var show = includes([pointerEnter, 'focus'], e.type);

        if (e.type === 'blur' && matches(this.$el, ':hover') || e.type === pointerLeave && matches(this.$el, ':focus') || show && attr(this.$el, 'aria-expanded') === 'true') {
          return;
        }

        this.toggle("toggle".concat(show ? 'show' : 'hide'));
      }
    }
  }, {
    name: 'keydown',
    filter: function filter() {
      return includes(this.mode, 'click');
    },
    handler: function handler(e) {
      // Space
      if (e.keyCode === 32) {
        e.preventDefault();
        this.$el.click();
      }
    }
  }, {
    name: 'click',
    filter: function filter() {
      return includes(this.mode, 'click') || hasTouch && includes(this.mode, 'hover');
    },
    handler: function handler(e) {
      var link;

      if (closest(e.target, 'a[href="#"], a[href=""]') || (link = closest(e.target, 'a[href]')) && (attr(this.$el, 'aria-expanded') !== 'true' || link.hash && matches(this.target, link.hash))) {
        e.preventDefault();
      }

      this.toggle();
    }
  }, {
    name: 'toggled',
    self: true,
    el: function el() {
      return this.target;
    },
    handler: function handler(e, toggled) {
      if (e.target === this.target[0]) {
        this.updateAria(toggled);
      }
    }
  }],
  update: {
    read: function read() {
      return includes(this.mode, 'media') && this.media ? {
        match: this.matchMedia
      } : false;
    },
    write: function write(_ref2) {
      var match = _ref2.match;
      var toggled = this.isToggled(this.target);

      if (match ? !toggled : toggled) {
        this.toggle();
      }
    },
    events: ['resize']
  },
  methods: {
    toggle: function toggle(type) {
      var _this = this;

      if (!trigger(this.target, type || 'toggle', [this])) {
        return;
      }

      if (!this.queued) {
        return this.toggleElement(this.target);
      }

      var leaving = this.target.filter(function (el) {
        return hasClass(el, _this.clsLeave);
      });

      if (leaving.length) {
        this.target.forEach(function (el) {
          var isLeaving = includes(leaving, el);

          _this.toggleElement(el, isLeaving, isLeaving);
        });
        return;
      }

      var toggled = this.target.filter(this.isToggled);
      this.toggleElement(toggled, false).then(function () {
        return _this.toggleElement(_this.target.filter(function (el) {
          return !includes(toggled, el);
        }), true);
      });
    },
    updateAria: function updateAria(toggled) {
      attr(this.$el, 'aria-expanded', isBoolean(toggled) ? toggled : this.isToggled(this.target));
    }
  }
});
;// CONCATENATED MODULE: ./assets/js/base/core/index.js





























function core_core(UIkit) {
  // Core components
  UIkit.component('accordion', accordion);
  UIkit.component('alert', core_alert);
  UIkit.component('cover', cover);
  UIkit.component('drop', drop);
  UIkit.component('dropdown', drop);
  UIkit.component('formCustom', form_custom);
  UIkit.component('gif', gif);
  UIkit.component('grid', grid);
  UIkit.component('heightMatch', height_match);
  UIkit.component('heightViewport', height_viewport);
  UIkit.component('icon', icon);
  UIkit.component('img', img);
  UIkit.component('leader', leader);
  UIkit.component('margin', margin);
  UIkit.component('modal', core_modal);
  UIkit.component('nav', nav);
  UIkit.component('navbar', navbar);
  UIkit.component('offcanvas', offcanvas);
  UIkit.component('overflowAuto', overflow_auto);
  UIkit.component('responsive', responsive);
  UIkit.component('scroll', core_scroll);
  UIkit.component('scrollspy', scrollspy);
  UIkit.component('scrollspyNav', scrollspy_nav);
  UIkit.component('sticky', sticky);
  UIkit.component('svg', svg);
  UIkit.component('switcher', switcher);
  UIkit.component('tab', tab);
  UIkit.component('toggle', toggle);
  UIkit.component('video', video); // Icon components

  UIkit.component('close', Close);
  UIkit.component('marker', IconComponent);
  UIkit.component('navbarToggleIcon', IconComponent);
  UIkit.component('overlayIcon', IconComponent);
  UIkit.component('paginationNext', IconComponent);
  UIkit.component('paginationPrevious', IconComponent);
  UIkit.component('searchIcon', Search);
  UIkit.component('slidenavNext', Slidenav);
  UIkit.component('slidenavPrevious', Slidenav);
  UIkit.component('spinner', Spinner);
  UIkit.component('totop', IconComponent); // Core functionality

  UIkit.use(core);
}
;// CONCATENATED MODULE: ./assets/js/base/uikit-core.js

 // The VERSION variable is provided through the WebpackDefinePlugin

api.version = "3.7.4";
core_core(api);
/* harmony default export */ var uikit_core = (api);
;// CONCATENATED MODULE: ./assets/js/base/uikit.js














 // Components

uikit_core.component('countdown', countdown);
uikit_core.component('filter', components_filter);
uikit_core.component('lightbox', lightbox);
uikit_core.component('lightboxPanel', lightbox_panel);
uikit_core.component('notification', notification);
uikit_core.component('parallax', components_parallax);
uikit_core.component('slider', components_slider);
uikit_core.component('sliderParallax', slider_parallax);
uikit_core.component('slideshow', components_slideshow);
uikit_core.component('slideshowParallax', slider_parallax);
uikit_core.component('sortable', sortable);
uikit_core.component('tooltip', tooltip);
uikit_core.component('upload', upload);
boot(uikit_core); // Icons

uikit_core.use((uikit_icons_default()));
/* harmony default export */ var uikit = (uikit_core);
;// CONCATENATED MODULE: ./assets/scss/index.scss
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./assets/js/index.js
// Import base

 // Make UIkit accessible via browser console

__webpack_require__.g.UIkit = uikit; // Initialize your application or do something else ...
}();
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,